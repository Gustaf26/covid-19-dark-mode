{"version":3,"file":"chart.umd.js","sources":["../src/helpers/helpers.core.ts","../src/helpers/helpers.math.ts","../src/helpers/helpers.collection.ts","../src/helpers/helpers.extras.ts","../src/core/core.animator.js","../node_modules/@kurkle/color/dist/color.esm.js","../src/helpers/helpers.color.ts","../src/core/core.animations.defaults.js","../src/helpers/helpers.intl.ts","../src/core/core.ticks.js","../src/core/core.defaults.js","../src/core/core.layouts.defaults.js","../src/core/core.scale.defaults.js","../src/helpers/helpers.dom.ts","../src/helpers/helpers.canvas.js","../src/helpers/helpers.config.js","../src/helpers/helpers.curve.ts","../src/helpers/helpers.easing.ts","../src/helpers/helpers.interpolation.ts","../src/helpers/helpers.options.ts","../src/helpers/helpers.rtl.ts","../src/helpers/helpers.segment.js","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/core/core.adapters.ts","../src/controllers/controller.bar.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.bubble.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.umd.ts"],"sourcesContent":["/**\r\n * @namespace Chart.helpers\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic.js';\r\nimport type {ActiveDataPoint, ChartEvent} from '../../types/index.js';\r\n\r\n/**\r\n * An empty function that can be used, for example, for optional callback.\r\n */\r\nexport function noop() {\r\n  /* noop */\r\n}\r\n\r\n/**\r\n * Returns a unique id, sequentially generated from a global variable.\r\n */\r\nexport const uid = (() => {\r\n  let id = 0;\r\n  return () => id++;\r\n})();\r\n\r\n/**\r\n * Returns true if `value` is neither null nor undefined, else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isNullOrUndef(value: unknown): value is null | undefined {\r\n  return value === null || typeof value === 'undefined';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an array (including typed arrays), else returns false.\r\n * @param value - The value to test.\r\n * @function\r\n */\r\nexport function isArray<T = unknown>(value: unknown): value is T[] {\r\n  if (Array.isArray && Array.isArray(value)) {\r\n    return true;\r\n  }\r\n  const type = Object.prototype.toString.call(value);\r\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns true if `value` is an object (excluding null), else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */\r\nexport function isObject(value: unknown): value is AnyObject {\r\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Returns true if `value` is a finite number, else returns false\r\n * @param value  - The value to test.\r\n */\r\nfunction isNumberFinite(value: unknown): value is number {\r\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\r\n}\r\nexport {\r\n  isNumberFinite as isFinite,\r\n};\r\n\r\n/**\r\n * Returns `value` if finite, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is not finite.\r\n */\r\nexport function finiteOrDefault(value: unknown, defaultValue: number) {\r\n  return isNumberFinite(value) ? value : defaultValue;\r\n}\r\n\r\n/**\r\n * Returns `value` if defined, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is undefined.\r\n */\r\nexport function valueOrDefault<T>(value: T | undefined, defaultValue: T) {\r\n  return typeof value === 'undefined' ? defaultValue : value;\r\n}\r\n\r\nexport const toPercentage = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100\r\n    : +value / dimension;\r\n\r\nexport const toDimension = (value: number | string, dimension: number) =>\r\n  typeof value === 'string' && value.endsWith('%') ?\r\n    parseFloat(value) / 100 * dimension\r\n    : +value;\r\n\r\n/**\r\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\r\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\r\n * @param fn - The function to call.\r\n * @param args - The arguments with which `fn` should be called.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n */\r\nexport function callback<T extends (this: TA, ...restArgs: unknown[]) => R, TA, R>(\r\n  fn: T | undefined,\r\n  args: unknown[],\r\n  thisArg?: TA\r\n): R | undefined {\r\n  if (fn && typeof fn.call === 'function') {\r\n    return fn.apply(thisArg, args);\r\n  }\r\n}\r\n\r\n/**\r\n * Note(SB) for performance sake, this method should only be used when loopable type\r\n * is unknown or in none intensive code (not called often and small loopable). Else\r\n * it's preferable to use a regular for() loop and save extra function calls.\r\n * @param loopable - The object or array to be iterated.\r\n * @param fn - The function to call for each item.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n * @param [reverse] - If true, iterates backward on the loopable.\r\n */\r\nexport function each<T, TA>(\r\n  loopable: Record<string, T>,\r\n  fn: (this: TA, v: T, i: string) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[],\r\n  fn: (this: TA, v: T, i: number) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n): void;\r\nexport function each<T, TA>(\r\n  loopable: T[] | Record<string, T>,\r\n  fn: (this: TA, v: T, i: any) => void,\r\n  thisArg?: TA,\r\n  reverse?: boolean\r\n) {\r\n  let i: number, len: number, keys: string[];\r\n  if (isArray(loopable)) {\r\n    len = loopable.length;\r\n    if (reverse) {\r\n      for (i = len - 1; i >= 0; i--) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    } else {\r\n      for (i = 0; i < len; i++) {\r\n        fn.call(thisArg, loopable[i], i);\r\n      }\r\n    }\r\n  } else if (isObject(loopable)) {\r\n    keys = Object.keys(loopable);\r\n    len = keys.length;\r\n    for (i = 0; i < len; i++) {\r\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\r\n * @param a0 - The array to compare\r\n * @param a1 - The array to compare\r\n * @private\r\n */\r\nexport function _elementsEqual(a0: ActiveDataPoint[], a1: ActiveDataPoint[]) {\r\n  let i: number, ilen: number, v0: ActiveDataPoint, v1: ActiveDataPoint;\r\n\r\n  if (!a0 || !a1 || a0.length !== a1.length) {\r\n    return false;\r\n  }\r\n\r\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\r\n    v0 = a0[i];\r\n    v1 = a1[i];\r\n\r\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Returns a deep copy of `source` without keeping references on objects and arrays.\r\n * @param source - The value to clone.\r\n */\r\nexport function clone<T>(source: T): T {\r\n  if (isArray(source)) {\r\n    return source.map(clone) as unknown as T;\r\n  }\r\n\r\n  if (isObject(source)) {\r\n    const target = Object.create(null);\r\n    const keys = Object.keys(source);\r\n    const klen = keys.length;\r\n    let k = 0;\r\n\r\n    for (; k < klen; ++k) {\r\n      target[keys[k]] = clone(source[keys[k]]);\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  return source;\r\n}\r\n\r\nfunction isValidKey(key: string) {\r\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\r\n}\r\n\r\n/**\r\n * The default merger when Chart.helpers.merge is called without merger option.\r\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\r\n * @private\r\n */\r\nexport function _merger(key: string, target: AnyObject, source: AnyObject, options: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    merge(tval, sval, options);\r\n  } else {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\nexport interface MergeOptions {\r\n  merger?: (key: string, target: AnyObject, source: AnyObject, options?: AnyObject) => void;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` with the given `options`.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @param [options] - Merging options:\r\n * @param [options.merger] - The merge method (key, target, source, options)\r\n * @returns The `target` object.\r\n */\r\nexport function merge<T>(target: T, source: [], options?: MergeOptions): T;\r\nexport function merge<T, S1>(target: T, source: S1, options?: MergeOptions): T & S1;\r\nexport function merge<T, S1>(target: T, source: [S1], options?: MergeOptions): T & S1;\r\nexport function merge<T, S1, S2>(target: T, source: [S1, S2], options?: MergeOptions): T & S1 & S2;\r\nexport function merge<T, S1, S2, S3>(target: T, source: [S1, S2, S3], options?: MergeOptions): T & S1 & S2 & S3;\r\nexport function merge<T, S1, S2, S3, S4>(\r\n  target: T,\r\n  source: [S1, S2, S3, S4],\r\n  options?: MergeOptions\r\n): T & S1 & S2 & S3 & S4;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject;\r\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject {\r\n  const sources = isArray(source) ? source : [source];\r\n  const ilen = sources.length;\r\n\r\n  if (!isObject(target)) {\r\n    return target as AnyObject;\r\n  }\r\n\r\n  options = options || {};\r\n  const merger = options.merger || _merger;\r\n  let current: AnyObject;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    current = sources[i];\r\n    if (!isObject(current)) {\r\n      continue;\r\n    }\r\n\r\n    const keys = Object.keys(current);\r\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\r\n      merger(keys[k], target, current, options as AnyObject);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Recursively deep copies `source` properties into `target` *only* if not defined in target.\r\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\r\n * @param target - The target object in which all sources are merged into.\r\n * @param source - Object(s) to merge into `target`.\r\n * @returns The `target` object.\r\n */\r\nexport function mergeIf<T>(target: T, source: []): T;\r\nexport function mergeIf<T, S1>(target: T, source: S1): T & S1;\r\nexport function mergeIf<T, S1>(target: T, source: [S1]): T & S1;\r\nexport function mergeIf<T, S1, S2>(target: T, source: [S1, S2]): T & S1 & S2;\r\nexport function mergeIf<T, S1, S2, S3>(target: T, source: [S1, S2, S3]): T & S1 & S2 & S3;\r\nexport function mergeIf<T, S1, S2, S3, S4>(target: T, source: [S1, S2, S3, S4]): T & S1 & S2 & S3 & S4;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject;\r\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject {\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return merge<T>(target, source, {merger: _mergerIf});\r\n}\r\n\r\n/**\r\n * Merges source[key] in target[key] only if target[key] is undefined.\r\n * @private\r\n */\r\nexport function _mergerIf(key: string, target: AnyObject, source: AnyObject) {\r\n  if (!isValidKey(key)) {\r\n    return;\r\n  }\r\n\r\n  const tval = target[key];\r\n  const sval = source[key];\r\n\r\n  if (isObject(tval) && isObject(sval)) {\r\n    mergeIf(tval, sval);\r\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\r\n    target[key] = clone(sval);\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _deprecated(scope: string, value: unknown, previous: string, current: string) {\r\n  if (value !== undefined) {\r\n    console.warn(scope + ': \"' + previous +\r\n      '\" is deprecated. Please use \"' + current + '\" instead');\r\n  }\r\n}\r\n\r\n// resolveObjectKey resolver cache\r\nconst keyResolvers = {\r\n  // Chart.helpers.core resolveObjectKey should resolve empty key to root object\r\n  '': v => v,\r\n  // default resolvers\r\n  x: o => o.x,\r\n  y: o => o.y\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _splitKey(key: string) {\r\n  const parts = key.split('.');\r\n  const keys: string[] = [];\r\n  let tmp = '';\r\n  for (const part of parts) {\r\n    tmp += part;\r\n    if (tmp.endsWith('\\\\')) {\r\n      tmp = tmp.slice(0, -1) + '.';\r\n    } else {\r\n      keys.push(tmp);\r\n      tmp = '';\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction _getKeyResolver(key: string) {\r\n  const keys = _splitKey(key);\r\n  return obj => {\r\n    for (const k of keys) {\r\n      if (k === '') {\r\n        // For backward compatibility:\r\n        // Chart.helpers.core resolveObjectKey should break at empty key\r\n        break;\r\n      }\r\n      obj = obj && obj[k];\r\n    }\r\n    return obj;\r\n  };\r\n}\r\n\r\nexport function resolveObjectKey(obj: AnyObject, key: string): AnyObject {\r\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\r\n  return resolver(obj);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _capitalize(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n\r\nexport const defined = (value: unknown) => typeof value !== 'undefined';\r\n\r\nexport const isFunction = (value: unknown): value is (...args: any[]) => any => typeof value === 'function';\r\n\r\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\r\nexport const setsEqual = <T>(a: Set<T>, b: Set<T>) => {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n\r\n  for (const item of a) {\r\n    if (!b.has(item)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * @param e - The event\r\n * @private\r\n */\r\nexport function _isClickEvent(e: ChartEvent) {\r\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\r\n}\r\n","import type {Point} from '../../types/geometric.js';\r\nimport {isFinite as isFiniteNumber} from './helpers.core.js';\r\n\r\n/**\r\n * @alias Chart.helpers.math\r\n * @namespace\r\n */\r\n\r\nexport const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\nexport const PITAU = TAU + PI;\r\nexport const INFINITY = Number.POSITIVE_INFINITY;\r\nexport const RAD_PER_DEG = PI / 180;\r\nexport const HALF_PI = PI / 2;\r\nexport const QUARTER_PI = PI / 4;\r\nexport const TWO_THIRDS_PI = PI * 2 / 3;\r\n\r\nexport const log10 = Math.log10;\r\nexport const sign = Math.sign;\r\n\r\nexport function almostEquals(x: number, y: number, epsilon: number) {\r\n  return Math.abs(x - y) < epsilon;\r\n}\r\n\r\n/**\r\n * Implementation of the nice number algorithm used in determining where axis labels will go\r\n */\r\nexport function niceNum(range: number) {\r\n  const roundedRange = Math.round(range);\r\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\r\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\r\n  const fraction = range / niceRange;\r\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\r\n  return niceFraction * niceRange;\r\n}\r\n\r\n/**\r\n * Returns an array of factors sorted from 1 to sqrt(value)\r\n * @private\r\n */\r\nexport function _factorize(value: number) {\r\n  const result: number[] = [];\r\n  const sqrt = Math.sqrt(value);\r\n  let i: number;\r\n\r\n  for (i = 1; i < sqrt; i++) {\r\n    if (value % i === 0) {\r\n      result.push(i);\r\n      result.push(value / i);\r\n    }\r\n  }\r\n  if (sqrt === (sqrt | 0)) { // if value is a square number\r\n    result.push(sqrt);\r\n  }\r\n\r\n  result.sort((a, b) => a - b).pop();\r\n  return result;\r\n}\r\n\r\nexport function isNumber(n: unknown): n is number {\r\n  return !isNaN(parseFloat(n as string)) && isFinite(n as number);\r\n}\r\n\r\nexport function almostWhole(x: number, epsilon: number) {\r\n  const rounded = Math.round(x);\r\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _setMinAndMaxByKey(\r\n  array: Record<string, number>[],\r\n  target: { min: number, max: number },\r\n  property: string\r\n) {\r\n  let i: number, ilen: number, value: number;\r\n\r\n  for (i = 0, ilen = array.length; i < ilen; i++) {\r\n    value = array[i][property];\r\n    if (!isNaN(value)) {\r\n      target.min = Math.min(target.min, value);\r\n      target.max = Math.max(target.max, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function toRadians(degrees: number) {\r\n  return degrees * (PI / 180);\r\n}\r\n\r\nexport function toDegrees(radians: number) {\r\n  return radians * (180 / PI);\r\n}\r\n\r\n/**\r\n * Returns the number of decimal places\r\n * i.e. the number of digits after the decimal point, of the value of this Number.\r\n * @param x - A number.\r\n * @returns The number of decimal places.\r\n * @private\r\n */\r\nexport function _decimalPlaces(x: number) {\r\n  if (!isFiniteNumber(x)) {\r\n    return;\r\n  }\r\n  let e = 1;\r\n  let p = 0;\r\n  while (Math.round(x * e) / e !== x) {\r\n    e *= 10;\r\n    p++;\r\n  }\r\n  return p;\r\n}\r\n\r\n// Gets the angle from vertical upright to the point about a centre.\r\nexport function getAngleFromPoint(\r\n  centrePoint: Point,\r\n  anglePoint: Point\r\n) {\r\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\r\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\r\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\r\n\r\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\r\n\r\n  if (angle < (-0.5 * PI)) {\r\n    angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\r\n  }\r\n\r\n  return {\r\n    angle,\r\n    distance: radialDistanceFromCenter\r\n  };\r\n}\r\n\r\nexport function distanceBetweenPoints(pt1: Point, pt2: Point) {\r\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\r\n}\r\n\r\n/**\r\n * Shortest distance between angles, in either direction.\r\n * @private\r\n */\r\nexport function _angleDiff(a: number, b: number) {\r\n  return (a - b + PITAU) % TAU - PI;\r\n}\r\n\r\n/**\r\n * Normalize angle to be between 0 and 2*PI\r\n * @private\r\n */\r\nexport function _normalizeAngle(a: number) {\r\n  return (a % TAU + TAU) % TAU;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _angleBetween(angle: number, start: number, end: number, sameAngleIsFullCircle?: boolean) {\r\n  const a = _normalizeAngle(angle);\r\n  const s = _normalizeAngle(start);\r\n  const e = _normalizeAngle(end);\r\n  const angleToStart = _normalizeAngle(s - a);\r\n  const angleToEnd = _normalizeAngle(e - a);\r\n  const startToAngle = _normalizeAngle(a - s);\r\n  const endToAngle = _normalizeAngle(a - e);\r\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\r\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\r\n}\r\n\r\n/**\r\n * Limit `value` between `min` and `max`\r\n * @param value\r\n * @param min\r\n * @param max\r\n * @private\r\n */\r\nexport function _limitValue(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @param {number} value\r\n * @private\r\n */\r\nexport function _int16Range(value: number) {\r\n  return _limitValue(value, -32768, 32767);\r\n}\r\n\r\n/**\r\n * @param value\r\n * @param start\r\n * @param end\r\n * @param [epsilon]\r\n * @private\r\n */\r\nexport function _isBetween(value: number, start: number, end: number, epsilon = 1e-6) {\r\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\r\n}\r\n","import {_capitalize} from './helpers.core.js';\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param value - value to find\r\n * @param cmp\r\n * @private\r\n */\r\nexport function _lookup(\r\n  table: number[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup<T>(\r\n  table: T[],\r\n  value: number,\r\n  cmp: (value: number) => boolean\r\n): {lo: number, hi: number};\r\nexport function _lookup(\r\n  table: unknown[],\r\n  value: number,\r\n  cmp?: (value: number) => boolean\r\n) {\r\n  cmp = cmp || ((index) => table[index] < value);\r\n  let hi = table.length - 1;\r\n  let lo = 0;\r\n  let mid: number;\r\n\r\n  while (hi - lo > 1) {\r\n    mid = (lo + hi) >> 1;\r\n    if (cmp(mid)) {\r\n      lo = mid;\r\n    } else {\r\n      hi = mid;\r\n    }\r\n  }\r\n\r\n  return {lo, hi};\r\n}\r\n\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @param last - lookup last index\r\n * @private\r\n */\r\nexport const _lookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number,\r\n  last?: boolean\r\n) =>\r\n  _lookup(table, value, last\r\n    ? index => {\r\n      const ti = table[index][key];\r\n      return ti < value || ti === value && table[index + 1][key] === value;\r\n    }\r\n    : index => table[index][key] < value);\r\n\r\n/**\r\n * Reverse binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @private\r\n */\r\nexport const _rlookupByKey = (\r\n  table: Record<string, number>[],\r\n  key: string,\r\n  value: number\r\n) =>\r\n  _lookup(table, value, index => table[index][key] >= value);\r\n\r\n/**\r\n * Return subset of `values` between `min` and `max` inclusive.\r\n * Values are assumed to be in sorted order.\r\n * @param values - sorted array of values\r\n * @param min - min value\r\n * @param max - max value\r\n */\r\nexport function _filterBetween(values: number[], min: number, max: number) {\r\n  let start = 0;\r\n  let end = values.length;\r\n\r\n  while (start < end && values[start] < min) {\r\n    start++;\r\n  }\r\n  while (end > start && values[end - 1] > max) {\r\n    end--;\r\n  }\r\n\r\n  return start > 0 || end < values.length\r\n    ? values.slice(start, end)\r\n    : values;\r\n}\r\n\r\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'] as const;\r\n\r\nexport interface ArrayListener<T> {\r\n  _onDataPush?(...item: T[]): void;\r\n  _onDataPop?(): void;\r\n  _onDataShift?(): void;\r\n  _onDataSplice?(index: number, deleteCount: number, ...items: T[]): void;\r\n  _onDataUnshift?(...item: T[]): void;\r\n}\r\n\r\n/**\r\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\r\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\r\n * called on the '_onData*' callbacks (e.g. _onDataPush, etc.) with same arguments.\r\n */\r\nexport function listenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function listenArrayEvents(array, listener) {\r\n  if (array._chartjs) {\r\n    array._chartjs.listeners.push(listener);\r\n    return;\r\n  }\r\n\r\n  Object.defineProperty(array, '_chartjs', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: {\r\n      listeners: [listener]\r\n    }\r\n  });\r\n\r\n  arrayEvents.forEach((key) => {\r\n    const method = '_onData' + _capitalize(key);\r\n    const base = array[key];\r\n\r\n    Object.defineProperty(array, key, {\r\n      configurable: true,\r\n      enumerable: false,\r\n      value(...args) {\r\n        const res = base.apply(this, args);\r\n\r\n        array._chartjs.listeners.forEach((object) => {\r\n          if (typeof object[method] === 'function') {\r\n            object[method](...args);\r\n          }\r\n        });\r\n\r\n        return res;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Removes the given array event listener and cleanup extra attached properties (such as\r\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\r\n */\r\nexport function unlistenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\r\nexport function unlistenArrayEvents(array, listener) {\r\n  const stub = array._chartjs;\r\n  if (!stub) {\r\n    return;\r\n  }\r\n\r\n  const listeners = stub.listeners;\r\n  const index = listeners.indexOf(listener);\r\n  if (index !== -1) {\r\n    listeners.splice(index, 1);\r\n  }\r\n\r\n  if (listeners.length > 0) {\r\n    return;\r\n  }\r\n\r\n  arrayEvents.forEach((key) => {\r\n    delete array[key];\r\n  });\r\n\r\n  delete array._chartjs;\r\n}\r\n\r\n/**\r\n * @param items\r\n */\r\nexport function _arrayUnique<T>(items: T[]) {\r\n  const set = new Set<T>();\r\n  let i: number, ilen: number;\r\n\r\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n    set.add(items[i]);\r\n  }\r\n\r\n  if (set.size === ilen) {\r\n    return items;\r\n  }\r\n\r\n  return Array.from(set);\r\n}\r\n","import type {ChartMeta, PointElement} from '../../types/index.js';\r\n\r\nimport {_limitValue} from './helpers.math.js';\r\nimport {_lookupByKey} from './helpers.collection.js';\r\n\r\nexport function fontString(pixelSize: number, fontStyle: string, fontFamily: string) {\r\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\r\n}\r\n\r\n/**\r\n* Request animation polyfill\r\n*/\r\nexport const requestAnimFrame = (function() {\r\n  if (typeof window === 'undefined') {\r\n    return function(callback) {\r\n      return callback();\r\n    };\r\n  }\r\n  return window.requestAnimationFrame;\r\n}());\r\n\r\n/**\r\n * Throttles calling `fn` once per animation frame\r\n * Latest arguments are used on the actual call\r\n */\r\nexport function throttled<TArgs extends Array<any>>(\r\n  fn: (...args: TArgs) => void,\r\n  thisArg: any,\r\n) {\r\n  let ticking = false;\r\n\r\n  return function(...args: TArgs) {\r\n    if (!ticking) {\r\n      ticking = true;\r\n      requestAnimFrame.call(window, () => {\r\n        ticking = false;\r\n        fn.apply(thisArg, args);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Debounces calling `fn` for `delay` ms\r\n */\r\nexport function debounce<TArgs extends Array<any>>(fn: (...args: TArgs) => void, delay: number) {\r\n  let timeout;\r\n  return function(...args: TArgs) {\r\n    if (delay) {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(fn, delay, args);\r\n    } else {\r\n      fn.apply(this, args);\r\n    }\r\n    return delay;\r\n  };\r\n}\r\n\r\n/**\r\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\r\n * @private\r\n */\r\nexport const _toLeftRightCenter = (align: 'start' | 'end' | 'center') => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\r\n\r\n/**\r\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\r\n * @private\r\n */\r\nexport const _alignStartEnd = (align: 'start' | 'end' | 'center', start: number, end: number) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\r\n\r\n/**\r\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\r\n * @private\r\n */\r\nexport const _textX = (align: 'left' | 'right' | 'center', left: number, right: number, rtl: boolean) => {\r\n  const check = rtl ? 'left' : 'right';\r\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\r\n};\r\n\r\n/**\r\n * Return start and count of visible points.\r\n * @private\r\n */\r\nexport function _getStartAndCountOfVisiblePoints(meta: ChartMeta<'line' | 'scatter'>, points: PointElement[], animationsDisabled: boolean) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count = pointCount;\r\n\r\n  if (meta._sorted) {\r\n    const {iScale, _parsed} = meta;\r\n    const axis = iScale.axis;\r\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n    if (minDefined) {\r\n      start = _limitValue(Math.min(\r\n        // @ts-expect-error Need to type _parsed\r\n        _lookupByKey(_parsed, iScale.axis, min).lo,\r\n        // @ts-expect-error Need to fix types on _lookupByKey\r\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\r\n      0, pointCount - 1);\r\n    }\r\n    if (maxDefined) {\r\n      count = _limitValue(Math.max(\r\n        // @ts-expect-error Need to type _parsed\r\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\r\n        // @ts-expect-error Need to fix types on _lookupByKey\r\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\r\n      start, pointCount) - start;\r\n    } else {\r\n      count = pointCount - start;\r\n    }\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\n/**\r\n * Checks if the scale ranges have changed.\r\n * @param {object} meta - dataset meta.\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _scaleRangesChanged(meta) {\r\n  const {xScale, yScale, _scaleRanges} = meta;\r\n  const newRanges = {\r\n    xmin: xScale.min,\r\n    xmax: xScale.max,\r\n    ymin: yScale.min,\r\n    ymax: yScale.max\r\n  };\r\n  if (!_scaleRanges) {\r\n    meta._scaleRanges = newRanges;\r\n    return true;\r\n  }\r\n  const changed = _scaleRanges.xmin !== xScale.min\r\n\t\t|| _scaleRanges.xmax !== xScale.max\r\n\t\t|| _scaleRanges.ymin !== yScale.min\r\n\t\t|| _scaleRanges.ymax !== yScale.max;\r\n\r\n  Object.assign(_scaleRanges, newRanges);\r\n  return changed;\r\n}\r\n","import {requestAnimFrame} from '../helpers/helpers.extras.js';\r\n\r\n/**\r\n * @typedef { import('./core.animation.js').default } Animation\r\n * @typedef { import('./core.controller.js').default } Chart\r\n */\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is export for typedoc\r\n */\r\nexport class Animator {\r\n  constructor() {\r\n    this._request = null;\r\n    this._charts = new Map();\r\n    this._running = false;\r\n    this._lastDate = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(chart, anims, date, type) {\r\n    const callbacks = anims.listeners[type];\r\n    const numSteps = anims.duration;\r\n\r\n    callbacks.forEach(fn => fn({\r\n      chart,\r\n      initial: anims.initial,\r\n      numSteps,\r\n      currentStep: Math.min(date - anims.start, numSteps)\r\n    }));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _refresh() {\r\n    if (this._request) {\r\n      return;\r\n    }\r\n    this._running = true;\r\n\r\n    this._request = requestAnimFrame.call(window, () => {\r\n      this._update();\r\n      this._request = null;\r\n\r\n      if (this._running) {\r\n        this._refresh();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(date = Date.now()) {\r\n    let remaining = 0;\r\n\r\n    this._charts.forEach((anims, chart) => {\r\n      if (!anims.running || !anims.items.length) {\r\n        return;\r\n      }\r\n      const items = anims.items;\r\n      let i = items.length - 1;\r\n      let draw = false;\r\n      let item;\r\n\r\n      for (; i >= 0; --i) {\r\n        item = items[i];\r\n\r\n        if (item._active) {\r\n          if (item._total > anims.duration) {\r\n            // if the animation has been updated and its duration prolonged,\r\n            // update to total duration of current animations run (for progress event)\r\n            anims.duration = item._total;\r\n          }\r\n          item.tick(date);\r\n          draw = true;\r\n        } else {\r\n          // Remove the item by replacing it with last item and removing the last\r\n          // A lot faster than splice.\r\n          items[i] = items[items.length - 1];\r\n          items.pop();\r\n        }\r\n      }\r\n\r\n      if (draw) {\r\n        chart.draw();\r\n        this._notify(chart, anims, date, 'progress');\r\n      }\r\n\r\n      if (!items.length) {\r\n        anims.running = false;\r\n        this._notify(chart, anims, date, 'complete');\r\n        anims.initial = false;\r\n      }\r\n\r\n      remaining += items.length;\r\n    });\r\n\r\n    this._lastDate = date;\r\n\r\n    if (remaining === 0) {\r\n      this._running = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getAnims(chart) {\r\n    const charts = this._charts;\r\n    let anims = charts.get(chart);\r\n    if (!anims) {\r\n      anims = {\r\n        running: false,\r\n        initial: true,\r\n        items: [],\r\n        listeners: {\r\n          complete: [],\r\n          progress: []\r\n        }\r\n      };\r\n      charts.set(chart, anims);\r\n    }\r\n    return anims;\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} event - event name\r\n\t * @param {Function} cb - callback\r\n\t */\r\n  listen(chart, event, cb) {\r\n    this._getAnims(chart).listeners[event].push(cb);\r\n  }\r\n\r\n  /**\r\n\t * Add animations\r\n\t * @param {Chart} chart\r\n\t * @param {Animation[]} items - animations\r\n\t */\r\n  add(chart, items) {\r\n    if (!items || !items.length) {\r\n      return;\r\n    }\r\n    this._getAnims(chart).items.push(...items);\r\n  }\r\n\r\n  /**\r\n\t * Counts number of active animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  has(chart) {\r\n    return this._getAnims(chart).items.length > 0;\r\n  }\r\n\r\n  /**\r\n\t * Start animating (all charts)\r\n\t * @param {Chart} chart\r\n\t */\r\n  start(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims) {\r\n      return;\r\n    }\r\n    anims.running = true;\r\n    anims.start = Date.now();\r\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\r\n    this._refresh();\r\n  }\r\n\r\n  running(chart) {\r\n    if (!this._running) {\r\n      return false;\r\n    }\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.running || !anims.items.length) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t * Stop all animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  stop(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.items.length) {\r\n      return;\r\n    }\r\n    const items = anims.items;\r\n    let i = items.length - 1;\r\n\r\n    for (; i >= 0; --i) {\r\n      items[i].cancel();\r\n    }\r\n    anims.items = [];\r\n    this._notify(chart, anims, Date.now(), 'complete');\r\n  }\r\n\r\n  /**\r\n\t * Remove chart from Animator\r\n\t * @param {Chart} chart\r\n\t */\r\n  remove(chart) {\r\n    return this._charts.delete(chart);\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Animator();\r\n","/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","import {Color} from '@kurkle/color';\r\n\r\nexport function isPatternOrGradient(value: unknown): value is CanvasPattern | CanvasGradient {\r\n  if (value && typeof value === 'object') {\r\n    const type = value.toString();\r\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function color(value: CanvasGradient): CanvasGradient;\r\nexport function color(value: CanvasPattern): CanvasPattern;\r\nexport function color(\r\n  value:\r\n  | string\r\n  | { r: number; g: number; b: number; a: number }\r\n  | [number, number, number]\r\n  | [number, number, number, number]\r\n): Color;\r\nexport function color(value) {\r\n  return isPatternOrGradient(value) ? value : new Color(value);\r\n}\r\n\r\nexport function getHoverColor(value: CanvasGradient): CanvasGradient;\r\nexport function getHoverColor(value: CanvasPattern): CanvasPattern;\r\nexport function getHoverColor(value: string): string;\r\nexport function getHoverColor(value) {\r\n  return isPatternOrGradient(value)\r\n    ? value\r\n    : new Color(value).saturate(0.5).darken(0.1).hexString();\r\n}\r\n","const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\r\nconst colors = ['color', 'borderColor', 'backgroundColor'];\r\n\r\nexport function applyAnimationsDefaults(defaults) {\r\n  defaults.set('animation', {\r\n    delay: undefined,\r\n    duration: 1000,\r\n    easing: 'easeOutQuart',\r\n    fn: undefined,\r\n    from: undefined,\r\n    loop: undefined,\r\n    to: undefined,\r\n    type: undefined,\r\n  });\r\n\r\n  defaults.describe('animation', {\r\n    _fallback: false,\r\n    _indexable: false,\r\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\r\n  });\r\n\r\n  defaults.set('animations', {\r\n    colors: {\r\n      type: 'color',\r\n      properties: colors\r\n    },\r\n    numbers: {\r\n      type: 'number',\r\n      properties: numbers\r\n    },\r\n  });\r\n\r\n  defaults.describe('animations', {\r\n    _fallback: 'animation',\r\n  });\r\n\r\n  defaults.set('transitions', {\r\n    active: {\r\n      animation: {\r\n        duration: 400\r\n      }\r\n    },\r\n    resize: {\r\n      animation: {\r\n        duration: 0\r\n      }\r\n    },\r\n    show: {\r\n      animations: {\r\n        colors: {\r\n          from: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          duration: 0 // show immediately\r\n        },\r\n      }\r\n    },\r\n    hide: {\r\n      animations: {\r\n        colors: {\r\n          to: 'transparent'\r\n        },\r\n        visible: {\r\n          type: 'boolean',\r\n          easing: 'linear',\r\n          fn: v => v | 0 // for keeping the dataset visible all the way through the animation\r\n        },\r\n      }\r\n    }\r\n  });\r\n}\r\n","\r\nconst intlCache = new Map<string, Intl.NumberFormat>();\r\n\r\nfunction getNumberFormat(locale: string, options?: Intl.NumberFormatOptions) {\r\n  options = options || {};\r\n  const cacheKey = locale + JSON.stringify(options);\r\n  let formatter = intlCache.get(cacheKey);\r\n  if (!formatter) {\r\n    formatter = new Intl.NumberFormat(locale, options);\r\n    intlCache.set(cacheKey, formatter);\r\n  }\r\n  return formatter;\r\n}\r\n\r\nexport function formatNumber(num: number, locale: string, options?: Intl.NumberFormatOptions) {\r\n  return getNumberFormat(locale, options).format(num);\r\n}\r\n","import {isArray} from '../helpers/helpers.core.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\nimport {log10} from '../helpers/helpers.math.js';\r\n\r\n/**\r\n * Namespace to hold formatters for different types of ticks\r\n * @namespace Chart.Ticks.formatters\r\n */\r\nconst formatters = {\r\n  /**\r\n   * Formatter for value labels\r\n   * @method Chart.Ticks.formatters.values\r\n   * @param value the value to display\r\n   * @return {string|string[]} the label to display\r\n   */\r\n  values(value) {\r\n    return isArray(value) ? /** @type {string[]} */ (value) : '' + value;\r\n  },\r\n\r\n  /**\r\n   * Formatter for numeric ticks\r\n   * @method Chart.Ticks.formatters.numeric\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  numeric(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0'; // never show decimal places for 0\r\n    }\r\n\r\n    const locale = this.chart.options.locale;\r\n    let notation;\r\n    let delta = tickValue; // This is used when there are less than 2 ticks as the tick interval.\r\n\r\n    if (ticks.length > 1) {\r\n      // all ticks are small or there huge numbers; use scientific notation\r\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\r\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\r\n        notation = 'scientific';\r\n      }\r\n\r\n      delta = calculateDelta(tickValue, ticks);\r\n    }\r\n\r\n    const logDelta = log10(Math.abs(delta));\r\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0); // toFixed has a max of 20 decimal places\r\n\r\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\r\n    Object.assign(options, this.options.ticks.format);\r\n\r\n    return formatNumber(tickValue, locale, options);\r\n  },\r\n\r\n\r\n  /**\r\n   * Formatter for logarithmic ticks\r\n   * @method Chart.Ticks.formatters.logarithmic\r\n   * @param tickValue {number} the value to be formatted\r\n   * @param index {number} the position of the tickValue parameter in the ticks array\r\n   * @param ticks {object[]} the list of ticks being converted\r\n   * @return {string} string representation of the tickValue parameter\r\n   */\r\n  logarithmic(tickValue, index, ticks) {\r\n    if (tickValue === 0) {\r\n      return '0';\r\n    }\r\n    const remain = ticks[index].significand || (tickValue / (Math.pow(10, Math.floor(log10(tickValue)))));\r\n    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\r\n      return formatters.numeric.call(this, tickValue, index, ticks);\r\n    }\r\n    return '';\r\n  }\r\n\r\n};\r\n\r\n\r\nfunction calculateDelta(tickValue, ticks) {\r\n  // Figure out how many digits to show\r\n  // The space between the first two ticks might be smaller than normal spacing\r\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\r\n\r\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\r\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\r\n    // not an integer\r\n    delta = tickValue - Math.floor(tickValue);\r\n  }\r\n  return delta;\r\n}\r\n\r\n/**\r\n * Namespace to hold static tick generation functions\r\n * @namespace Chart.Ticks\r\n */\r\nexport default {formatters};\r\n","import {getHoverColor} from '../helpers/helpers.color.js';\r\nimport {isObject, merge, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {applyAnimationsDefaults} from './core.animations.defaults.js';\r\nimport {applyLayoutsDefaults} from './core.layouts.defaults.js';\r\nimport {applyScaleDefaults} from './core.scale.defaults.js';\r\n\r\nexport const overrides = Object.create(null);\r\nexport const descriptors = Object.create(null);\r\n\r\n/**\r\n * @param {object} node\r\n * @param {string} key\r\n * @return {object}\r\n */\r\nfunction getScope(node, key) {\r\n  if (!key) {\r\n    return node;\r\n  }\r\n  const keys = key.split('.');\r\n  for (let i = 0, n = keys.length; i < n; ++i) {\r\n    const k = keys[i];\r\n    node = node[k] || (node[k] = Object.create(null));\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction set(root, scope, values) {\r\n  if (typeof scope === 'string') {\r\n    return merge(getScope(root, scope), values);\r\n  }\r\n  return merge(getScope(root, ''), scope);\r\n}\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Defaults {\r\n  constructor(_descriptors, _appliers) {\r\n    this.animation = undefined;\r\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\r\n    this.borderColor = 'rgba(0,0,0,0.1)';\r\n    this.color = '#666';\r\n    this.datasets = {};\r\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\r\n    this.elements = {};\r\n    this.events = [\r\n      'mousemove',\r\n      'mouseout',\r\n      'click',\r\n      'touchstart',\r\n      'touchmove'\r\n    ];\r\n    this.font = {\r\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n      size: 12,\r\n      style: 'normal',\r\n      lineHeight: 1.2,\r\n      weight: null\r\n    };\r\n    this.hover = {};\r\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\r\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\r\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\r\n    this.indexAxis = 'x';\r\n    this.interaction = {\r\n      mode: 'nearest',\r\n      intersect: true,\r\n      includeInvisible: false\r\n    };\r\n    this.maintainAspectRatio = true;\r\n    this.onHover = null;\r\n    this.onClick = null;\r\n    this.parsing = true;\r\n    this.plugins = {};\r\n    this.responsive = true;\r\n    this.scale = undefined;\r\n    this.scales = {};\r\n    this.showLine = true;\r\n    this.drawActiveElementsOnTop = true;\r\n\r\n    this.describe(_descriptors);\r\n    this.apply(_appliers);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  set(scope, values) {\r\n    return set(this, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scope\r\n\t */\r\n  get(scope) {\r\n    return getScope(this, scope);\r\n  }\r\n\r\n  /**\r\n\t * @param {string|object} scope\r\n\t * @param {object} [values]\r\n\t */\r\n  describe(scope, values) {\r\n    return set(descriptors, scope, values);\r\n  }\r\n\r\n  override(scope, values) {\r\n    return set(overrides, scope, values);\r\n  }\r\n\r\n  /**\r\n\t * Routes the named defaults to fallback to another scope/name.\r\n\t * This routing is useful when those target values, like defaults.color, are changed runtime.\r\n\t * If the values would be copied, the runtime change would not take effect. By routing, the\r\n\t * fallback is evaluated at each access, so its always up to date.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * \tdefaults.route('elements.arc', 'backgroundColor', '', 'color')\r\n\t *   - reads the backgroundColor from defaults.color when undefined locally\r\n\t *\r\n\t * @param {string} scope Scope this route applies to.\r\n\t * @param {string} name Property name that should be routed to different namespace when not defined here.\r\n\t * @param {string} targetScope The namespace where those properties should be routed to.\r\n\t * Empty string ('') is the root of defaults.\r\n\t * @param {string} targetName The target name in the target scope the property should be routed to.\r\n\t */\r\n  route(scope, name, targetScope, targetName) {\r\n    const scopeObject = getScope(this, scope);\r\n    const targetScopeObject = getScope(this, targetScope);\r\n    const privateName = '_' + name;\r\n\r\n    Object.defineProperties(scopeObject, {\r\n      // A private property is defined to hold the actual value, when this property is set in its scope (set in the setter)\r\n      [privateName]: {\r\n        value: scopeObject[name],\r\n        writable: true\r\n      },\r\n      // The actual property is defined as getter/setter so we can do the routing when value is not locally set.\r\n      [name]: {\r\n        enumerable: true,\r\n        get() {\r\n          const local = this[privateName];\r\n          const target = targetScopeObject[targetName];\r\n          if (isObject(local)) {\r\n            return Object.assign({}, target, local);\r\n          }\r\n          return valueOrDefault(local, target);\r\n        },\r\n        set(value) {\r\n          this[privateName] = value;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  apply(appliers) {\r\n    appliers.forEach((apply) => apply(this));\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Defaults({\r\n  _scriptable: (name) => !name.startsWith('on'),\r\n  _indexable: (name) => name !== 'events',\r\n  hover: {\r\n    _fallback: 'interaction'\r\n  },\r\n  interaction: {\r\n    _scriptable: false,\r\n    _indexable: false,\r\n  }\r\n}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\r\n","export function applyLayoutsDefaults(defaults) {\r\n  defaults.set('layout', {\r\n    autoPadding: true,\r\n    padding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0\r\n    }\r\n  });\r\n}\r\n","import Ticks from './core.ticks.js';\r\n\r\nexport function applyScaleDefaults(defaults) {\r\n  defaults.set('scale', {\r\n    display: true,\r\n    offset: false,\r\n    reverse: false,\r\n    beginAtZero: false,\r\n\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 3.0.0\r\n     */\r\n    bounds: 'ticks',\r\n\r\n    /**\r\n     * Addition grace added to max and reduced from min data value.\r\n     * @since 3.0.0\r\n     */\r\n    grace: 0,\r\n\r\n    // grid line settings\r\n    grid: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      drawOnChartArea: true,\r\n      drawTicks: true,\r\n      tickLength: 8,\r\n      tickWidth: (_ctx, options) => options.lineWidth,\r\n      tickColor: (_ctx, options) => options.color,\r\n      offset: false,\r\n    },\r\n\r\n    border: {\r\n      display: true,\r\n      dash: [],\r\n      dashOffset: 0.0,\r\n      width: 1\r\n    },\r\n\r\n    // scale title\r\n    title: {\r\n      // display property\r\n      display: false,\r\n\r\n      // actual label\r\n      text: '',\r\n\r\n      // top/bottom padding\r\n      padding: {\r\n        top: 4,\r\n        bottom: 4\r\n      }\r\n    },\r\n\r\n    // label settings\r\n    ticks: {\r\n      minRotation: 0,\r\n      maxRotation: 50,\r\n      mirror: false,\r\n      textStrokeWidth: 0,\r\n      textStrokeColor: '',\r\n      padding: 3,\r\n      display: true,\r\n      autoSkip: true,\r\n      autoSkipPadding: 3,\r\n      labelOffset: 0,\r\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\r\n      callback: Ticks.formatters.values,\r\n      minor: {},\r\n      major: {},\r\n      align: 'center',\r\n      crossAlign: 'near',\r\n\r\n      showLabelBackdrop: false,\r\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\r\n      backdropPadding: 2,\r\n    }\r\n  });\r\n\r\n  defaults.route('scale.ticks', 'color', '', 'color');\r\n  defaults.route('scale.grid', 'color', '', 'borderColor');\r\n  defaults.route('scale.border', 'color', '', 'borderColor');\r\n  defaults.route('scale.title', 'color', '', 'color');\r\n\r\n  defaults.describe('scale', {\r\n    _fallback: false,\r\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash',\r\n  });\r\n\r\n  defaults.describe('scales', {\r\n    _fallback: 'scale',\r\n  });\r\n\r\n  defaults.describe('scale.ticks', {\r\n    _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\r\n    _indexable: (name) => name !== 'backdropPadding',\r\n  });\r\n}\r\n","import type {ChartArea, Scale} from '../../types/index.js';\r\nimport type Chart from '../core/core.controller.js';\r\nimport type {ChartEvent} from '../types.js';\r\nimport {INFINITY} from './helpers.math.js';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import('../core/core.controller.js').default } dom.Chart\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _isDomSupported(): boolean {\r\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _getParentNode(domNode: HTMLCanvasElement): HTMLCanvasElement {\r\n  let parent = domNode.parentNode;\r\n  if (parent && parent.toString() === '[object ShadowRoot]') {\r\n    parent = (parent as ShadowRoot).host;\r\n  }\r\n  return parent as HTMLCanvasElement;\r\n}\r\n\r\n/**\r\n * convert max-width/max-height values that may be percentages into a number\r\n * @private\r\n */\r\n\r\nfunction parseMaxStyle(styleValue: string | number, node: HTMLElement, parentProperty: string) {\r\n  let valueInPixels: number;\r\n  if (typeof styleValue === 'string') {\r\n    valueInPixels = parseInt(styleValue, 10);\r\n\r\n    if (styleValue.indexOf('%') !== -1) {\r\n      // percentage * size in dimension\r\n      valueInPixels = (valueInPixels / 100) * node.parentNode[parentProperty];\r\n    }\r\n  } else {\r\n    valueInPixels = styleValue;\r\n  }\r\n\r\n  return valueInPixels;\r\n}\r\n\r\nconst getComputedStyle = (element: HTMLElement): CSSStyleDeclaration =>\r\n  element.ownerDocument.defaultView.getComputedStyle(element, null);\r\n\r\nexport function getStyle(el: HTMLElement, property: string): string {\r\n  return getComputedStyle(el).getPropertyValue(property);\r\n}\r\n\r\nconst positions = ['top', 'right', 'bottom', 'left'];\r\nfunction getPositionedStyle(styles: CSSStyleDeclaration, style: string, suffix?: string): ChartArea {\r\n  const result = {} as ChartArea;\r\n  suffix = suffix ? '-' + suffix : '';\r\n  for (let i = 0; i < 4; i++) {\r\n    const pos = positions[i];\r\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\r\n  }\r\n  result.width = result.left + result.right;\r\n  result.height = result.top + result.bottom;\r\n  return result;\r\n}\r\n\r\nconst useOffsetPos = (x: number, y: number, target: HTMLElement | EventTarget) =>\r\n  (x > 0 || y > 0) && (!target || !(target as HTMLElement).shadowRoot);\r\n\r\n/**\r\n * @param e\r\n * @param canvas\r\n * @returns Canvas position\r\n */\r\nfunction getCanvasPosition(\r\n  e: Event | TouchEvent | MouseEvent,\r\n  canvas: HTMLCanvasElement\r\n): {\r\n    x: number;\r\n    y: number;\r\n    box: boolean;\r\n  } {\r\n  const touches = (e as TouchEvent).touches;\r\n  const source = (touches && touches.length ? touches[0] : e) as MouseEvent;\r\n  const {offsetX, offsetY} = source as MouseEvent;\r\n  let box = false;\r\n  let x, y;\r\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\r\n    x = offsetX;\r\n    y = offsetY;\r\n  } else {\r\n    const rect = canvas.getBoundingClientRect();\r\n    x = source.clientX - rect.left;\r\n    y = source.clientY - rect.top;\r\n    box = true;\r\n  }\r\n  return {x, y, box};\r\n}\r\n\r\n/**\r\n * Gets an event's x, y coordinates, relative to the chart area\r\n * @param event\r\n * @param chart\r\n * @returns x and y coordinates of the event\r\n */\r\n\r\nexport function getRelativePosition(\r\n  event: Event | ChartEvent | TouchEvent | MouseEvent,\r\n  chart: Chart\r\n): { x: number; y: number } {\r\n  if ('native' in event) {\r\n    return event;\r\n  }\r\n\r\n  const {canvas, currentDevicePixelRatio} = chart;\r\n  const style = getComputedStyle(canvas);\r\n  const borderBox = style.boxSizing === 'border-box';\r\n  const paddings = getPositionedStyle(style, 'padding');\r\n  const borders = getPositionedStyle(style, 'border', 'width');\r\n  const {x, y, box} = getCanvasPosition(event, canvas);\r\n  const xOffset = paddings.left + (box && borders.left);\r\n  const yOffset = paddings.top + (box && borders.top);\r\n\r\n  let {width, height} = chart;\r\n  if (borderBox) {\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  return {\r\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\r\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\r\n  };\r\n}\r\n\r\nfunction getContainerSize(canvas: HTMLCanvasElement, width: number, height: number): Partial<Scale> {\r\n  let maxWidth: number, maxHeight: number;\r\n\r\n  if (width === undefined || height === undefined) {\r\n    const container = _getParentNode(canvas);\r\n    if (!container) {\r\n      width = canvas.clientWidth;\r\n      height = canvas.clientHeight;\r\n    } else {\r\n      const rect = container.getBoundingClientRect(); // this is the border box of the container\r\n      const containerStyle = getComputedStyle(container);\r\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\r\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\r\n      width = rect.width - containerPadding.width - containerBorder.width;\r\n      height = rect.height - containerPadding.height - containerBorder.height;\r\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\r\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    maxWidth: maxWidth || INFINITY,\r\n    maxHeight: maxHeight || INFINITY\r\n  };\r\n}\r\n\r\nconst round1 = (v: number) => Math.round(v * 10) / 10;\r\n\r\n// eslint-disable-next-line complexity\r\nexport function getMaximumSize(\r\n  canvas: HTMLCanvasElement,\r\n  bbWidth?: number,\r\n  bbHeight?: number,\r\n  aspectRatio?: number\r\n): { width: number; height: number } {\r\n  const style = getComputedStyle(canvas);\r\n  const margins = getPositionedStyle(style, 'margin');\r\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\r\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\r\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\r\n  let {width, height} = containerSize;\r\n\r\n  if (style.boxSizing === 'content-box') {\r\n    const borders = getPositionedStyle(style, 'border', 'width');\r\n    const paddings = getPositionedStyle(style, 'padding');\r\n    width -= paddings.width + borders.width;\r\n    height -= paddings.height + borders.height;\r\n  }\r\n  width = Math.max(0, width - margins.width);\r\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\r\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\r\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\r\n  if (width && !height) {\r\n    // https://github.com/chartjs/Chart.js/issues/4659\r\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\r\n    height = round1(width / 2);\r\n  }\r\n\r\n  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\r\n\r\n  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\r\n    height = containerSize.height;\r\n    width = round1(Math.floor(height * aspectRatio));\r\n  }\r\n\r\n  return {width, height};\r\n}\r\n\r\n/**\r\n * @param chart\r\n * @param forceRatio\r\n * @param forceStyle\r\n * @returns True if the canvas context size or transformation has changed.\r\n */\r\nexport function retinaScale(\r\n  chart: Chart,\r\n  forceRatio: number,\r\n  forceStyle?: boolean\r\n): boolean | void {\r\n  const pixelRatio = forceRatio || 1;\r\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\r\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\r\n\r\n  chart.height = deviceHeight / pixelRatio;\r\n  chart.width = deviceWidth / pixelRatio;\r\n\r\n  const canvas = chart.canvas;\r\n\r\n  // If no style has been set on the canvas, the render size is used as display size,\r\n  // making the chart visually bigger, so let's enforce it to the \"correct\" values.\r\n  // See https://github.com/chartjs/Chart.js/issues/3575\r\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\r\n    canvas.style.height = `${chart.height}px`;\r\n    canvas.style.width = `${chart.width}px`;\r\n  }\r\n\r\n  if (chart.currentDevicePixelRatio !== pixelRatio\r\n      || canvas.height !== deviceHeight\r\n      || canvas.width !== deviceWidth) {\r\n    chart.currentDevicePixelRatio = pixelRatio;\r\n    canvas.height = deviceHeight;\r\n    canvas.width = deviceWidth;\r\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Detects support for options object argument in addEventListener.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\r\n * @private\r\n */\r\nexport const supportsEventListenerOptions = (function() {\r\n  let passiveSupported = false;\r\n  try {\r\n    const options = {\r\n      get passive() { // This function will be called when the browser attempts to access the passive property.\r\n        passiveSupported = true;\r\n        return false;\r\n      }\r\n    } as EventListenerOptions;\r\n\r\n    window.addEventListener('test', null, options);\r\n    window.removeEventListener('test', null, options);\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return passiveSupported;\r\n}());\r\n\r\n/**\r\n * The \"used\" size is the final value of a dimension property after all calculations have\r\n * been performed. This method uses the computed style of `element` but returns undefined\r\n * if the computed style is not expressed in pixels. That can happen in some cases where\r\n * `element` has a size relative to its parent and this last one is not yet displayed,\r\n * for example because of `display: none` on a parent node.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\r\n * @returns Size in pixels or undefined if unknown.\r\n */\r\n\r\nexport function readUsedSize(\r\n  element: HTMLElement,\r\n  property: 'width' | 'height'\r\n): number | undefined {\r\n  const value = getStyle(element, property);\r\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\r\n  return matches ? +matches[1] : undefined;\r\n}\r\n","import {isArray, isNullOrUndef} from './helpers.core.js';\r\nimport {PI, TAU, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, RAD_PER_DEG} from './helpers.math.js';\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `canvas` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import('../core/core.controller.js').default } canvas.Chart\r\n * @typedef { import('../../types/index.js').Point } Point\r\n */\r\n\r\n/**\r\n * @namespace Chart.helpers.canvas\r\n */\r\n\r\n/**\r\n * Converts the given font object into a CSS font string.\r\n * @param {object} font - A font object.\r\n * @return {string|null} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\r\n * @private\r\n */\r\nexport function toFontString(font) {\r\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\r\n    return null;\r\n  }\r\n\r\n  return (font.style ? font.style + ' ' : '')\r\n\t\t+ (font.weight ? font.weight + ' ' : '')\r\n\t\t+ font.size + 'px '\r\n\t\t+ font.family;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _measureText(ctx, data, gc, longest, string) {\r\n  let textWidth = data[string];\r\n  if (!textWidth) {\r\n    textWidth = data[string] = ctx.measureText(string).width;\r\n    gc.push(string);\r\n  }\r\n  if (textWidth > longest) {\r\n    longest = textWidth;\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _longestText(ctx, font, arrayOfThings, cache) {\r\n  cache = cache || {};\r\n  let data = cache.data = cache.data || {};\r\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\r\n\r\n  if (cache.font !== font) {\r\n    data = cache.data = {};\r\n    gc = cache.garbageCollect = [];\r\n    cache.font = font;\r\n  }\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = font;\r\n  let longest = 0;\r\n  const ilen = arrayOfThings.length;\r\n  let i, j, jlen, thing, nestedThing;\r\n  for (i = 0; i < ilen; i++) {\r\n    thing = arrayOfThings[i];\r\n\r\n    // Undefined strings and arrays should not be measured\r\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\r\n      longest = _measureText(ctx, data, gc, longest, thing);\r\n    } else if (isArray(thing)) {\r\n      // if it is an array lets measure each element\r\n      // to do maybe simplify this function a bit so we can do this more recursively?\r\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\r\n        nestedThing = thing[j];\r\n        // Undefined strings and arrays should not be measured\r\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\r\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ctx.restore();\r\n\r\n  const gcLen = gc.length / 2;\r\n  if (gcLen > arrayOfThings.length) {\r\n    for (i = 0; i < gcLen; i++) {\r\n      delete data[gc[i]];\r\n    }\r\n    gc.splice(0, gcLen);\r\n  }\r\n  return longest;\r\n}\r\n\r\n/**\r\n * Returns the aligned pixel value to avoid anti-aliasing blur\r\n * @param {canvas.Chart} chart - The chart instance.\r\n * @param {number} pixel - A pixel value.\r\n * @param {number} width - The width of the element.\r\n * @returns {number} The aligned pixel value.\r\n * @private\r\n */\r\nexport function _alignPixel(chart, pixel, width) {\r\n  const devicePixelRatio = chart.currentDevicePixelRatio;\r\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\r\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\r\n}\r\n\r\n/**\r\n * Clears the entire canvas.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {CanvasRenderingContext2D} [ctx]\r\n */\r\nexport function clearCanvas(canvas, ctx) {\r\n  ctx = ctx || canvas.getContext('2d');\r\n\r\n  ctx.save();\r\n  // canvas.width and canvas.height do not consider the canvas transform,\r\n  // while clearRect does\r\n  ctx.resetTransform();\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.restore();\r\n}\r\n\r\nexport function drawPoint(ctx, options, x, y) {\r\n  drawPointLegend(ctx, options, x, y, null);\r\n}\r\n\r\nexport function drawPointLegend(ctx, options, x, y, w) {\r\n  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\r\n  const style = options.pointStyle;\r\n  const rotation = options.rotation;\r\n  const radius = options.radius;\r\n  let rad = (rotation || 0) * RAD_PER_DEG;\r\n\r\n  if (style && typeof style === 'object') {\r\n    type = style.toString();\r\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\r\n      ctx.save();\r\n      ctx.translate(x, y);\r\n      ctx.rotate(rad);\r\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\r\n      ctx.restore();\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (isNaN(radius) || radius <= 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.beginPath();\r\n\r\n  switch (style) {\r\n  // Default includes circle\r\n  default:\r\n    if (w) {\r\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\r\n    } else {\r\n      ctx.arc(x, y, radius, 0, TAU);\r\n    }\r\n    ctx.closePath();\r\n    break;\r\n  case 'triangle':\r\n    width = w ? w / 2 : radius;\r\n    ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    rad += TWO_THIRDS_PI;\r\n    ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rectRounded':\r\n    // NOTE: the rounded rect implementation changed to use `arc` instead of\r\n    // `quadraticCurveTo` since it generates better results when rect is\r\n    // almost a circle. 0.516 (instead of 0.5) produces results with visually\r\n    // closer proportion to the previous impl and it is inscribed in the\r\n    // circle with `radius`. For more details, see the following PRs:\r\n    // https://github.com/chartjs/Chart.js/issues/5597\r\n    // https://github.com/chartjs/Chart.js/issues/5858\r\n    cornerRadius = radius * 0.516;\r\n    size = radius - cornerRadius;\r\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\r\n    xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\r\n    yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n    ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\r\n    ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\r\n    ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\r\n    ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\r\n    ctx.closePath();\r\n    break;\r\n  case 'rect':\r\n    if (!rotation) {\r\n      size = Math.SQRT1_2 * radius;\r\n      width = w ? w / 2 : size;\r\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\r\n      break;\r\n    }\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'rectRot':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    ctx.closePath();\r\n    break;\r\n  case 'crossRot':\r\n    rad += QUARTER_PI;\r\n    /* falls through */\r\n  case 'cross':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'star':\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    rad += QUARTER_PI;\r\n    xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n    xOffset = Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n    ctx.moveTo(x - xOffsetW, y - yOffset);\r\n    ctx.lineTo(x + xOffsetW, y + yOffset);\r\n    ctx.moveTo(x + yOffsetW, y - xOffset);\r\n    ctx.lineTo(x - yOffsetW, y + xOffset);\r\n    break;\r\n  case 'line':\r\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\r\n    yOffset = Math.sin(rad) * radius;\r\n    ctx.moveTo(x - xOffset, y - yOffset);\r\n    ctx.lineTo(x + xOffset, y + yOffset);\r\n    break;\r\n  case 'dash':\r\n    ctx.moveTo(x, y);\r\n    ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\r\n    break;\r\n  case false:\r\n    ctx.closePath();\r\n    break;\r\n  }\r\n\r\n  ctx.fill();\r\n  if (options.borderWidth > 0) {\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if the point is inside the rectangle\r\n * @param {Point} point - The point to test\r\n * @param {object} area - The rectangle\r\n * @param {number} [margin] - allowed margin\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function _isPointInArea(point, area, margin) {\r\n  margin = margin || 0.5; // margin - default is to match rounded decimals\r\n\r\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\r\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\r\n}\r\n\r\nexport function clipArea(ctx, area) {\r\n  ctx.save();\r\n  ctx.beginPath();\r\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\r\n  ctx.clip();\r\n}\r\n\r\nexport function unclipArea(ctx) {\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedLineTo(ctx, previous, target, flip, mode) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  if (mode === 'middle') {\r\n    const midpoint = (previous.x + target.x) / 2.0;\r\n    ctx.lineTo(midpoint, previous.y);\r\n    ctx.lineTo(midpoint, target.y);\r\n  } else if (mode === 'after' !== !!flip) {\r\n    ctx.lineTo(previous.x, target.y);\r\n  } else {\r\n    ctx.lineTo(target.x, previous.y);\r\n  }\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierCurveTo(ctx, previous, target, flip) {\r\n  if (!previous) {\r\n    return ctx.lineTo(target.x, target.y);\r\n  }\r\n  ctx.bezierCurveTo(\r\n    flip ? previous.cp1x : previous.cp2x,\r\n    flip ? previous.cp1y : previous.cp2y,\r\n    flip ? target.cp2x : target.cp1x,\r\n    flip ? target.cp2y : target.cp1y,\r\n    target.x,\r\n    target.y);\r\n}\r\n\r\n/**\r\n * Render text onto the canvas\r\n */\r\nexport function renderText(ctx, text, x, y, font, opts = {}) {\r\n  const lines = isArray(text) ? text : [text];\r\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\r\n  let i, line;\r\n\r\n  ctx.save();\r\n  ctx.font = font.string;\r\n  setRenderOpts(ctx, opts);\r\n\r\n  for (i = 0; i < lines.length; ++i) {\r\n    line = lines[i];\r\n\r\n    if (opts.backdrop) {\r\n      drawBackdrop(ctx, opts.backdrop);\r\n    }\r\n\r\n    if (stroke) {\r\n      if (opts.strokeColor) {\r\n        ctx.strokeStyle = opts.strokeColor;\r\n      }\r\n\r\n      if (!isNullOrUndef(opts.strokeWidth)) {\r\n        ctx.lineWidth = opts.strokeWidth;\r\n      }\r\n\r\n      ctx.strokeText(line, x, y, opts.maxWidth);\r\n    }\r\n\r\n    ctx.fillText(line, x, y, opts.maxWidth);\r\n    decorateText(ctx, x, y, line, opts);\r\n\r\n    y += font.lineHeight;\r\n  }\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction setRenderOpts(ctx, opts) {\r\n  if (opts.translation) {\r\n    ctx.translate(opts.translation[0], opts.translation[1]);\r\n  }\r\n\r\n  if (!isNullOrUndef(opts.rotation)) {\r\n    ctx.rotate(opts.rotation);\r\n  }\r\n\r\n  if (opts.color) {\r\n    ctx.fillStyle = opts.color;\r\n  }\r\n\r\n  if (opts.textAlign) {\r\n    ctx.textAlign = opts.textAlign;\r\n  }\r\n\r\n  if (opts.textBaseline) {\r\n    ctx.textBaseline = opts.textBaseline;\r\n  }\r\n}\r\n\r\nfunction decorateText(ctx, x, y, line, opts) {\r\n  if (opts.strikethrough || opts.underline) {\r\n    /**\r\n     * Now that IE11 support has been dropped, we can use more\r\n     * of the TextMetrics object. The actual bounding boxes\r\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\r\n     * can be safely used.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\r\n     */\r\n    const metrics = ctx.measureText(line);\r\n    const left = x - metrics.actualBoundingBoxLeft;\r\n    const right = x + metrics.actualBoundingBoxRight;\r\n    const top = y - metrics.actualBoundingBoxAscent;\r\n    const bottom = y + metrics.actualBoundingBoxDescent;\r\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\r\n\r\n    ctx.strokeStyle = ctx.fillStyle;\r\n    ctx.beginPath();\r\n    ctx.lineWidth = opts.decorationWidth || 2;\r\n    ctx.moveTo(left, yDecoration);\r\n    ctx.lineTo(right, yDecoration);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nfunction drawBackdrop(ctx, opts) {\r\n  const oldColor = ctx.fillStyle;\r\n\r\n  ctx.fillStyle = opts.color;\r\n  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\r\n  ctx.fillStyle = oldColor;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle with rounded corners to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nexport function addRoundedRectPath(ctx, rect) {\r\n  const {x, y, w, h, radius} = rect;\r\n\r\n  // top left arc\r\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\r\n\r\n  // line from top left to bottom left\r\n  ctx.lineTo(x, y + h - radius.bottomLeft);\r\n\r\n  // bottom left arc\r\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\r\n\r\n  // line from bottom left to bottom right\r\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\r\n\r\n  // bottom right arc\r\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\r\n\r\n  // line from bottom right to top right\r\n  ctx.lineTo(x + w, y + radius.topRight);\r\n\r\n  // top right arc\r\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\r\n\r\n  // line from top right to top left\r\n  ctx.lineTo(x + radius.topLeft, y);\r\n}\r\n","import {defined, isArray, isFunction, isObject, resolveObjectKey, _capitalize} from './helpers.core.js';\r\n\r\n/**\r\n * Creates a Proxy for resolving raw values for options.\r\n * @param {object[]} scopes - The option scopes to look for values, in resolution order\r\n * @param {string[]} [prefixes] - The prefixes for values, in resolution order.\r\n * @param {object[]} [rootScopes] - The root option scopes\r\n * @param {string|boolean} [fallback] - Parent scopes fallback\r\n * @param {function} [getTarget] - callback for getting the target for changed values\r\n * @returns Proxy\r\n * @private\r\n */\r\nexport function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\r\n  if (!defined(fallback)) {\r\n    fallback = _resolve('_fallback', scopes);\r\n  }\r\n  const cache = {\r\n    [Symbol.toStringTag]: 'Object',\r\n    _cacheable: true,\r\n    _scopes: scopes,\r\n    _rootScopes: rootScopes,\r\n    _fallback: fallback,\r\n    _getTarget: getTarget,\r\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete target._keys; // remove cached keys\r\n      delete scopes[0][prop]; // remove from top level scope\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(scopes[0]);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return getKeysFromAllScopes(target).includes(prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys(target) {\r\n      return getKeysFromAllScopes(target);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      const storage = target._storage || (target._storage = getTarget());\r\n      target[prop] = storage[prop] = value; // set to top level scope + cache\r\n      delete target._keys; // remove cached keys\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Returns an Proxy for resolving option values with context.\r\n * @param {object} proxy - The Proxy returned by `_createResolver`\r\n * @param {object} context - Context object for scriptable/indexable options\r\n * @param {object} [subProxy] - The proxy provided for scriptable options\r\n * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults] - Defaults for descriptors\r\n * @private\r\n */\r\nexport function _attachContext(proxy, context, subProxy, descriptorDefaults) {\r\n  const cache = {\r\n    _cacheable: false,\r\n    _proxy: proxy,\r\n    _context: context,\r\n    _subProxy: subProxy,\r\n    _stack: new Set(),\r\n    _descriptors: _descriptors(proxy, descriptorDefaults),\r\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\r\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\r\n  };\r\n  return new Proxy(cache, {\r\n    /**\r\n     * A trap for the delete operator.\r\n     */\r\n    deleteProperty(target, prop) {\r\n      delete target[prop]; // remove from cache\r\n      delete proxy[prop]; // remove from proxy\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * A trap for getting property values.\r\n     */\r\n    get(target, prop, receiver) {\r\n      return _cached(target, prop,\r\n        () => _resolveWithContext(target, prop, receiver));\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */\r\n    getOwnPropertyDescriptor(target, prop) {\r\n      return target._descriptors.allKeys\r\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\r\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */\r\n    getPrototypeOf() {\r\n      return Reflect.getPrototypeOf(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for the in operator.\r\n     */\r\n    has(target, prop) {\r\n      return Reflect.has(proxy, prop);\r\n    },\r\n\r\n    /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */\r\n    ownKeys() {\r\n      return Reflect.ownKeys(proxy);\r\n    },\r\n\r\n    /**\r\n     * A trap for setting property values.\r\n     */\r\n    set(target, prop, value) {\r\n      proxy[prop] = value; // set to proxy\r\n      delete target[prop]; // remove from cache\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\r\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\r\n  return {\r\n    allKeys: _allKeys,\r\n    scriptable: _scriptable,\r\n    indexable: _indexable,\r\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\r\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\r\n  };\r\n}\r\n\r\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\r\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\r\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\r\n\r\nfunction _cached(target, prop, resolve) {\r\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\r\n    return target[prop];\r\n  }\r\n\r\n  const value = resolve();\r\n  // cache the resolved value\r\n  target[prop] = value;\r\n  return value;\r\n}\r\n\r\nfunction _resolveWithContext(target, prop, receiver) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n  let value = _proxy[prop]; // resolve from proxy\r\n\r\n  // resolve with context\r\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\r\n    value = _resolveScriptable(prop, value, target, receiver);\r\n  }\r\n  if (isArray(value) && value.length) {\r\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\r\n  }\r\n  if (needsSubResolver(prop, value)) {\r\n    // if the resolved value is an object, create a sub resolver for it\r\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveScriptable(prop, value, target, receiver) {\r\n  const {_proxy, _context, _subProxy, _stack} = target;\r\n  if (_stack.has(prop)) {\r\n    // @ts-ignore\r\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\r\n  }\r\n  _stack.add(prop);\r\n  value = value(_context, _subProxy || receiver);\r\n  _stack.delete(prop);\r\n  if (needsSubResolver(prop, value)) {\r\n    // When scriptable option returns an object, create a resolver on that.\r\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction _resolveArray(prop, value, target, isIndexable) {\r\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\r\n\r\n  if (defined(_context.index) && isIndexable(prop)) {\r\n    value = value[_context.index % value.length];\r\n  } else if (isObject(value[0])) {\r\n    // Array of objects, return array or resolvers\r\n    const arr = value;\r\n    const scopes = _proxy._scopes.filter(s => s !== arr);\r\n    value = [];\r\n    for (const item of arr) {\r\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\r\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction resolveFallback(fallback, prop, value) {\r\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\r\n}\r\n\r\nconst getScope = (key, parent) => key === true ? parent\r\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\r\n\r\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\r\n  for (const parent of parentScopes) {\r\n    const scope = getScope(key, parent);\r\n    if (scope) {\r\n      set.add(scope);\r\n      const fallback = resolveFallback(scope._fallback, key, value);\r\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\r\n        // When we reach the descriptor that defines a new _fallback, return that.\r\n        // The fallback will resume to that new scope.\r\n        return fallback;\r\n      }\r\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\r\n      // Fallback to `false` results to `false`, when falling back to different key.\r\n      // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\r\n      return null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction createSubResolver(parentScopes, resolver, prop, value) {\r\n  const rootScopes = resolver._rootScopes;\r\n  const fallback = resolveFallback(resolver._fallback, prop, value);\r\n  const allScopes = [...parentScopes, ...rootScopes];\r\n  const set = new Set();\r\n  set.add(value);\r\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\r\n  if (key === null) {\r\n    return false;\r\n  }\r\n  if (defined(fallback) && fallback !== prop) {\r\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\r\n    if (key === null) {\r\n      return false;\r\n    }\r\n  }\r\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\r\n    () => subGetTarget(resolver, prop, value));\r\n}\r\n\r\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\r\n  while (key) {\r\n    key = addScopes(set, allScopes, key, fallback, item);\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction subGetTarget(resolver, prop, value) {\r\n  const parent = resolver._getTarget();\r\n  if (!(prop in parent)) {\r\n    parent[prop] = {};\r\n  }\r\n  const target = parent[prop];\r\n  if (isArray(target) && isObject(value)) {\r\n    // For array of objects, the object is used to store updated values\r\n    return value;\r\n  }\r\n  return target || {};\r\n}\r\n\r\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\r\n  let value;\r\n  for (const prefix of prefixes) {\r\n    value = _resolve(readKey(prefix, prop), scopes);\r\n    if (defined(value)) {\r\n      return needsSubResolver(prop, value)\r\n        ? createSubResolver(scopes, proxy, prop, value)\r\n        : value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _resolve(key, scopes) {\r\n  for (const scope of scopes) {\r\n    if (!scope) {\r\n      continue;\r\n    }\r\n    const value = scope[key];\r\n    if (defined(value)) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getKeysFromAllScopes(target) {\r\n  let keys = target._keys;\r\n  if (!keys) {\r\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction resolveKeysFromAllScopes(scopes) {\r\n  const set = new Set();\r\n  for (const scope of scopes) {\r\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\r\n      set.add(key);\r\n    }\r\n  }\r\n  return Array.from(set);\r\n}\r\n\r\nexport function _parseObjectDataRadialScale(meta, data, start, count) {\r\n  const {iScale} = meta;\r\n  const {key = 'r'} = this._parsing;\r\n  const parsed = new Array(count);\r\n  let i, ilen, index, item;\r\n\r\n  for (i = 0, ilen = count; i < ilen; ++i) {\r\n    index = i + start;\r\n    item = data[index];\r\n    parsed[i] = {\r\n      r: iScale.parse(resolveObjectKey(item, key), index)\r\n    };\r\n  }\r\n  return parsed;\r\n}\r\n","import {almostEquals, distanceBetweenPoints, sign} from './helpers.math.js';\r\nimport {_isPointInArea} from './helpers.canvas.js';\r\nimport type {ChartArea} from '../../types/index.js';\r\n\r\nexport interface SplinePoint {\r\n  x: number;\r\n  y: number;\r\n  skip?: boolean;\r\n\r\n  // Both Bezier and monotone interpolations have these fields\r\n  // but they are added in different spots\r\n  cp1x?: number;\r\n  cp1y?: number;\r\n  cp2x?: number;\r\n  cp2y?: number;\r\n}\r\n\r\nconst EPSILON = Number.EPSILON || 1e-14;\r\n\r\ntype OptionalSplinePoint = SplinePoint | false\r\nconst getPoint = (points: SplinePoint[], i: number): OptionalSplinePoint => i < points.length && !points[i].skip && points[i];\r\nconst getValueAxis = (indexAxis: 'x' | 'y') => indexAxis === 'x' ? 'y' : 'x';\r\n\r\nexport function splineCurve(\r\n  firstPoint: SplinePoint,\r\n  middlePoint: SplinePoint,\r\n  afterPoint: SplinePoint,\r\n  t: number\r\n): {\r\n    previous: SplinePoint\r\n    next: SplinePoint\r\n  } {\r\n  // Props to Rob Spencer at scaled innovation for his post on splining between points\r\n  // http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n\r\n  // This function must also respect \"skipped\" points\r\n\r\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\r\n  const current = middlePoint;\r\n  const next = afterPoint.skip ? middlePoint : afterPoint;\r\n  const d01 = distanceBetweenPoints(current, previous);\r\n  const d12 = distanceBetweenPoints(next, current);\r\n\r\n  let s01 = d01 / (d01 + d12);\r\n  let s12 = d12 / (d01 + d12);\r\n\r\n  // If all points are the same, s01 & s02 will be inf\r\n  s01 = isNaN(s01) ? 0 : s01;\r\n  s12 = isNaN(s12) ? 0 : s12;\r\n\r\n  const fa = t * s01; // scaling factor for triangle Ta\r\n  const fb = t * s12;\r\n\r\n  return {\r\n    previous: {\r\n      x: current.x - fa * (next.x - previous.x),\r\n      y: current.y - fa * (next.y - previous.y)\r\n    },\r\n    next: {\r\n      x: current.x + fb * (next.x - previous.x),\r\n      y: current.y + fb * (next.y - previous.y)\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Adjust tangents to ensure monotonic properties\r\n */\r\nfunction monotoneAdjust(points: SplinePoint[], deltaK: number[], mK: number[]) {\r\n  const pointsLen = points.length;\r\n\r\n  let alphaK: number, betaK: number, tauK: number, squaredMagnitude: number, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n  for (let i = 0; i < pointsLen - 1; ++i) {\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent || !pointAfter) {\r\n      continue;\r\n    }\r\n\r\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\r\n      mK[i] = mK[i + 1] = 0;\r\n      continue;\r\n    }\r\n\r\n    alphaK = mK[i] / deltaK[i];\r\n    betaK = mK[i + 1] / deltaK[i];\r\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\r\n    if (squaredMagnitude <= 9) {\r\n      continue;\r\n    }\r\n\r\n    tauK = 3 / Math.sqrt(squaredMagnitude);\r\n    mK[i] = alphaK * tauK * deltaK[i];\r\n    mK[i + 1] = betaK * tauK * deltaK[i];\r\n  }\r\n}\r\n\r\nfunction monotoneCompute(points: SplinePoint[], mK: number[], indexAxis: 'x' | 'y' = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  let delta: number, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (let i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    const iPixel = pointCurrent[indexAxis];\r\n    const vPixel = pointCurrent[valueAxis];\r\n    if (pointBefore) {\r\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\r\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\r\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\r\n    }\r\n    if (pointAfter) {\r\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\r\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\r\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function calculates Bézier control points in a similar way than |splineCurve|,\r\n * but preserves monotonicity of the provided data and ensures no local extremums are added\r\n * between the dataset discrete points due to the interpolation.\r\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\r\n */\r\nexport function splineCurveMonotone(points: SplinePoint[], indexAxis: 'x' | 'y' = 'x') {\r\n  const valueAxis = getValueAxis(indexAxis);\r\n  const pointsLen = points.length;\r\n  const deltaK: number[] = Array(pointsLen).fill(0);\r\n  const mK: number[] = Array(pointsLen);\r\n\r\n  // Calculate slopes (deltaK) and initialize tangents (mK)\r\n  let i, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\r\n  let pointAfter = getPoint(points, 0);\r\n\r\n  for (i = 0; i < pointsLen; ++i) {\r\n    pointBefore = pointCurrent;\r\n    pointCurrent = pointAfter;\r\n    pointAfter = getPoint(points, i + 1);\r\n    if (!pointCurrent) {\r\n      continue;\r\n    }\r\n\r\n    if (pointAfter) {\r\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\r\n\r\n      // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\r\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\r\n    }\r\n    mK[i] = !pointBefore ? deltaK[i]\r\n      : !pointAfter ? deltaK[i - 1]\r\n        : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\r\n          : (deltaK[i - 1] + deltaK[i]) / 2;\r\n  }\r\n\r\n  monotoneAdjust(points, deltaK, mK);\r\n\r\n  monotoneCompute(points, mK, indexAxis);\r\n}\r\n\r\nfunction capControlPoint(pt: number, min: number, max: number) {\r\n  return Math.max(Math.min(pt, max), min);\r\n}\r\n\r\nfunction capBezierPoints(points: SplinePoint[], area: ChartArea) {\r\n  let i, ilen, point, inArea, inAreaPrev;\r\n  let inAreaNext = _isPointInArea(points[0], area);\r\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n    inAreaPrev = inArea;\r\n    inArea = inAreaNext;\r\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\r\n    if (!inArea) {\r\n      continue;\r\n    }\r\n    point = points[i];\r\n    if (inAreaPrev) {\r\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\r\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\r\n    }\r\n    if (inAreaNext) {\r\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\r\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _updateBezierControlPoints(\r\n  points: SplinePoint[],\r\n  options,\r\n  area: ChartArea,\r\n  loop: boolean,\r\n  indexAxis: 'x' | 'y'\r\n) {\r\n  let i: number, ilen: number, point: SplinePoint, controlPoints: ReturnType<typeof splineCurve>;\r\n\r\n  // Only consider points that are drawn in case the spanGaps option is used\r\n  if (options.spanGaps) {\r\n    points = points.filter((pt) => !pt.skip);\r\n  }\r\n\r\n  if (options.cubicInterpolationMode === 'monotone') {\r\n    splineCurveMonotone(points, indexAxis);\r\n  } else {\r\n    let prev = loop ? points[points.length - 1] : points[0];\r\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\r\n      point = points[i];\r\n      controlPoints = splineCurve(\r\n        prev,\r\n        point,\r\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\r\n        options.tension\r\n      );\r\n      point.cp1x = controlPoints.previous.x;\r\n      point.cp1y = controlPoints.previous.y;\r\n      point.cp2x = controlPoints.next.x;\r\n      point.cp2y = controlPoints.next.y;\r\n      prev = point;\r\n    }\r\n  }\r\n\r\n  if (options.capBezierPoints) {\r\n    capBezierPoints(points, area);\r\n  }\r\n}\r\n","import {PI, TAU, HALF_PI} from './helpers.math.js';\r\n\r\nconst atEdge = (t: number) => t === 0 || t === 1;\r\nconst elasticIn = (t: number, s: number, p: number) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\r\nconst elasticOut = (t: number, s: number, p: number) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\r\n\r\n/**\r\n * Easing functions adapted from Robert Penner's easing equations.\r\n * @namespace Chart.helpers.easing.effects\r\n * @see http://www.robertpenner.com/easing/\r\n */\r\nconst effects = {\r\n  linear: (t: number) => t,\r\n\r\n  easeInQuad: (t: number) => t * t,\r\n\r\n  easeOutQuad: (t: number) => -t * (t - 2),\r\n\r\n  easeInOutQuad: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t\r\n    : -0.5 * ((--t) * (t - 2) - 1),\r\n\r\n  easeInCubic: (t: number) => t * t * t,\r\n\r\n  easeOutCubic: (t: number) => (t -= 1) * t * t + 1,\r\n\r\n  easeInOutCubic: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t + 2),\r\n\r\n  easeInQuart: (t: number) => t * t * t * t,\r\n\r\n  easeOutQuart: (t: number) => -((t -= 1) * t * t * t - 1),\r\n\r\n  easeInOutQuart: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t\r\n    : -0.5 * ((t -= 2) * t * t * t - 2),\r\n\r\n  easeInQuint: (t: number) => t * t * t * t * t,\r\n\r\n  easeOutQuint: (t: number) => (t -= 1) * t * t * t * t + 1,\r\n\r\n  easeInOutQuint: (t: number) => ((t /= 0.5) < 1)\r\n    ? 0.5 * t * t * t * t * t\r\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\r\n\r\n  easeInSine: (t: number) => -Math.cos(t * HALF_PI) + 1,\r\n\r\n  easeOutSine: (t: number) => Math.sin(t * HALF_PI),\r\n\r\n  easeInOutSine: (t: number) => -0.5 * (Math.cos(PI * t) - 1),\r\n\r\n  easeInExpo: (t: number) => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\r\n\r\n  easeOutExpo: (t: number) => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\r\n\r\n  easeInOutExpo: (t: number) => atEdge(t) ? t : t < 0.5\r\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\r\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\r\n\r\n  easeInCirc: (t: number) => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\r\n\r\n  easeOutCirc: (t: number) => Math.sqrt(1 - (t -= 1) * t),\r\n\r\n  easeInOutCirc: (t: number) => ((t /= 0.5) < 1)\r\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\r\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\r\n\r\n  easeInElastic: (t: number) => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\r\n\r\n  easeOutElastic: (t: number) => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\r\n\r\n  easeInOutElastic(t: number) {\r\n    const s = 0.1125;\r\n    const p = 0.45;\r\n    return atEdge(t) ? t :\r\n      t < 0.5\r\n        ? 0.5 * elasticIn(t * 2, s, p)\r\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\r\n  },\r\n\r\n  easeInBack(t: number) {\r\n    const s = 1.70158;\r\n    return t * t * ((s + 1) * t - s);\r\n  },\r\n\r\n  easeOutBack(t: number) {\r\n    const s = 1.70158;\r\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n  },\r\n\r\n  easeInOutBack(t: number) {\r\n    let s = 1.70158;\r\n    if ((t /= 0.5) < 1) {\r\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\r\n    }\r\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\r\n  },\r\n\r\n  easeInBounce: (t: number) => 1 - effects.easeOutBounce(1 - t),\r\n\r\n  easeOutBounce(t: number) {\r\n    const m = 7.5625;\r\n    const d = 2.75;\r\n    if (t < (1 / d)) {\r\n      return m * t * t;\r\n    }\r\n    if (t < (2 / d)) {\r\n      return m * (t -= (1.5 / d)) * t + 0.75;\r\n    }\r\n    if (t < (2.5 / d)) {\r\n      return m * (t -= (2.25 / d)) * t + 0.9375;\r\n    }\r\n    return m * (t -= (2.625 / d)) * t + 0.984375;\r\n  },\r\n\r\n  easeInOutBounce: (t: number) => (t < 0.5)\r\n    ? effects.easeInBounce(t * 2) * 0.5\r\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\r\n} as const;\r\n\r\nexport type EasingFunction = keyof typeof effects\r\n\r\nexport default effects;\r\n","import type {Point} from '../../types/geometric.js';\r\nimport type {SplinePoint} from './helpers.curve.js';\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _pointInLine(p1: Point, p2: Point, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: p1.y + t * (p2.y - p1.y)\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _steppedInterpolation(\r\n  p1: Point,\r\n  p2: Point,\r\n  t: number, mode: 'middle' | 'after' | unknown\r\n) {\r\n  return {\r\n    x: p1.x + t * (p2.x - p1.x),\r\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\r\n      : mode === 'after' ? t < 1 ? p1.y : p2.y\r\n        : t > 0 ? p2.y : p1.y\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function _bezierInterpolation(p1: SplinePoint, p2: SplinePoint, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\r\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\r\n  const a = _pointInLine(p1, cp1, t);\r\n  const b = _pointInLine(cp1, cp2, t);\r\n  const c = _pointInLine(cp2, p2, t);\r\n  const d = _pointInLine(a, b, t);\r\n  const e = _pointInLine(b, c, t);\r\n  return _pointInLine(d, e, t);\r\n}\r\n","import defaults from '../core/core.defaults.js';\r\nimport {isArray, isObject, toDimension, valueOrDefault} from './helpers.core.js';\r\nimport {Point, toFontString} from './helpers.canvas.js';\r\nimport type {ChartArea, FontSpec} from '../../types/index.js';\r\nimport type {TRBL, TRBLCorners} from '../../types/geometric.js';\r\n\r\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\r\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\r\n\r\n/**\r\n * @alias Chart.helpers.options\r\n * @namespace\r\n */\r\n/**\r\n * Converts the given line height `value` in pixels for a specific font `size`.\r\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\r\n * @param size - The font size (in pixels) used to resolve relative `value`.\r\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\r\n * @since 2.7.0\r\n */\r\nexport function toLineHeight(value: number | string, size: number): number {\r\n  const matches = ('' + value).match(LINE_HEIGHT);\r\n  if (!matches || matches[1] === 'normal') {\r\n    return size * 1.2;\r\n  }\r\n\r\n  value = +matches[2];\r\n\r\n  switch (matches[3]) {\r\n    case 'px':\r\n      return value;\r\n    case '%':\r\n      value /= 100;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return size * value;\r\n}\r\n\r\nconst numberOrZero = (v: unknown) => +v || 0;\r\n\r\n/**\r\n * @param value\r\n * @param props\r\n */\r\nexport function _readValueToProps<K extends string>(value: number | Record<K, number>, props: K[]): Record<K, number>;\r\nexport function _readValueToProps<K extends string, T extends string>(value: number | Record<K & T, number>, props: Record<T, K>): Record<T, number>;\r\nexport function _readValueToProps(value: number | Record<string, number>, props: string[] | Record<string, string>) {\r\n  const ret = {};\r\n  const objProps = isObject(props);\r\n  const keys = objProps ? Object.keys(props) : props;\r\n  const read = isObject(value)\r\n    ? objProps\r\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\r\n      : prop => value[prop]\r\n    : () => value;\r\n\r\n  for (const prop of keys) {\r\n    ret[prop] = numberOrZero(read(prop));\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL object.\r\n * @param value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns The padding values (top, right, bottom, left)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBL(value: number | TRBL | Point) {\r\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\r\n}\r\n\r\n/**\r\n * Converts the given value into a TRBL corners object (similar with css border-radius).\r\n * @param value - If a number, set the value to all TRBL corner components,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\r\n * @since 3.0.0\r\n */\r\nexport function toTRBLCorners(value: number | TRBLCorners) {\r\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\r\n}\r\n\r\n/**\r\n * Converts the given value into a padding object with pre-computed width/height.\r\n * @param value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns The padding values (top, right, bottom, left, width, height)\r\n * @since 2.7.0\r\n */\r\nexport function toPadding(value?: number | TRBL): ChartArea {\r\n  const obj = toTRBL(value) as ChartArea;\r\n\r\n  obj.width = obj.left + obj.right;\r\n  obj.height = obj.top + obj.bottom;\r\n\r\n  return obj;\r\n}\r\n\r\nexport interface CanvasFontSpec extends FontSpec {\r\n  string: string;\r\n}\r\n\r\n/**\r\n * Parses font options and returns the font object.\r\n * @param options - A object that contains font options to be parsed.\r\n * @param fallback - A object that contains fallback font options.\r\n * @return The font object.\r\n * @private\r\n */\r\n\r\nexport function toFont(options: Partial<FontSpec>, fallback?: Partial<FontSpec>) {\r\n  options = options || {};\r\n  fallback = fallback || defaults.font as FontSpec;\r\n\r\n  let size = valueOrDefault(options.size, fallback.size);\r\n\r\n  if (typeof size === 'string') {\r\n    size = parseInt(size, 10);\r\n  }\r\n  let style = valueOrDefault(options.style, fallback.style);\r\n  if (style && !('' + style).match(FONT_STYLE)) {\r\n    console.warn('Invalid font style specified: \"' + style + '\"');\r\n    style = undefined;\r\n  }\r\n\r\n  const font = {\r\n    family: valueOrDefault(options.family, fallback.family),\r\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\r\n    size,\r\n    style,\r\n    weight: valueOrDefault(options.weight, fallback.weight),\r\n    string: ''\r\n  };\r\n\r\n  font.string = toFontString(font);\r\n  return font;\r\n}\r\n\r\n/**\r\n * Evaluates the given `inputs` sequentially and returns the first defined value.\r\n * @param inputs - An array of values, falling back to the last value.\r\n * @param context - If defined and the current value is a function, the value\r\n * is called with `context` as first argument and the result becomes the new input.\r\n * @param index - If defined and the current value is an array, the value\r\n * at `index` become the new input.\r\n * @param info - object to return information about resolution in\r\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\r\n * @since 2.7.0\r\n */\r\nexport function resolve(inputs: Array<unknown>, context?: object, index?: number, info?: { cacheable: boolean }) {\r\n  let cacheable = true;\r\n  let i: number, ilen: number, value: unknown;\r\n\r\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\r\n    value = inputs[i];\r\n    if (value === undefined) {\r\n      continue;\r\n    }\r\n    if (context !== undefined && typeof value === 'function') {\r\n      value = value(context);\r\n      cacheable = false;\r\n    }\r\n    if (index !== undefined && isArray(value)) {\r\n      value = value[index % value.length];\r\n      cacheable = false;\r\n    }\r\n    if (value !== undefined) {\r\n      if (info && !cacheable) {\r\n        info.cacheable = false;\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param minmax\r\n * @param grace\r\n * @param beginAtZero\r\n * @private\r\n */\r\nexport function _addGrace(minmax: { min: number; max: number; }, grace: number | string, beginAtZero: boolean) {\r\n  const {min, max} = minmax;\r\n  const change = toDimension(grace, (max - min) / 2);\r\n  const keepZero = (value: number, add: number) => beginAtZero && value === 0 ? 0 : value + add;\r\n  return {\r\n    min: keepZero(min, -Math.abs(change)),\r\n    max: keepZero(max, change)\r\n  };\r\n}\r\n\r\n/**\r\n * Create a context inheriting parentContext\r\n * @param parentContext\r\n * @param context\r\n * @returns\r\n */\r\nexport function createContext<P extends T, T extends object>(parentContext: P, context: T): P extends null ? T : P & T {\r\n  return Object.assign(Object.create(parentContext), context);\r\n}\r\n","export interface RTLAdapter {\r\n  x(x: number): number;\r\n  setWidth(w: number): void;\r\n  textAlign(align: 'center' | 'left' | 'right'): 'center' | 'left' | 'right';\r\n  xPlus(x: number, value: number): number;\r\n  leftForLtr(x: number, itemWidth: number): number;\r\n}\r\n\r\nconst getRightToLeftAdapter = function(rectX: number, width: number): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return rectX + rectX + width - x;\r\n    },\r\n    setWidth(w) {\r\n      width = w;\r\n    },\r\n    textAlign(align) {\r\n      if (align === 'center') {\r\n        return align;\r\n      }\r\n      return align === 'right' ? 'left' : 'right';\r\n    },\r\n    xPlus(x, value) {\r\n      return x - value;\r\n    },\r\n    leftForLtr(x, itemWidth) {\r\n      return x - itemWidth;\r\n    },\r\n  };\r\n};\r\n\r\nconst getLeftToRightAdapter = function(): RTLAdapter {\r\n  return {\r\n    x(x) {\r\n      return x;\r\n    },\r\n    setWidth(w) { // eslint-disable-line no-unused-vars\r\n    },\r\n    textAlign(align) {\r\n      return align;\r\n    },\r\n    xPlus(x, value) {\r\n      return x + value;\r\n    },\r\n    leftForLtr(x, _itemWidth) { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n      return x;\r\n    },\r\n  };\r\n};\r\n\r\nexport function getRtlAdapter(rtl: boolean, rectX: number, width: number) {\r\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\r\n}\r\n\r\nexport function overrideTextDirection(ctx: CanvasRenderingContext2D, direction: 'ltr' | 'rtl') {\r\n  let style: CSSStyleDeclaration, original: [string, string];\r\n  if (direction === 'ltr' || direction === 'rtl') {\r\n    style = ctx.canvas.style;\r\n    original = [\r\n      style.getPropertyValue('direction'),\r\n      style.getPropertyPriority('direction'),\r\n    ];\r\n\r\n    style.setProperty('direction', direction, 'important');\r\n    (ctx as { prevTextDirection?: [string, string] }).prevTextDirection = original;\r\n  }\r\n}\r\n\r\nexport function restoreTextDirection(ctx: CanvasRenderingContext2D, original?: [string, string]) {\r\n  if (original !== undefined) {\r\n    delete (ctx as { prevTextDirection?: [string, string] }).prevTextDirection;\r\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\r\n  }\r\n}\r\n","import {_angleBetween, _angleDiff, _isBetween, _normalizeAngle} from './helpers.math.js';\r\nimport {createContext} from './helpers.options.js';\r\n\r\n/**\r\n * @typedef { import('../elements/element.line.js').default } LineElement\r\n * @typedef { import('../elements/element.point.js').default } PointElement\r\n * @typedef {{start: number, end: number, loop: boolean, style?: any}} Segment\r\n */\r\n\r\nfunction propertyFn(property) {\r\n  if (property === 'angle') {\r\n    return {\r\n      between: _angleBetween,\r\n      compare: _angleDiff,\r\n      normalize: _normalizeAngle,\r\n    };\r\n  }\r\n  return {\r\n    between: _isBetween,\r\n    compare: (a, b) => a - b,\r\n    normalize: x => x\r\n  };\r\n}\r\n\r\nfunction normalizeSegment({start, end, count, loop, style}) {\r\n  return {\r\n    start: start % count,\r\n    end: end % count,\r\n    loop: loop && (end - start + 1) % count === 0,\r\n    style\r\n  };\r\n}\r\n\r\nfunction getSegment(segment, points, bounds) {\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const {between, normalize} = propertyFn(property);\r\n  const count = points.length;\r\n  // eslint-disable-next-line prefer-const\r\n  let {start, end, loop} = segment;\r\n  let i, ilen;\r\n\r\n  if (loop) {\r\n    start += count;\r\n    end += count;\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\r\n        break;\r\n      }\r\n      start--;\r\n      end--;\r\n    }\r\n    start %= count;\r\n    end %= count;\r\n  }\r\n\r\n  if (end < start) {\r\n    end += count;\r\n  }\r\n  return {start, end, loop, style: segment.style};\r\n}\r\n\r\n/**\r\n * Returns the sub-segment(s) of a line segment that fall in the given bounds\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} [segment.style] - segment style\r\n * @param {PointElement[]} points - the points that this segment refers to\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property of a `PointElement` we are bounding. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the property\r\n * @param {number} bounds.end - end value of the property\r\n * @private\r\n **/\r\nexport function _boundSegment(segment, points, bounds) {\r\n  if (!bounds) {\r\n    return [segment];\r\n  }\r\n\r\n  const {property, start: startBound, end: endBound} = bounds;\r\n  const count = points.length;\r\n  const {compare, between, normalize} = propertyFn(property);\r\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\r\n\r\n  const result = [];\r\n  let inside = false;\r\n  let subStart = null;\r\n  let value, point, prevValue;\r\n\r\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\r\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\r\n  const shouldStart = () => inside || startIsBefore();\r\n  const shouldStop = () => !inside || endIsBefore();\r\n\r\n  for (let i = start, prev = start; i <= end; ++i) {\r\n    point = points[i % count];\r\n\r\n    if (point.skip) {\r\n      continue;\r\n    }\r\n\r\n    value = normalize(point[property]);\r\n\r\n    if (value === prevValue) {\r\n      continue;\r\n    }\r\n\r\n    inside = between(value, startBound, endBound);\r\n\r\n    if (subStart === null && shouldStart()) {\r\n      subStart = compare(value, startBound) === 0 ? i : prev;\r\n    }\r\n\r\n    if (subStart !== null && shouldStop()) {\r\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\r\n      subStart = null;\r\n    }\r\n    prev = i;\r\n    prevValue = value;\r\n  }\r\n\r\n  if (subStart !== null) {\r\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n\r\n/**\r\n * Returns the segments of the line that are inside given bounds\r\n * @param {LineElement} line\r\n * @param {object} [bounds]\r\n * @param {string} bounds.property - the property we are bounding with. `x`, `y` or `angle`.\r\n * @param {number} bounds.start - start value of the `property`\r\n * @param {number} bounds.end - end value of the `property`\r\n * @private\r\n */\r\nexport function _boundSegments(line, bounds) {\r\n  const result = [];\r\n  const segments = line.segments;\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const sub = _boundSegment(segments[i], line.points, bounds);\r\n    if (sub.length) {\r\n      result.push(...sub);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Find start and end index of a line.\r\n */\r\nfunction findStartAndEnd(points, count, loop, spanGaps) {\r\n  let start = 0;\r\n  let end = count - 1;\r\n\r\n  if (loop && !spanGaps) {\r\n    // loop and not spanning gaps, first find a gap to start from\r\n    while (start < count && !points[start].skip) {\r\n      start++;\r\n    }\r\n  }\r\n\r\n  // find first non skipped point (after the first gap possibly)\r\n  while (start < count && points[start].skip) {\r\n    start++;\r\n  }\r\n\r\n  // if we looped to count, start needs to be 0\r\n  start %= count;\r\n\r\n  if (loop) {\r\n    // loop will go past count, if start > 0\r\n    end += start;\r\n  }\r\n\r\n  while (end > start && points[end % count].skip) {\r\n    end--;\r\n  }\r\n\r\n  // end could be more than count, normalize\r\n  end %= count;\r\n\r\n  return {start, end};\r\n}\r\n\r\n/**\r\n * Compute solid segments from Points, when spanGaps === false\r\n * @param {PointElement[]} points - the points\r\n * @param {number} start - start index\r\n * @param {number} max - max index (can go past count on a loop)\r\n * @param {boolean} loop - boolean indicating that this would be a loop if no gaps are found\r\n */\r\nfunction solidSegments(points, start, max, loop) {\r\n  const count = points.length;\r\n  const result = [];\r\n  let last = start;\r\n  let prev = points[start];\r\n  let end;\r\n\r\n  for (end = start + 1; end <= max; ++end) {\r\n    const cur = points[end % count];\r\n    if (cur.skip || cur.stop) {\r\n      if (!prev.skip) {\r\n        loop = false;\r\n        result.push({start: start % count, end: (end - 1) % count, loop});\r\n        // @ts-ignore\r\n        start = last = cur.stop ? end : null;\r\n      }\r\n    } else {\r\n      last = end;\r\n      if (prev.skip) {\r\n        start = end;\r\n      }\r\n    }\r\n    prev = cur;\r\n  }\r\n\r\n  if (last !== null) {\r\n    result.push({start: start % count, end: last % count, loop});\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute the continuous segments that define the whole line\r\n * There can be skipped points within a segment, if spanGaps is true.\r\n * @param {LineElement} line\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n * @private\r\n */\r\nexport function _computeSegments(line, segmentOptions) {\r\n  const points = line.points;\r\n  const spanGaps = line.options.spanGaps;\r\n  const count = points.length;\r\n\r\n  if (!count) {\r\n    return [];\r\n  }\r\n\r\n  const loop = !!line._loop;\r\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\r\n\r\n  if (spanGaps === true) {\r\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\r\n  }\r\n\r\n  const max = end < start ? end + count : end;\r\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\r\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction splitByStyles(line, segments, points, segmentOptions) {\r\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\r\n    return segments;\r\n  }\r\n  return doSplitByStyles(line, segments, points, segmentOptions);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {Segment[]} segments\r\n * @param {PointElement[]} points\r\n * @param {object} [segmentOptions]\r\n * @return {Segment[]}\r\n */\r\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\r\n  const chartContext = line._chart.getContext();\r\n  const baseStyle = readStyle(line.options);\r\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\r\n  const count = points.length;\r\n  const result = [];\r\n  let prevStyle = baseStyle;\r\n  let start = segments[0].start;\r\n  let i = start;\r\n\r\n  function addStyle(s, e, l, st) {\r\n    const dir = spanGaps ? -1 : 1;\r\n    if (s === e) {\r\n      return;\r\n    }\r\n    // Style can not start/end on a skipped point, adjust indices accordingly\r\n    s += count;\r\n    while (points[s % count].skip) {\r\n      s -= dir;\r\n    }\r\n    while (points[e % count].skip) {\r\n      e += dir;\r\n    }\r\n    if (s % count !== e % count) {\r\n      result.push({start: s % count, end: e % count, loop: l, style: st});\r\n      prevStyle = st;\r\n      start = e % count;\r\n    }\r\n  }\r\n\r\n  for (const segment of segments) {\r\n    start = spanGaps ? start : segment.start;\r\n    let prev = points[start % count];\r\n    let style;\r\n    for (i = start + 1; i <= segment.end; i++) {\r\n      const pt = points[i % count];\r\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\r\n        type: 'segment',\r\n        p0: prev,\r\n        p1: pt,\r\n        p0DataIndex: (i - 1) % count,\r\n        p1DataIndex: i % count,\r\n        datasetIndex\r\n      })));\r\n      if (styleChanged(style, prevStyle)) {\r\n        addStyle(start, i - 1, segment.loop, prevStyle);\r\n      }\r\n      prev = pt;\r\n      prevStyle = style;\r\n    }\r\n    if (start < i - 1) {\r\n      addStyle(start, i - 1, segment.loop, prevStyle);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction readStyle(options) {\r\n  return {\r\n    backgroundColor: options.backgroundColor,\r\n    borderCapStyle: options.borderCapStyle,\r\n    borderDash: options.borderDash,\r\n    borderDashOffset: options.borderDashOffset,\r\n    borderJoinStyle: options.borderJoinStyle,\r\n    borderWidth: options.borderWidth,\r\n    borderColor: options.borderColor\r\n  };\r\n}\r\n\r\nfunction styleChanged(style, prevStyle) {\r\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\r\n}\r\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\r\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\r\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\r\nimport {_isPointInArea} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\r\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\r\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\r\n * @typedef { import('../../types/index.js').Point } Point\r\n */\r\n\r\n/**\r\n * Helper function to do binary search when possible\r\n * @param {object} metaset - the dataset meta\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {number} value - the value to find\r\n * @param {boolean} [intersect] - should the element intersect\r\n * @returns {{lo:number, hi:number}} indices to search data array between\r\n */\r\nfunction binarySearch(metaset, axis, value, intersect) {\r\n  const {controller, data, _sorted} = metaset;\r\n  const iScale = controller._cachedMeta.iScale;\r\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\r\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\r\n    if (!intersect) {\r\n      return lookupMethod(data, axis, value);\r\n    } else if (controller._sharedOptions) {\r\n      // _sharedOptions indicates that each element has equal options -> equal proportions\r\n      // So we can do a ranged binary search based on the range of first element and\r\n      // be confident to get the full range of indices that can intersect with the value.\r\n      const el = data[0];\r\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\r\n      if (range) {\r\n        const start = lookupMethod(data, axis, value - range);\r\n        const end = lookupMethod(data, axis, value + range);\r\n        return {lo: start.lo, hi: end.hi};\r\n      }\r\n    }\r\n  }\r\n  // Default to all elements, when binary search can not be used.\r\n  return {lo: 0, hi: data.length - 1};\r\n}\r\n\r\n/**\r\n * Helper function to select candidate elements for interaction\r\n * @param {Chart} chart - the chart\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {function} handler - the callback to execute for each visible item\r\n * @param {boolean} [intersect] - consider intersecting items\r\n */\r\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\r\n  const metasets = chart.getSortedVisibleDatasetMetas();\r\n  const value = position[axis];\r\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    const {index, data} = metasets[i];\r\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\r\n    for (let j = lo; j <= hi; ++j) {\r\n      const element = data[j];\r\n      if (!element.skip) {\r\n        handler(element, index, j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a distance metric function for two points based on the\r\n * axis mode setting\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n */\r\nfunction getDistanceMetricForAxis(axis) {\r\n  const useX = axis.indexOf('x') !== -1;\r\n  const useY = axis.indexOf('y') !== -1;\r\n\r\n  return function(pt1, pt2) {\r\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\r\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\r\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to get the items that intersect the event position\r\n * @param {Chart} chart - the chart\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\r\n  const items = [];\r\n\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return items;\r\n  }\r\n\r\n  const evaluationFunc = function(element, datasetIndex, index) {\r\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\r\n      return;\r\n    }\r\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  };\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a radial chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\r\n  let items = [];\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\r\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\r\n\r\n    if (_angleBetween(angle, startAngle, endAngle)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a cartesian chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  let items = [];\r\n  const distanceMetric = getDistanceMetricForAxis(axis);\r\n  let minDistance = Number.POSITIVE_INFINITY;\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\r\n    if (intersect && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const center = element.getCenterPoint(useFinalPosition);\r\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\r\n    if (!pointInArea && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const distance = distanceMetric(position, center);\r\n    if (distance < minDistance) {\r\n      items = [{element, datasetIndex, index}];\r\n      minDistance = distance;\r\n    } else if (distance === minDistance) {\r\n      // Can have multiple items at the same distance in which case we sort by size\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position considering all visible items in the chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return [];\r\n  }\r\n\r\n  return axis === 'r' && !intersect\r\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\r\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\r\n}\r\n\r\n/**\r\n * Helper function to get the items matching along the given X or Y axis\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis to match\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\r\n  const items = [];\r\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\r\n  let intersectsItem = false;\r\n\r\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\r\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\r\n    }\r\n  });\r\n\r\n  // If we want to trigger on an intersect and we don't have any items\r\n  // that intersect the position, return nothing\r\n  if (intersect && !intersectsItem) {\r\n    return [];\r\n  }\r\n  return items;\r\n}\r\n\r\n/**\r\n * Contains interaction related functions\r\n * @namespace Chart.Interaction\r\n */\r\nexport default {\r\n  // Part of the public API to facilitate developers creating their own modes\r\n  evaluateInteractionItems,\r\n\r\n  // Helper function for different modes\r\n  modes: {\r\n    /**\r\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\r\n\t\t * @function Chart.Interaction.modes.index\r\n\t\t * @since v2.4.0\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    index(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      // Default axis for index mode is 'x' to match old behaviour\r\n      const axis = options.axis || 'x';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      const items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\r\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n      const elements = [];\r\n\r\n      if (!items.length) {\r\n        return [];\r\n      }\r\n\r\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\r\n        const index = items[0].index;\r\n        const element = meta.data[index];\r\n\r\n        // don't count items that are skipped (null data)\r\n        if (element && !element.skip) {\r\n          elements.push({element, datasetIndex: meta.index, index});\r\n        }\r\n      });\r\n\r\n      return elements;\r\n    },\r\n\r\n    /**\r\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\r\n\t\t * @function Chart.Interaction.modes.dataset\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    dataset(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      let items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\r\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n\r\n      if (items.length > 0) {\r\n        const datasetIndex = items[0].datasetIndex;\r\n        const data = chart.getDatasetMeta(datasetIndex).data;\r\n        items = [];\r\n        for (let i = 0; i < data.length; ++i) {\r\n          items.push({element: data[i], datasetIndex, index: i});\r\n        }\r\n      }\r\n\r\n      return items;\r\n    },\r\n\r\n    /**\r\n\t\t * Point mode returns all elements that hit test based on the event position\r\n\t\t * of the event\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    point(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * nearest mode returns the element closest to the point\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    nearest(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * x mode returns the elements that hit-test at the current x coordinate\r\n\t\t * @function Chart.Interaction.modes.x\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    x(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\r\n    },\r\n\r\n    /**\r\n\t\t * y mode returns the elements that hit-test at the current y coordinate\r\n\t\t * @function Chart.Interaction.modes.y\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    y(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\r\n    }\r\n  }\r\n};\r\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\r\nimport {toPadding} from '../helpers/helpers.options.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n */\r\n\r\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\r\n\r\nfunction filterByPosition(array, position) {\r\n  return array.filter(v => v.pos === position);\r\n}\r\n\r\nfunction filterDynamicPositionByAxis(array, axis) {\r\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\r\n}\r\n\r\nfunction sortByWeight(array, reverse) {\r\n  return array.sort((a, b) => {\r\n    const v0 = reverse ? b : a;\r\n    const v1 = reverse ? a : b;\r\n    return v0.weight === v1.weight ?\r\n      v0.index - v1.index :\r\n      v0.weight - v1.weight;\r\n  });\r\n}\r\n\r\nfunction wrapBoxes(boxes) {\r\n  const layoutBoxes = [];\r\n  let i, ilen, box, pos, stack, stackWeight;\r\n\r\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\r\n    box = boxes[i];\r\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\r\n    layoutBoxes.push({\r\n      index: i,\r\n      box,\r\n      pos,\r\n      horizontal: box.isHorizontal(),\r\n      weight: box.weight,\r\n      stack: stack && (pos + stack),\r\n      stackWeight\r\n    });\r\n  }\r\n  return layoutBoxes;\r\n}\r\n\r\nfunction buildStacks(layouts) {\r\n  const stacks = {};\r\n  for (const wrap of layouts) {\r\n    const {stack, pos, stackWeight} = wrap;\r\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\r\n      continue;\r\n    }\r\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\r\n    _stack.count++;\r\n    _stack.weight += stackWeight;\r\n  }\r\n  return stacks;\r\n}\r\n\r\n/**\r\n * store dimensions used instead of available chartArea in fitBoxes\r\n **/\r\nfunction setLayoutDims(layouts, params) {\r\n  const stacks = buildStacks(layouts);\r\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\r\n  let i, ilen, layout;\r\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\r\n    layout = layouts[i];\r\n    const {fullSize} = layout.box;\r\n    const stack = stacks[layout.stack];\r\n    const factor = stack && layout.stackWeight / stack.weight;\r\n    if (layout.horizontal) {\r\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\r\n      layout.height = hBoxMaxHeight;\r\n    } else {\r\n      layout.width = vBoxMaxWidth;\r\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\r\n    }\r\n  }\r\n  return stacks;\r\n}\r\n\r\nfunction buildLayoutBoxes(boxes) {\r\n  const layoutBoxes = wrapBoxes(boxes);\r\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\r\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\r\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\r\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\r\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\r\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\r\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\r\n\r\n  return {\r\n    fullSize,\r\n    leftAndTop: left.concat(top),\r\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\r\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\r\n    vertical: left.concat(right).concat(centerVertical),\r\n    horizontal: top.concat(bottom).concat(centerHorizontal)\r\n  };\r\n}\r\n\r\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\r\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\r\n}\r\n\r\nfunction updateMaxPadding(maxPadding, boxPadding) {\r\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\r\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\r\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\r\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\r\n}\r\n\r\nfunction updateDims(chartArea, params, layout, stacks) {\r\n  const {pos, box} = layout;\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  // dynamically placed boxes size is not considered\r\n  if (!isObject(pos)) {\r\n    if (layout.size) {\r\n      // this layout was already counted for, lets first reduce old size\r\n      chartArea[pos] -= layout.size;\r\n    }\r\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\r\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\r\n    layout.size = stack.size / stack.count;\r\n    chartArea[pos] += layout.size;\r\n  }\r\n\r\n  if (box.getPadding) {\r\n    updateMaxPadding(maxPadding, box.getPadding());\r\n  }\r\n\r\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\r\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\r\n  const widthChanged = newWidth !== chartArea.w;\r\n  const heightChanged = newHeight !== chartArea.h;\r\n  chartArea.w = newWidth;\r\n  chartArea.h = newHeight;\r\n\r\n  // return booleans on the changes per direction\r\n  return layout.horizontal\r\n    ? {same: widthChanged, other: heightChanged}\r\n    : {same: heightChanged, other: widthChanged};\r\n}\r\n\r\nfunction handleMaxPadding(chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function updatePos(pos) {\r\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\r\n    chartArea[pos] += change;\r\n    return change;\r\n  }\r\n  chartArea.y += updatePos('top');\r\n  chartArea.x += updatePos('left');\r\n  updatePos('right');\r\n  updatePos('bottom');\r\n}\r\n\r\nfunction getMargins(horizontal, chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function marginForPositions(positions) {\r\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\r\n    positions.forEach((pos) => {\r\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\r\n    });\r\n    return margin;\r\n  }\r\n\r\n  return horizontal\r\n    ? marginForPositions(['left', 'right'])\r\n    : marginForPositions(['top', 'bottom']);\r\n}\r\n\r\nfunction fitBoxes(boxes, chartArea, params, stacks) {\r\n  const refitBoxes = [];\r\n  let i, ilen, layout, box, refit, changed;\r\n\r\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\r\n    layout = boxes[i];\r\n    box = layout.box;\r\n\r\n    box.update(\r\n      layout.width || chartArea.w,\r\n      layout.height || chartArea.h,\r\n      getMargins(layout.horizontal, chartArea)\r\n    );\r\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\r\n\r\n    // Dimensions changed and there were non full width boxes before this\r\n    // -> we have to refit those\r\n    refit |= same && refitBoxes.length;\r\n\r\n    // Chart area changed in the opposite direction\r\n    changed = changed || other;\r\n\r\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\r\n      refitBoxes.push(layout);\r\n    }\r\n  }\r\n\r\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\r\n}\r\n\r\nfunction setBoxDims(box, left, top, width, height) {\r\n  box.top = top;\r\n  box.left = left;\r\n  box.right = left + width;\r\n  box.bottom = top + height;\r\n  box.width = width;\r\n  box.height = height;\r\n}\r\n\r\nfunction placeBoxes(boxes, chartArea, params, stacks) {\r\n  const userPadding = params.padding;\r\n  let {x, y} = chartArea;\r\n\r\n  for (const layout of boxes) {\r\n    const box = layout.box;\r\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\r\n    const weight = (layout.stackWeight / stack.weight) || 1;\r\n    if (layout.horizontal) {\r\n      const width = chartArea.w * weight;\r\n      const height = stack.size || box.height;\r\n      if (defined(stack.start)) {\r\n        y = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\r\n      } else {\r\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\r\n      }\r\n      stack.start = y;\r\n      stack.placed += width;\r\n      y = box.bottom;\r\n    } else {\r\n      const height = chartArea.h * weight;\r\n      const width = stack.size || box.width;\r\n      if (defined(stack.start)) {\r\n        x = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\r\n      } else {\r\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\r\n      }\r\n      stack.start = x;\r\n      stack.placed += height;\r\n      x = box.right;\r\n    }\r\n  }\r\n\r\n  chartArea.x = x;\r\n  chartArea.y = y;\r\n}\r\n\r\n/**\r\n * @interface LayoutItem\r\n * @typedef {object} LayoutItem\r\n * @prop {string} position - The position of the item in the chart layout. Possible values are\r\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\r\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\r\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\r\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\r\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\r\n * @prop {function} draw - Draws the element\r\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\r\n * @prop {number} width - Width of item. Must be valid after update()\r\n * @prop {number} height - Height of item. Must be valid after update()\r\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\r\n */\r\n\r\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\r\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\r\n// It is this service's responsibility of carrying out that layout.\r\nexport default {\r\n\r\n  /**\r\n\t * Register a box to a chart.\r\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\r\n\t * @param {Chart} chart - the chart to use\r\n\t * @param {LayoutItem} item - the item to add to be laid out\r\n\t */\r\n  addBox(chart, item) {\r\n    if (!chart.boxes) {\r\n      chart.boxes = [];\r\n    }\r\n\r\n    // initialize item with default values\r\n    item.fullSize = item.fullSize || false;\r\n    item.position = item.position || 'top';\r\n    item.weight = item.weight || 0;\r\n    // @ts-ignore\r\n    item._layers = item._layers || function() {\r\n      return [{\r\n        z: 0,\r\n        draw(chartArea) {\r\n          item.draw(chartArea);\r\n        }\r\n      }];\r\n    };\r\n\r\n    chart.boxes.push(item);\r\n  },\r\n\r\n  /**\r\n\t * Remove a layoutItem from a chart\r\n\t * @param {Chart} chart - the chart to remove the box from\r\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\r\n\t */\r\n  removeBox(chart, layoutItem) {\r\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\r\n    if (index !== -1) {\r\n      chart.boxes.splice(index, 1);\r\n    }\r\n  },\r\n\r\n  /**\r\n\t * Sets (or updates) options on the given `item`.\r\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\r\n\t * @param {LayoutItem} item - the item to configure with the given options\r\n\t * @param {object} options - the new item options.\r\n\t */\r\n  configure(chart, item, options) {\r\n    item.fullSize = options.fullSize;\r\n    item.position = options.position;\r\n    item.weight = options.weight;\r\n  },\r\n\r\n  /**\r\n\t * Fits boxes of the given chart into the given size by having each box measure itself\r\n\t * then running a fitting algorithm\r\n\t * @param {Chart} chart - the chart\r\n\t * @param {number} width - the width to fit into\r\n\t * @param {number} height - the height to fit into\r\n   * @param {number} minPadding - minimum padding required for each side of chart area\r\n\t */\r\n  update(chart, width, height, minPadding) {\r\n    if (!chart) {\r\n      return;\r\n    }\r\n\r\n    const padding = toPadding(chart.options.layout.padding);\r\n    const availableWidth = Math.max(width - padding.width, 0);\r\n    const availableHeight = Math.max(height - padding.height, 0);\r\n    const boxes = buildLayoutBoxes(chart.boxes);\r\n    const verticalBoxes = boxes.vertical;\r\n    const horizontalBoxes = boxes.horizontal;\r\n\r\n    // Before any changes are made, notify boxes that an update is about to being\r\n    // This is used to clear any cached data (e.g. scale limits)\r\n    each(chart.boxes, box => {\r\n      if (typeof box.beforeLayout === 'function') {\r\n        box.beforeLayout();\r\n      }\r\n    });\r\n\r\n    // Essentially we now have any number of boxes on each of the 4 sides.\r\n    // Our canvas looks like the following.\r\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\r\n    // B1 is the bottom axis\r\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\r\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\r\n    // an error will be thrown.\r\n    //\r\n    // |----------------------------------------------------|\r\n    // |                  T1 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    // |    |    |                 T2                  |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    | C1 |                           | C2 |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    |                                     |    |\r\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\r\n    // |    |    |                                     |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    | C3 |                           | C4 |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    |                 B1                  |    |\r\n    // |----------------------------------------------------|\r\n    // |                  B2 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    //\r\n\r\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\r\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\r\n\r\n    const params = Object.freeze({\r\n      outerWidth: width,\r\n      outerHeight: height,\r\n      padding,\r\n      availableWidth,\r\n      availableHeight,\r\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\r\n      hBoxMaxHeight: availableHeight / 2\r\n    });\r\n    const maxPadding = Object.assign({}, padding);\r\n    updateMaxPadding(maxPadding, toPadding(minPadding));\r\n    const chartArea = Object.assign({\r\n      maxPadding,\r\n      w: availableWidth,\r\n      h: availableHeight,\r\n      x: padding.left,\r\n      y: padding.top\r\n    }, padding);\r\n\r\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\r\n\r\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\r\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\r\n\r\n    // Then fit vertical boxes\r\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n\r\n    // Then fit horizontal boxes\r\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\r\n      // if the area changed, re-fit vertical boxes\r\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n    }\r\n\r\n    handleMaxPadding(chartArea);\r\n\r\n    // Finally place the boxes to correct coordinates\r\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\r\n\r\n    // Move to opposite side of chart\r\n    chartArea.x += chartArea.w;\r\n    chartArea.y += chartArea.h;\r\n\r\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\r\n\r\n    chart.chartArea = {\r\n      left: chartArea.left,\r\n      top: chartArea.top,\r\n      right: chartArea.left + chartArea.w,\r\n      bottom: chartArea.top + chartArea.h,\r\n      height: chartArea.h,\r\n      width: chartArea.w,\r\n    };\r\n\r\n    // Finally update boxes in chartArea (radial scale for example)\r\n    each(boxes.chartArea, (layout) => {\r\n      const box = layout.box;\r\n      Object.assign(box, chart.chartArea);\r\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\r\n    });\r\n  }\r\n};\r\n","\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\n/**\r\n * Abstract class that allows abstracting platform dependencies away from the chart.\r\n */\r\nexport default class BasePlatform {\r\n  /**\r\n\t * Called at chart construction time, returns a context2d instance implementing\r\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\r\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\r\n\t * @param {number} [aspectRatio] - The chart options\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Called at chart destruction time, releases any resources associated to the context\r\n\t * previously returned by the acquireContext() method.\r\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\r\n\t * @returns {boolean} true if the method succeeded, else false\r\n\t */\r\n  releaseContext(context) { // eslint-disable-line no-unused-vars\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Registers the specified listener on the given chart.\r\n\t * @param {Chart} chart - Chart from which to listen for event\r\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\r\n\t * @param {function} listener - Receives a notification (an object that implements\r\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\r\n\t */\r\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Removes the specified listener previously registered with addEventListener.\r\n\t * @param {Chart} chart - Chart from which to remove the listener\r\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\r\n\t * @param {function} listener - The listener function to remove from the event target.\r\n\t */\r\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\r\n\t */\r\n  getDevicePixelRatio() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum size in pixels of given canvas element.\r\n\t * @param {HTMLCanvasElement} element\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(element, width, height, aspectRatio) {\r\n    width = Math.max(0, width || element.width);\r\n    height = height || element.height;\r\n    return {\r\n      width,\r\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\r\n\t */\r\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Updates config with platform specific requirements\r\n   * @param {import('../core/core.config.js').default} config\r\n   */\r\n  updateConfig(config) { // eslint-disable-line no-unused-vars\r\n    // no-op\r\n  }\r\n}\r\n","/**\r\n * Platform fallback implementation (minimal).\r\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\r\n */\r\n\r\nimport BasePlatform from './platform.base.js';\r\n\r\n/**\r\n * Platform class for charts without access to the DOM or to many element properties\r\n * This platform is used by default for any chart passed an OffscreenCanvas.\r\n * @extends BasePlatform\r\n */\r\nexport default class BasicPlatform extends BasePlatform {\r\n  acquireContext(item) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    return item && item.getContext && item.getContext('2d') || null;\r\n  }\r\n  updateConfig(config) {\r\n    config.options.animation = false;\r\n  }\r\n}\r\n","/**\r\n * Chart.Platform implementation for targeting a web browser\r\n */\r\n\r\nimport BasePlatform from './platform.base.js';\r\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\r\nimport {throttled} from '../helpers/helpers.extras.js';\r\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\nconst EXPANDO_KEY = '$chartjs';\r\n\r\n/**\r\n * DOM event types -> Chart.js event types.\r\n * Note: only events with different types are mapped.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\r\n */\r\nconst EVENT_TYPES = {\r\n  touchstart: 'mousedown',\r\n  touchmove: 'mousemove',\r\n  touchend: 'mouseup',\r\n  pointerenter: 'mouseenter',\r\n  pointerdown: 'mousedown',\r\n  pointermove: 'mousemove',\r\n  pointerup: 'mouseup',\r\n  pointerleave: 'mouseout',\r\n  pointerout: 'mouseout'\r\n};\r\n\r\nconst isNullOrEmpty = value => value === null || value === '';\r\n/**\r\n * Initializes the canvas style and render size without modifying the canvas display size,\r\n * since responsiveness is handled by the controller.resize() method. The config is used\r\n * to determine the aspect ratio to apply in case no explicit height has been specified.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {number} [aspectRatio]\r\n */\r\nfunction initCanvas(canvas, aspectRatio) {\r\n  const style = canvas.style;\r\n\r\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\r\n  // returns null or '' if no explicit value has been set to the canvas attribute.\r\n  const renderHeight = canvas.getAttribute('height');\r\n  const renderWidth = canvas.getAttribute('width');\r\n\r\n  // Chart.js modifies some canvas values that we want to restore on destroy\r\n  canvas[EXPANDO_KEY] = {\r\n    initial: {\r\n      height: renderHeight,\r\n      width: renderWidth,\r\n      style: {\r\n        display: style.display,\r\n        height: style.height,\r\n        width: style.width\r\n      }\r\n    }\r\n  };\r\n\r\n  // Force canvas to display as block to avoid extra space caused by inline\r\n  // elements, which would interfere with the responsive resize process.\r\n  // https://github.com/chartjs/Chart.js/issues/2538\r\n  style.display = style.display || 'block';\r\n  // Include possible borders in the size\r\n  style.boxSizing = style.boxSizing || 'border-box';\r\n\r\n  if (isNullOrEmpty(renderWidth)) {\r\n    const displayWidth = readUsedSize(canvas, 'width');\r\n    if (displayWidth !== undefined) {\r\n      canvas.width = displayWidth;\r\n    }\r\n  }\r\n\r\n  if (isNullOrEmpty(renderHeight)) {\r\n    if (canvas.style.height === '') {\r\n      // If no explicit render height and style height, let's apply the aspect ratio,\r\n      // which one can be specified by the user but also by charts as default option\r\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\r\n      canvas.height = canvas.width / (aspectRatio || 2);\r\n    } else {\r\n      const displayHeight = readUsedSize(canvas, 'height');\r\n      if (displayHeight !== undefined) {\r\n        canvas.height = displayHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  return canvas;\r\n}\r\n\r\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\r\n// https://github.com/chartjs/Chart.js/issues/4287\r\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\r\n\r\nfunction addListener(node, type, listener) {\r\n  node.addEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction removeListener(chart, type, listener) {\r\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction fromNativeEvent(event, chart) {\r\n  const type = EVENT_TYPES[event.type] || event.type;\r\n  const {x, y} = getRelativePosition(event, chart);\r\n  return {\r\n    type,\r\n    chart,\r\n    native: event,\r\n    x: x !== undefined ? x : null,\r\n    y: y !== undefined ? y : null,\r\n  };\r\n}\r\n\r\nfunction nodeListContains(nodeList, canvas) {\r\n  for (const node of nodeList) {\r\n    if (node === canvas || node.contains(canvas)) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createAttachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nfunction createDetachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nconst drpListeningCharts = new Map();\r\nlet oldDevicePixelRatio = 0;\r\n\r\nfunction onWindowResize() {\r\n  const dpr = window.devicePixelRatio;\r\n  if (dpr === oldDevicePixelRatio) {\r\n    return;\r\n  }\r\n  oldDevicePixelRatio = dpr;\r\n  drpListeningCharts.forEach((resize, chart) => {\r\n    if (chart.currentDevicePixelRatio !== dpr) {\r\n      resize();\r\n    }\r\n  });\r\n}\r\n\r\nfunction listenDevicePixelRatioChanges(chart, resize) {\r\n  if (!drpListeningCharts.size) {\r\n    window.addEventListener('resize', onWindowResize);\r\n  }\r\n  drpListeningCharts.set(chart, resize);\r\n}\r\n\r\nfunction unlistenDevicePixelRatioChanges(chart) {\r\n  drpListeningCharts.delete(chart);\r\n  if (!drpListeningCharts.size) {\r\n    window.removeEventListener('resize', onWindowResize);\r\n  }\r\n}\r\n\r\nfunction createResizeObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const container = canvas && _getParentNode(canvas);\r\n  if (!container) {\r\n    return;\r\n  }\r\n  const resize = throttled((width, height) => {\r\n    const w = container.clientWidth;\r\n    listener(width, height);\r\n    if (w < container.clientWidth) {\r\n      // If the container size shrank during chart resize, let's assume\r\n      // scrollbar appeared. So we resize again with the scrollbar visible -\r\n      // effectively making chart smaller and the scrollbar hidden again.\r\n      // Because we are inside `throttled`, and currently `ticking`, scroll\r\n      // events are ignored during this whole 2 resize process.\r\n      // If we assumed wrong and something else happened, we are resizing\r\n      // twice in a frame (potential performance issue)\r\n      listener();\r\n    }\r\n  }, window);\r\n\r\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\r\n  const observer = new ResizeObserver(entries => {\r\n    const entry = entries[0];\r\n    const width = entry.contentRect.width;\r\n    const height = entry.contentRect.height;\r\n    // When its container's display is set to 'none' the callback will be called with a\r\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\r\n    // resizing in such case.\r\n    if (width === 0 && height === 0) {\r\n      return;\r\n    }\r\n    resize(width, height);\r\n  });\r\n  observer.observe(container);\r\n  listenDevicePixelRatioChanges(chart, resize);\r\n\r\n  return observer;\r\n}\r\n\r\nfunction releaseObserver(chart, type, observer) {\r\n  if (observer) {\r\n    observer.disconnect();\r\n  }\r\n  if (type === 'resize') {\r\n    unlistenDevicePixelRatioChanges(chart);\r\n  }\r\n}\r\n\r\nfunction createProxyAndListen(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const proxy = throttled((event) => {\r\n    // This case can occur if the chart is destroyed while waiting\r\n    // for the throttled function to occur. We prevent crashes by checking\r\n    // for a destroyed chart\r\n    if (chart.ctx !== null) {\r\n      listener(fromNativeEvent(event, chart));\r\n    }\r\n  }, chart);\r\n\r\n  addListener(canvas, type, proxy);\r\n\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Platform class for charts that can access the DOM and global window/document properties\r\n * @extends BasePlatform\r\n */\r\nexport default class DomPlatform extends BasePlatform {\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [aspectRatio]\r\n\t * @return {CanvasRenderingContext2D|null}\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\r\n\r\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\r\n    // inside an iframe or when running in a protected environment. We could guess the\r\n    // types from their toString() value but let's keep things flexible and assume it's\r\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\r\n    // https://github.com/chartjs/Chart.js/issues/3887\r\n    // https://github.com/chartjs/Chart.js/issues/4102\r\n    // https://github.com/chartjs/Chart.js/issues/4152\r\n    if (context && context.canvas === canvas) {\r\n      // Load platform resources on first chart creation, to make it possible to\r\n      // import the library before setting platform options.\r\n      initCanvas(canvas, aspectRatio);\r\n      return context;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * @param {CanvasRenderingContext2D} context\r\n\t */\r\n  releaseContext(context) {\r\n    const canvas = context.canvas;\r\n    if (!canvas[EXPANDO_KEY]) {\r\n      return false;\r\n    }\r\n\r\n    const initial = canvas[EXPANDO_KEY].initial;\r\n    ['height', 'width'].forEach((prop) => {\r\n      const value = initial[prop];\r\n      if (isNullOrUndef(value)) {\r\n        canvas.removeAttribute(prop);\r\n      } else {\r\n        canvas.setAttribute(prop, value);\r\n      }\r\n    });\r\n\r\n    const style = initial.style || {};\r\n    Object.keys(style).forEach((key) => {\r\n      canvas.style[key] = style[key];\r\n    });\r\n\r\n    // The canvas render size might have been changed (and thus the state stack discarded),\r\n    // we can't use save() and restore() to restore the initial state. So make sure that at\r\n    // least the canvas context is reset to the default state by setting the canvas width.\r\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\r\n    // eslint-disable-next-line no-self-assign\r\n    canvas.width = canvas.width;\r\n\r\n    delete canvas[EXPANDO_KEY];\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t *\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t * @param {function} listener\r\n\t */\r\n  addEventListener(chart, type, listener) {\r\n    // Can have only one listener per type, so make sure previous is removed\r\n    this.removeEventListener(chart, type);\r\n\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const handlers = {\r\n      attach: createAttachObserver,\r\n      detach: createDetachObserver,\r\n      resize: createResizeObserver\r\n    };\r\n    const handler = handlers[type] || createProxyAndListen;\r\n    proxies[type] = handler(chart, type, listener);\r\n  }\r\n\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t */\r\n  removeEventListener(chart, type) {\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const proxy = proxies[type];\r\n\r\n    if (!proxy) {\r\n      return;\r\n    }\r\n\r\n    const handlers = {\r\n      attach: releaseObserver,\r\n      detach: releaseObserver,\r\n      resize: releaseObserver\r\n    };\r\n    const handler = handlers[type] || removeListener;\r\n    handler(chart, type, proxy);\r\n    proxies[type] = undefined;\r\n  }\r\n\r\n  getDevicePixelRatio() {\r\n    return window.devicePixelRatio;\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(canvas, width, height, aspectRatio) {\r\n    return getMaximumSize(canvas, width, height, aspectRatio);\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t */\r\n  isAttached(canvas) {\r\n    const container = _getParentNode(canvas);\r\n    return !!(container && container.isConnected);\r\n  }\r\n}\r\n","import {_isDomSupported} from '../helpers/index.js';\r\nimport BasePlatform from './platform.base.js';\r\nimport BasicPlatform from './platform.basic.js';\r\nimport DomPlatform from './platform.dom.js';\r\n\r\nexport function _detectPlatform(canvas) {\r\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\r\n    return BasicPlatform;\r\n  }\r\n  return DomPlatform;\r\n}\r\n\r\nexport {BasePlatform, BasicPlatform, DomPlatform};\r\n","import effects from '../helpers/helpers.easing.js';\r\nimport {resolve} from '../helpers/helpers.options.js';\r\nimport {color as helpersColor} from '../helpers/helpers.color.js';\r\n\r\nconst transparent = 'transparent';\r\nconst interpolators = {\r\n  boolean(from, to, factor) {\r\n    return factor > 0.5 ? to : from;\r\n  },\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @param {number} factor\r\n   */\r\n  color(from, to, factor) {\r\n    const c0 = helpersColor(from || transparent);\r\n    const c1 = c0.valid && helpersColor(to || transparent);\r\n    return c1 && c1.valid\r\n      ? c1.mix(c0, factor).hexString()\r\n      : to;\r\n  },\r\n  number(from, to, factor) {\r\n    return from + (to - from) * factor;\r\n  }\r\n};\r\n\r\nexport default class Animation {\r\n  constructor(cfg, target, prop, to) {\r\n    const currentValue = target[prop];\r\n\r\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n    const from = resolve([cfg.from, currentValue, to]);\r\n\r\n    this._active = true;\r\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\r\n    this._easing = effects[cfg.easing] || effects.linear;\r\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\r\n    this._duration = this._total = Math.floor(cfg.duration);\r\n    this._loop = !!cfg.loop;\r\n    this._target = target;\r\n    this._prop = prop;\r\n    this._from = from;\r\n    this._to = to;\r\n    this._promises = undefined;\r\n  }\r\n\r\n  active() {\r\n    return this._active;\r\n  }\r\n\r\n  update(cfg, to, date) {\r\n    if (this._active) {\r\n      this._notify(false);\r\n\r\n      const currentValue = this._target[this._prop];\r\n      const elapsed = date - this._start;\r\n      const remain = this._duration - elapsed;\r\n      this._start = date;\r\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\r\n      this._total += elapsed;\r\n      this._loop = !!cfg.loop;\r\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n      this._from = resolve([cfg.from, currentValue, to]);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this._active) {\r\n      // update current evaluated value, for smoother animations\r\n      this.tick(Date.now());\r\n      this._active = false;\r\n      this._notify(false);\r\n    }\r\n  }\r\n\r\n  tick(date) {\r\n    const elapsed = date - this._start;\r\n    const duration = this._duration;\r\n    const prop = this._prop;\r\n    const from = this._from;\r\n    const loop = this._loop;\r\n    const to = this._to;\r\n    let factor;\r\n\r\n    this._active = from !== to && (loop || (elapsed < duration));\r\n\r\n    if (!this._active) {\r\n      this._target[prop] = to;\r\n      this._notify(true);\r\n      return;\r\n    }\r\n\r\n    if (elapsed < 0) {\r\n      this._target[prop] = from;\r\n      return;\r\n    }\r\n\r\n    factor = (elapsed / duration) % 2;\r\n    factor = loop && factor > 1 ? 2 - factor : factor;\r\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\r\n\r\n    this._target[prop] = this._fn(from, to, factor);\r\n  }\r\n\r\n  wait() {\r\n    const promises = this._promises || (this._promises = []);\r\n    return new Promise((res, rej) => {\r\n      promises.push({res, rej});\r\n    });\r\n  }\r\n\r\n  _notify(resolved) {\r\n    const method = resolved ? 'res' : 'rej';\r\n    const promises = this._promises || [];\r\n    for (let i = 0; i < promises.length; i++) {\r\n      promises[i][method]();\r\n    }\r\n  }\r\n}\r\n","import animator from './core.animator.js';\r\nimport Animation from './core.animation.js';\r\nimport defaults from './core.defaults.js';\r\nimport {isArray, isObject} from '../helpers/helpers.core.js';\r\n\r\nexport default class Animations {\r\n  constructor(chart, config) {\r\n    this._chart = chart;\r\n    this._properties = new Map();\r\n    this.configure(config);\r\n  }\r\n\r\n  configure(config) {\r\n    if (!isObject(config)) {\r\n      return;\r\n    }\r\n\r\n    const animationOptions = Object.keys(defaults.animation);\r\n    const animatedProps = this._properties;\r\n\r\n    Object.getOwnPropertyNames(config).forEach(key => {\r\n      const cfg = config[key];\r\n      if (!isObject(cfg)) {\r\n        return;\r\n      }\r\n      const resolved = {};\r\n      for (const option of animationOptions) {\r\n        resolved[option] = cfg[option];\r\n      }\r\n\r\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\r\n        if (prop === key || !animatedProps.has(prop)) {\r\n          animatedProps.set(prop, resolved);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Utility to handle animation of `options`.\r\n\t * @private\r\n\t */\r\n  _animateOptions(target, values) {\r\n    const newOptions = values.options;\r\n    const options = resolveTargetOptions(target, newOptions);\r\n    if (!options) {\r\n      return [];\r\n    }\r\n\r\n    const animations = this._createAnimations(options, newOptions);\r\n    if (newOptions.$shared) {\r\n      // Going to shared options:\r\n      // After all animations are done, assign the shared options object to the element\r\n      // So any new updates to the shared options are observed\r\n      awaitAll(target.options.$animations, newOptions).then(() => {\r\n        target.options = newOptions;\r\n      }, () => {\r\n        // rejected, noop\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createAnimations(target, values) {\r\n    const animatedProps = this._properties;\r\n    const animations = [];\r\n    const running = target.$animations || (target.$animations = {});\r\n    const props = Object.keys(values);\r\n    const date = Date.now();\r\n    let i;\r\n\r\n    for (i = props.length - 1; i >= 0; --i) {\r\n      const prop = props[i];\r\n      if (prop.charAt(0) === '$') {\r\n        continue;\r\n      }\r\n\r\n      if (prop === 'options') {\r\n        animations.push(...this._animateOptions(target, values));\r\n        continue;\r\n      }\r\n      const value = values[prop];\r\n      let animation = running[prop];\r\n      const cfg = animatedProps.get(prop);\r\n\r\n      if (animation) {\r\n        if (cfg && animation.active()) {\r\n          // There is an existing active animation, let's update that\r\n          animation.update(cfg, value, date);\r\n          continue;\r\n        } else {\r\n          animation.cancel();\r\n        }\r\n      }\r\n      if (!cfg || !cfg.duration) {\r\n        // not animated, set directly to new value\r\n        target[prop] = value;\r\n        continue;\r\n      }\r\n\r\n      running[prop] = animation = new Animation(cfg, target, prop, value);\r\n      animations.push(animation);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n\r\n  /**\r\n\t * Update `target` properties to new values, using configured animations\r\n\t * @param {object} target - object to update\r\n\t * @param {object} values - new target properties\r\n\t * @returns {boolean|undefined} - `true` if animations were started\r\n\t **/\r\n  update(target, values) {\r\n    if (this._properties.size === 0) {\r\n      // Nothing is animated, just apply the new values.\r\n      Object.assign(target, values);\r\n      return;\r\n    }\r\n\r\n    const animations = this._createAnimations(target, values);\r\n\r\n    if (animations.length) {\r\n      animator.add(this._chart, animations);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction awaitAll(animations, properties) {\r\n  const running = [];\r\n  const keys = Object.keys(properties);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const anim = animations[keys[i]];\r\n    if (anim && anim.active()) {\r\n      running.push(anim.wait());\r\n    }\r\n  }\r\n  // @ts-ignore\r\n  return Promise.all(running);\r\n}\r\n\r\nfunction resolveTargetOptions(target, newOptions) {\r\n  if (!newOptions) {\r\n    return;\r\n  }\r\n  let options = target.options;\r\n  if (!options) {\r\n    target.options = newOptions;\r\n    return;\r\n  }\r\n  if (options.$shared) {\r\n    // Going from shared options to distinct one:\r\n    // Create new options object containing the old shared values and start updating that.\r\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\r\n  }\r\n  return options;\r\n}\r\n","import Animations from './core.animations.js';\r\nimport defaults from './core.defaults.js';\r\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\r\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\r\nimport {createContext, sign} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('./core.scale.js').default } Scale\r\n */\r\n\r\nfunction scaleClip(scale, allowedOverflow) {\r\n  const opts = scale && scale.options || {};\r\n  const reverse = opts.reverse;\r\n  const min = opts.min === undefined ? allowedOverflow : 0;\r\n  const max = opts.max === undefined ? allowedOverflow : 0;\r\n  return {\r\n    start: reverse ? max : min,\r\n    end: reverse ? min : max\r\n  };\r\n}\r\n\r\nfunction defaultClip(xScale, yScale, allowedOverflow) {\r\n  if (allowedOverflow === false) {\r\n    return false;\r\n  }\r\n  const x = scaleClip(xScale, allowedOverflow);\r\n  const y = scaleClip(yScale, allowedOverflow);\r\n\r\n  return {\r\n    top: y.end,\r\n    right: x.end,\r\n    bottom: y.start,\r\n    left: x.start\r\n  };\r\n}\r\n\r\nfunction toClip(value) {\r\n  let t, r, b, l;\r\n\r\n  if (isObject(value)) {\r\n    t = value.top;\r\n    r = value.right;\r\n    b = value.bottom;\r\n    l = value.left;\r\n  } else {\r\n    t = r = b = l = value;\r\n  }\r\n\r\n  return {\r\n    top: t,\r\n    right: r,\r\n    bottom: b,\r\n    left: l,\r\n    disabled: value === false\r\n  };\r\n}\r\n\r\nfunction getSortedDatasetIndices(chart, filterVisible) {\r\n  const keys = [];\r\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\r\n  let i, ilen;\r\n\r\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    keys.push(metasets[i].index);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction applyStack(stack, value, dsIndex, options = {}) {\r\n  const keys = stack.keys;\r\n  const singleMode = options.mode === 'single';\r\n  let i, ilen, datasetIndex, otherValue;\r\n\r\n  if (value === null) {\r\n    return;\r\n  }\r\n\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    datasetIndex = +keys[i];\r\n    if (datasetIndex === dsIndex) {\r\n      if (options.all) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n    otherValue = stack.values[datasetIndex];\r\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\r\n      value += otherValue;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction convertObjectDataToArray(data) {\r\n  const keys = Object.keys(data);\r\n  const adata = new Array(keys.length);\r\n  let i, ilen, key;\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    key = keys[i];\r\n    adata[i] = {\r\n      x: key,\r\n      y: data[key]\r\n    };\r\n  }\r\n  return adata;\r\n}\r\n\r\nfunction isStacked(scale, meta) {\r\n  const stacked = scale && scale.options.stacked;\r\n  return stacked || (stacked === undefined && meta.stack !== undefined);\r\n}\r\n\r\nfunction getStackKey(indexScale, valueScale, meta) {\r\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\r\n}\r\n\r\nfunction getUserBounds(scale) {\r\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\r\n  return {\r\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\r\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\r\n  };\r\n}\r\n\r\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\r\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\r\n  return subStack[indexValue] || (subStack[indexValue] = {});\r\n}\r\n\r\nfunction getLastIndexInStack(stack, vScale, positive, type) {\r\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\r\n    const value = stack[meta.index];\r\n    if ((positive && value > 0) || (!positive && value < 0)) {\r\n      return meta.index;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction updateStacks(controller, parsed) {\r\n  const {chart, _cachedMeta: meta} = controller;\r\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\r\n  const {iScale, vScale, index: datasetIndex} = meta;\r\n  const iAxis = iScale.axis;\r\n  const vAxis = vScale.axis;\r\n  const key = getStackKey(iScale, vScale, meta);\r\n  const ilen = parsed.length;\r\n  let stack;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    const item = parsed[i];\r\n    const {[iAxis]: index, [vAxis]: value} = item;\r\n    const itemStacks = item._stacks || (item._stacks = {});\r\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\r\n    stack[datasetIndex] = value;\r\n\r\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\r\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\r\n  }\r\n}\r\n\r\nfunction getFirstScaleId(chart, axis) {\r\n  const scales = chart.scales;\r\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\r\n}\r\n\r\nfunction createDatasetContext(parent, index) {\r\n  return createContext(parent,\r\n    {\r\n      active: false,\r\n      dataset: undefined,\r\n      datasetIndex: index,\r\n      index,\r\n      mode: 'default',\r\n      type: 'dataset'\r\n    }\r\n  );\r\n}\r\n\r\nfunction createDataContext(parent, index, element) {\r\n  return createContext(parent, {\r\n    active: false,\r\n    dataIndex: index,\r\n    parsed: undefined,\r\n    raw: undefined,\r\n    element,\r\n    index,\r\n    mode: 'default',\r\n    type: 'data'\r\n  });\r\n}\r\n\r\nfunction clearStacks(meta, items) {\r\n  // Not using meta.index here, because it might be already updated if the dataset changed location\r\n  const datasetIndex = meta.controller.index;\r\n  const axis = meta.vScale && meta.vScale.axis;\r\n  if (!axis) {\r\n    return;\r\n  }\r\n\r\n  items = items || meta._parsed;\r\n  for (const parsed of items) {\r\n    const stacks = parsed._stacks;\r\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\r\n      return;\r\n    }\r\n    delete stacks[axis][datasetIndex];\r\n  }\r\n}\r\n\r\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\r\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\r\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\r\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\r\n\r\nexport default class DatasetController {\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {};\r\n\r\n  /**\r\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\r\n   */\r\n  static datasetElementType = null;\r\n\r\n  /**\r\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\r\n   */\r\n  static dataElementType = null;\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {number} datasetIndex\r\n\t */\r\n  constructor(chart, datasetIndex) {\r\n    this.chart = chart;\r\n    this._ctx = chart.ctx;\r\n    this.index = datasetIndex;\r\n    this._cachedDataOpts = {};\r\n    this._cachedMeta = this.getMeta();\r\n    this._type = this._cachedMeta.type;\r\n    this.options = undefined;\r\n    /** @type {boolean | object} */\r\n    this._parsing = false;\r\n    this._data = undefined;\r\n    this._objectData = undefined;\r\n    this._sharedOptions = undefined;\r\n    this._drawStart = undefined;\r\n    this._drawCount = undefined;\r\n    this.enableOptionSharing = false;\r\n    this.supportsDecimation = false;\r\n    this.$context = undefined;\r\n    this._syncList = [];\r\n    this.datasetElementType = new.target.datasetElementType;\r\n    this.dataElementType = new.target.dataElementType;\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    const meta = this._cachedMeta;\r\n    this.configure();\r\n    this.linkScales();\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n    this.addElements();\r\n\r\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\r\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\r\n    }\r\n  }\r\n\r\n  updateIndex(datasetIndex) {\r\n    if (this.index !== datasetIndex) {\r\n      clearStacks(this._cachedMeta);\r\n    }\r\n    this.index = datasetIndex;\r\n  }\r\n\r\n  linkScales() {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n\r\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\r\n\r\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\r\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\r\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\r\n    const indexAxis = meta.indexAxis;\r\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\r\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\r\n    meta.xScale = this.getScaleForId(xid);\r\n    meta.yScale = this.getScaleForId(yid);\r\n    meta.rScale = this.getScaleForId(rid);\r\n    meta.iScale = this.getScaleForId(iid);\r\n    meta.vScale = this.getScaleForId(vid);\r\n  }\r\n\r\n  getDataset() {\r\n    return this.chart.data.datasets[this.index];\r\n  }\r\n\r\n  getMeta() {\r\n    return this.chart.getDatasetMeta(this.index);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scaleID\r\n\t * @return {Scale}\r\n\t */\r\n  getScaleForId(scaleID) {\r\n    return this.chart.scales[scaleID];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getOtherScale(scale) {\r\n    const meta = this._cachedMeta;\r\n    return scale === meta.iScale\r\n      ? meta.vScale\r\n      : meta.iScale;\r\n  }\r\n\r\n  reset() {\r\n    this._update('reset');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroy() {\r\n    const meta = this._cachedMeta;\r\n    if (this._data) {\r\n      unlistenArrayEvents(this._data, this);\r\n    }\r\n    if (meta._stacked) {\r\n      clearStacks(meta);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _dataCheck() {\r\n    const dataset = this.getDataset();\r\n    const data = dataset.data || (dataset.data = []);\r\n    const _data = this._data;\r\n\r\n    // In order to correctly handle data addition/deletion animation (an thus simulate\r\n    // real-time charts), we need to monitor these data modifications and synchronize\r\n    // the internal meta data accordingly.\r\n\r\n    if (isObject(data)) {\r\n      this._data = convertObjectDataToArray(data);\r\n    } else if (_data !== data) {\r\n      if (_data) {\r\n        // This case happens when the user replaced the data array instance.\r\n        unlistenArrayEvents(_data, this);\r\n        // Discard old parsed data and stacks\r\n        const meta = this._cachedMeta;\r\n        clearStacks(meta);\r\n        meta._parsed = [];\r\n      }\r\n      if (data && Object.isExtensible(data)) {\r\n        listenArrayEvents(data, this);\r\n      }\r\n      this._syncList = [];\r\n      this._data = data;\r\n    }\r\n  }\r\n\r\n  addElements() {\r\n    const meta = this._cachedMeta;\r\n\r\n    this._dataCheck();\r\n\r\n    if (this.datasetElementType) {\r\n      meta.dataset = new this.datasetElementType();\r\n    }\r\n  }\r\n\r\n  buildOrUpdateElements(resetNewElements) {\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n    let stackChanged = false;\r\n\r\n    this._dataCheck();\r\n\r\n    // make sure cached _stacked status is current\r\n    const oldStacked = meta._stacked;\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n\r\n    // detect change in stack option\r\n    if (meta.stack !== dataset.stack) {\r\n      stackChanged = true;\r\n      // remove values from old stack\r\n      clearStacks(meta);\r\n      meta.stack = dataset.stack;\r\n    }\r\n\r\n    // Re-sync meta data in case the user replaced the data array or if we missed\r\n    // any updates and so make sure that we handle number of datapoints changing.\r\n    this._resyncElements(resetNewElements);\r\n\r\n    // if stack changed, update stack values for the whole dataset\r\n    if (stackChanged || oldStacked !== meta._stacked) {\r\n      updateStacks(this, meta._parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Merges user-supplied and default dataset-level options\r\n\t * @private\r\n\t */\r\n  configure() {\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetScopeKeys(this._type);\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\r\n    this.options = config.createResolver(scopes, this.getContext());\r\n    this._parsing = this.options.parsing;\r\n    this._cachedDataOpts = {};\r\n  }\r\n\r\n  /**\r\n\t * @param {number} start\r\n\t * @param {number} count\r\n\t */\r\n  parse(start, count) {\r\n    const {_cachedMeta: meta, _data: data} = this;\r\n    const {iScale, _stacked} = meta;\r\n    const iAxis = iScale.axis;\r\n\r\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\r\n    let prev = start > 0 && meta._parsed[start - 1];\r\n    let i, cur, parsed;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n      meta._sorted = true;\r\n      parsed = data;\r\n    } else {\r\n      if (isArray(data[start])) {\r\n        parsed = this.parseArrayData(meta, data, start, count);\r\n      } else if (isObject(data[start])) {\r\n        parsed = this.parseObjectData(meta, data, start, count);\r\n      } else {\r\n        parsed = this.parsePrimitiveData(meta, data, start, count);\r\n      }\r\n\r\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\r\n      for (i = 0; i < count; ++i) {\r\n        meta._parsed[i + start] = cur = parsed[i];\r\n        if (sorted) {\r\n          if (isNotInOrderComparedToPrev()) {\r\n            sorted = false;\r\n          }\r\n          prev = cur;\r\n        }\r\n      }\r\n      meta._sorted = sorted;\r\n    }\r\n\r\n    if (_stacked) {\r\n      updateStacks(this, parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [1,3,4]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {xScale0: 0, yScale0: 1}\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const labels = iScale.getLabels();\r\n    const singleScale = iScale === vScale;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      parsed[i] = {\r\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\r\n        [vAxis]: vScale.parse(data[index], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {x: 0, y: 1}\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(item[0], index),\r\n        y: yScale.parse(item[1], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id. _custom is optional\r\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\r\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getParsed(index) {\r\n    return this._cachedMeta._parsed[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataElement(index) {\r\n    return this._cachedMeta.data[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  applyStack(scale, parsed, mode) {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const value = parsed[scale.axis];\r\n    const stack = {\r\n      keys: getSortedDatasetIndices(chart, true),\r\n      values: parsed._stacks[scale.axis]\r\n    };\r\n    return applyStack(stack, value, meta.index, {mode});\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    const parsedValue = parsed[scale.axis];\r\n    let value = parsedValue === null ? NaN : parsedValue;\r\n    const values = stack && parsed._stacks[scale.axis];\r\n    if (stack && values) {\r\n      stack.values = values;\r\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\r\n    }\r\n    range.min = Math.min(range.min, value);\r\n    range.max = Math.max(range.max, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMinMax(scale, canStack) {\r\n    const meta = this._cachedMeta;\r\n    const _parsed = meta._parsed;\r\n    const sorted = meta._sorted && scale === meta.iScale;\r\n    const ilen = _parsed.length;\r\n    const otherScale = this._getOtherScale(scale);\r\n    const stack = createStack(canStack, meta, this.chart);\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\r\n    let i, parsed;\r\n\r\n    function _skip() {\r\n      parsed = _parsed[i];\r\n      const otherValue = parsed[otherScale.axis];\r\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\r\n    }\r\n\r\n    for (i = 0; i < ilen; ++i) {\r\n      if (_skip()) {\r\n        continue;\r\n      }\r\n      this.updateRangeFromParsed(range, scale, parsed, stack);\r\n      if (sorted) {\r\n        // if the data is sorted, we don't need to check further from this end of array\r\n        break;\r\n      }\r\n    }\r\n    if (sorted) {\r\n      // in the sorted case, find first non-skipped value from other end of array\r\n      for (i = ilen - 1; i >= 0; --i) {\r\n        if (_skip()) {\r\n          continue;\r\n        }\r\n        this.updateRangeFromParsed(range, scale, parsed, stack);\r\n        break;\r\n      }\r\n    }\r\n    return range;\r\n  }\r\n\r\n  getAllParsedValues(scale) {\r\n    const parsed = this._cachedMeta._parsed;\r\n    const values = [];\r\n    let i, ilen, value;\r\n\r\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\r\n      value = parsed[i][scale.axis];\r\n      if (isFinite(value)) {\r\n        values.push(value);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const vScale = meta.vScale;\r\n    const parsed = this.getParsed(index);\r\n    return {\r\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\r\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.update(mode || 'default');\r\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  draw() {\r\n    const ctx = this._ctx;\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const elements = meta.data || [];\r\n    const area = chart.chartArea;\r\n    const active = [];\r\n    const start = this._drawStart || 0;\r\n    const count = this._drawCount || (elements.length - start);\r\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\r\n    let i;\r\n\r\n    if (meta.dataset) {\r\n      meta.dataset.draw(ctx, area, start, count);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const element = elements[i];\r\n      if (element.hidden) {\r\n        continue;\r\n      }\r\n      if (element.active && drawActiveElementsOnTop) {\r\n        active.push(element);\r\n      } else {\r\n        element.draw(ctx, area);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < active.length; ++i) {\r\n      active[i].draw(ctx, area);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns a set of predefined style properties that should be used to represent the dataset\r\n\t * or the data if the index is specified\r\n\t * @param {number} index - data index\r\n\t * @param {boolean} [active] - true if hover\r\n\t * @return {object} style object\r\n\t */\r\n  getStyle(index, active) {\r\n    const mode = active ? 'active' : 'default';\r\n    return index === undefined && this._cachedMeta.dataset\r\n      ? this.resolveDatasetElementOptions(mode)\r\n      : this.resolveDataElementOptions(index || 0, mode);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index, active, mode) {\r\n    const dataset = this.getDataset();\r\n    let context;\r\n    if (index >= 0 && index < this._cachedMeta.data.length) {\r\n      const element = this._cachedMeta.data[index];\r\n      context = element.$context ||\r\n        (element.$context = createDataContext(this.getContext(), index, element));\r\n      context.parsed = this.getParsed(index);\r\n      context.raw = dataset.data[index];\r\n      context.index = context.dataIndex = index;\r\n    } else {\r\n      context = this.$context ||\r\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\r\n      context.dataset = dataset;\r\n      context.index = context.datasetIndex = this.index;\r\n    }\r\n\r\n    context.active = !!active;\r\n    context.mode = mode;\r\n    return context;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDatasetElementOptions(mode) {\r\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveElementOptions(elementType, mode = 'default', index) {\r\n    const active = mode === 'active';\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = elementType + '-' + mode;\r\n    const cached = cache[cacheKey];\r\n    const sharing = this.enableOptionSharing && defined(index);\r\n    if (cached) {\r\n      return cloneIfNotShared(cached, sharing);\r\n    }\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\r\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n    const names = Object.keys(defaults.elements[elementType]);\r\n    // context is provided as a function, and is called only if needed,\r\n    // so we don't create a context for each element if not needed.\r\n    const context = () => this.getContext(index, active);\r\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\r\n\r\n    if (values.$shared) {\r\n      // `$shared` indicates this set of options can be shared between multiple elements.\r\n      // Sharing is used to reduce number of properties to change during animation.\r\n      values.$shared = sharing;\r\n\r\n      // We cache options by `mode`, which can be 'active' for example. This enables us\r\n      // to have the 'active' element options and 'default' options to switch between\r\n      // when interacting.\r\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations(index, transition, active) {\r\n    const chart = this.chart;\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = `animation-${transition}`;\r\n    const cached = cache[cacheKey];\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    let options;\r\n    if (chart.options.animation !== false) {\r\n      const config = this.chart.config;\r\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\r\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\r\n    }\r\n    const animations = new Animations(chart, options && options.animations);\r\n    if (options && options._cacheable) {\r\n      cache[cacheKey] = Object.freeze(animations);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the options object shared between elements\r\n\t * @protected\r\n\t */\r\n  getSharedOptions(options) {\r\n    if (!options.$shared) {\r\n      return;\r\n    }\r\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\r\n  }\r\n\r\n  /**\r\n\t * Utility for determining if `options` should be included in the updated properties\r\n\t * @protected\r\n\t */\r\n  includeOptions(mode, sharedOptions) {\r\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\r\n  }\r\n\r\n  /**\r\n   * @todo v4, rename to getSharedOptions and remove excess functions\r\n   */\r\n  _getSharedOptions(start, mode) {\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const previouslySharedOptions = this._sharedOptions;\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n    return {sharedOptions, includeOptions};\r\n  }\r\n\r\n  /**\r\n\t * Utility for updating an element with new properties, using animations when appropriate.\r\n\t * @protected\r\n\t */\r\n  updateElement(element, index, properties, mode) {\r\n    if (isDirectUpdateMode(mode)) {\r\n      Object.assign(element, properties);\r\n    } else {\r\n      this._resolveAnimations(index, mode).update(element, properties);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\r\n\t * @protected\r\n\t */\r\n  updateSharedOptions(sharedOptions, mode, newOptions) {\r\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\r\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setStyle(element, index, mode, active) {\r\n    element.active = active;\r\n    const options = this.getStyle(index, active);\r\n    this._resolveAnimations(index, mode, active).update(element, {\r\n      // When going from active to inactive, we need to update to the shared options.\r\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\r\n      options: (!active && this.getSharedOptions(options)) || options\r\n    });\r\n  }\r\n\r\n  removeHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', false);\r\n  }\r\n\r\n  setHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', false);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resyncElements(resetNewElements) {\r\n    const data = this._data;\r\n    const elements = this._cachedMeta.data;\r\n\r\n    // Apply changes detected through array listeners\r\n    for (const [method, arg1, arg2] of this._syncList) {\r\n      this[method](arg1, arg2);\r\n    }\r\n    this._syncList = [];\r\n\r\n    const numMeta = elements.length;\r\n    const numData = data.length;\r\n    const count = Math.min(numData, numMeta);\r\n\r\n    if (count) {\r\n      // TODO: It is not optimal to always parse the old data\r\n      // This is done because we are not detecting direct assignments:\r\n      // chart.data.datasets[0].data[5] = 10;\r\n      // chart.data.datasets[0].data[5].y = 10;\r\n      this.parse(0, count);\r\n    }\r\n\r\n    if (numData > numMeta) {\r\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\r\n    } else if (numData < numMeta) {\r\n      this._removeElements(numData, numMeta - numData);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _insertElements(start, count, resetNewElements = true) {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data;\r\n    const end = start + count;\r\n    let i;\r\n\r\n    const move = (arr) => {\r\n      arr.length += count;\r\n      for (i = arr.length - 1; i >= end; i--) {\r\n        arr[i] = arr[i - count];\r\n      }\r\n    };\r\n    move(data);\r\n\r\n    for (i = start; i < end; ++i) {\r\n      data[i] = new this.dataElementType();\r\n    }\r\n\r\n    if (this._parsing) {\r\n      move(meta._parsed);\r\n    }\r\n    this.parse(start, count);\r\n\r\n    if (resetNewElements) {\r\n      this.updateElements(data, start, count, 'reset');\r\n    }\r\n  }\r\n\r\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeElements(start, count) {\r\n    const meta = this._cachedMeta;\r\n    if (this._parsing) {\r\n      const removed = meta._parsed.splice(start, count);\r\n      if (meta._stacked) {\r\n        clearStacks(meta, removed);\r\n      }\r\n    }\r\n    meta.data.splice(start, count);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n   */\r\n  _sync(args) {\r\n    if (this._parsing) {\r\n      this._syncList.push(args);\r\n    } else {\r\n      const [method, arg1, arg2] = args;\r\n      this[method](arg1, arg2);\r\n    }\r\n    this.chart._dataChanges.push([this.index, ...args]);\r\n  }\r\n\r\n  _onDataPush() {\r\n    const count = arguments.length;\r\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\r\n  }\r\n\r\n  _onDataPop() {\r\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\r\n  }\r\n\r\n  _onDataShift() {\r\n    this._sync(['_removeElements', 0, 1]);\r\n  }\r\n\r\n  _onDataSplice(start, count) {\r\n    if (count) {\r\n      this._sync(['_removeElements', start, count]);\r\n    }\r\n    const newCount = arguments.length - 2;\r\n    if (newCount) {\r\n      this._sync(['_insertElements', start, newCount]);\r\n    }\r\n  }\r\n\r\n  _onDataUnshift() {\r\n    this._sync(['_insertElements', 0, arguments.length]);\r\n  }\r\n}\r\n","import type {AnyObject} from '../../types/basic.js';\r\nimport type {Point} from '../../types/geometric.js';\r\nimport type {Animation} from '../../types/animation.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\n\r\nexport default class Element<T = AnyObject, O = AnyObject> {\r\n\r\n  static defaults = {};\r\n  static defaultRoutes = undefined;\r\n\r\n  x: number;\r\n  y: number;\r\n  active = false;\r\n  options: O;\r\n  $animations: Record<keyof T, Animation>;\r\n\r\n  tooltipPosition(useFinalPosition: boolean): Point {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y} as Point;\r\n  }\r\n\r\n  hasValue() {\r\n    return isNumber(this.x) && isNumber(this.y);\r\n  }\r\n\r\n  /**\r\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\r\n   * @param props - properties to get\r\n   * @param [final] - get the final value (animation target)\r\n   */\r\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\r\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\r\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\r\n    const anims = this.$animations;\r\n    if (!final || !anims) {\r\n      // let's not create an object, if not needed\r\n      return this as Record<string, unknown>;\r\n    }\r\n    const ret: Record<string, unknown> = {};\r\n    props.forEach((prop) => {\r\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {_factorize} from '../helpers/helpers.math.js';\r\n\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\r\n * @param {import('./core.scale.js').default} scale\r\n * @param {Tick[]} ticks\r\n * @return {Tick[]}\r\n * @private\r\n */\r\nexport function autoSkip(scale, ticks) {\r\n  const tickOpts = scale.options.ticks;\r\n  const determinedMaxTicks = determineMaxTicks(scale);\r\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\r\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\r\n  const numMajorIndices = majorIndices.length;\r\n  const first = majorIndices[0];\r\n  const last = majorIndices[numMajorIndices - 1];\r\n  const newTicks = [];\r\n\r\n  // If there are too many major ticks to display them all\r\n  if (numMajorIndices > ticksLimit) {\r\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\r\n    return newTicks;\r\n  }\r\n\r\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\r\n\r\n  if (numMajorIndices > 0) {\r\n    let i, ilen;\r\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\r\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\r\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\r\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\r\n    }\r\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\r\n    return newTicks;\r\n  }\r\n  skip(ticks, newTicks, spacing);\r\n  return newTicks;\r\n}\r\n\r\nfunction determineMaxTicks(scale) {\r\n  const offset = scale.options.offset;\r\n  const tickLength = scale._tickSize();\r\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\r\n  const maxChart = scale._maxLength / tickLength;\r\n  return Math.floor(Math.min(maxScale, maxChart));\r\n}\r\n\r\n/**\r\n * @param {number[]} majorIndices\r\n * @param {Tick[]} ticks\r\n * @param {number} ticksLimit\r\n */\r\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\r\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\r\n  const spacing = ticks.length / ticksLimit;\r\n\r\n  // If the major ticks are evenly spaced apart, place the minor ticks\r\n  // so that they divide the major ticks into even chunks\r\n  if (!evenMajorSpacing) {\r\n    return Math.max(spacing, 1);\r\n  }\r\n\r\n  const factors = _factorize(evenMajorSpacing);\r\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\r\n    const factor = factors[i];\r\n    if (factor > spacing) {\r\n      return factor;\r\n    }\r\n  }\r\n  return Math.max(spacing, 1);\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n */\r\nfunction getMajorIndices(ticks) {\r\n  const result = [];\r\n  let i, ilen;\r\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n    if (ticks[i].major) {\r\n      result.push(i);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number[]} majorIndices\r\n * @param {number} spacing\r\n */\r\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\r\n  let count = 0;\r\n  let next = majorIndices[0];\r\n  let i;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  for (i = 0; i < ticks.length; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = majorIndices[count * spacing];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number} spacing\r\n * @param {number} [majorStart]\r\n * @param {number} [majorEnd]\r\n */\r\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\r\n  const start = valueOrDefault(majorStart, 0);\r\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\r\n  let count = 0;\r\n  let length, i, next;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  if (majorEnd) {\r\n    length = majorEnd - majorStart;\r\n    spacing = length / Math.floor(length / spacing);\r\n  }\r\n\r\n  next = start;\r\n\r\n  while (next < 0) {\r\n    count++;\r\n    next = Math.round(start + count * spacing);\r\n  }\r\n\r\n  for (i = Math.max(start, 0); i < end; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = Math.round(start + count * spacing);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number[]} arr\r\n */\r\nfunction getEvenSpacing(arr) {\r\n  const len = arr.length;\r\n  let i, diff;\r\n\r\n  if (len < 2) {\r\n    return false;\r\n  }\r\n\r\n  for (diff = arr[0], i = 1; i < len; ++i) {\r\n    if (arr[i] - arr[i - 1] !== diff) {\r\n      return false;\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n","import Element from './core.element.js';\r\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\r\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\r\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\r\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\r\nimport {autoSkip} from './core.scale.autoskip.js';\r\n\r\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\r\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a new array containing numItems from arr\r\n * @param {any[]} arr\r\n * @param {number} numItems\r\n */\r\nfunction sample(arr, numItems) {\r\n  const result = [];\r\n  const increment = arr.length / numItems;\r\n  const len = arr.length;\r\n  let i = 0;\r\n\r\n  for (; i < len; i += increment) {\r\n    result.push(arr[Math.floor(i)]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @param {boolean} offsetGridLines\r\n */\r\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\r\n  const length = scale.ticks.length;\r\n  const validIndex = Math.min(index, length - 1);\r\n  const start = scale._startPixel;\r\n  const end = scale._endPixel;\r\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\r\n  let lineValue = scale.getPixelForTick(validIndex);\r\n  let offset;\r\n\r\n  if (offsetGridLines) {\r\n    if (length === 1) {\r\n      offset = Math.max(lineValue - start, end - lineValue);\r\n    } else if (index === 0) {\r\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\r\n    } else {\r\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\r\n    }\r\n    lineValue += validIndex < index ? offset : -offset;\r\n\r\n    // Return undefined if the pixel is out of the range\r\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\r\n      return;\r\n    }\r\n  }\r\n  return lineValue;\r\n}\r\n\r\n/**\r\n * @param {object} caches\r\n * @param {number} length\r\n */\r\nfunction garbageCollect(caches, length) {\r\n  each(caches, (cache) => {\r\n    const gc = cache.gc;\r\n    const gcLen = gc.length / 2;\r\n    let i;\r\n    if (gcLen > length) {\r\n      for (i = 0; i < gcLen; ++i) {\r\n        delete cache.data[gc[i]];\r\n      }\r\n      gc.splice(0, gcLen);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTickMarkLength(options) {\r\n  return options.drawTicks ? options.tickLength : 0;\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTitleHeight(options, fallback) {\r\n  if (!options.display) {\r\n    return 0;\r\n  }\r\n\r\n  const font = toFont(options.font, fallback);\r\n  const padding = toPadding(options.padding);\r\n  const lines = isArray(options.text) ? options.text.length : 1;\r\n\r\n  return (lines * font.lineHeight) + padding.height;\r\n}\r\n\r\nfunction createScaleContext(parent, scale) {\r\n  return createContext(parent, {\r\n    scale,\r\n    type: 'scale'\r\n  });\r\n}\r\n\r\nfunction createTickContext(parent, index, tick) {\r\n  return createContext(parent, {\r\n    tick,\r\n    index,\r\n    type: 'tick'\r\n  });\r\n}\r\n\r\nfunction titleAlign(align, position, reverse) {\r\n  let ret = _toLeftRightCenter(align);\r\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\r\n    ret = reverseAlign(ret);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction titleArgs(scale, offset, position, align) {\r\n  const {top, left, bottom, right, chart} = scale;\r\n  const {chartArea, scales} = chart;\r\n  let rotation = 0;\r\n  let maxWidth, titleX, titleY;\r\n  const height = bottom - top;\r\n  const width = right - left;\r\n\r\n  if (scale.isHorizontal()) {\r\n    titleX = _alignStartEnd(align, left, right);\r\n\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\r\n    } else if (position === 'center') {\r\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\r\n    } else {\r\n      titleY = offsetFromEdge(scale, position, offset);\r\n    }\r\n    maxWidth = right - left;\r\n  } else {\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\r\n    } else if (position === 'center') {\r\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\r\n    } else {\r\n      titleX = offsetFromEdge(scale, position, offset);\r\n    }\r\n    titleY = _alignStartEnd(align, bottom, top);\r\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\r\n  }\r\n  return {titleX, titleY, maxWidth, rotation};\r\n}\r\n\r\nexport default class Scale extends Element {\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    /** @type {string} */\r\n    this.id = cfg.id;\r\n    /** @type {string} */\r\n    this.type = cfg.type;\r\n    /** @type {any} */\r\n    this.options = undefined;\r\n    /** @type {CanvasRenderingContext2D} */\r\n    this.ctx = cfg.ctx;\r\n    /** @type {Chart} */\r\n    this.chart = cfg.chart;\r\n\r\n    // implements box\r\n    /** @type {number} */\r\n    this.top = undefined;\r\n    /** @type {number} */\r\n    this.bottom = undefined;\r\n    /** @type {number} */\r\n    this.left = undefined;\r\n    /** @type {number} */\r\n    this.right = undefined;\r\n    /** @type {number} */\r\n    this.width = undefined;\r\n    /** @type {number} */\r\n    this.height = undefined;\r\n    this._margins = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    };\r\n    /** @type {number} */\r\n    this.maxWidth = undefined;\r\n    /** @type {number} */\r\n    this.maxHeight = undefined;\r\n    /** @type {number} */\r\n    this.paddingTop = undefined;\r\n    /** @type {number} */\r\n    this.paddingBottom = undefined;\r\n    /** @type {number} */\r\n    this.paddingLeft = undefined;\r\n    /** @type {number} */\r\n    this.paddingRight = undefined;\r\n\r\n    // scale-specific properties\r\n    /** @type {string=} */\r\n    this.axis = undefined;\r\n    /** @type {number=} */\r\n    this.labelRotation = undefined;\r\n    this.min = undefined;\r\n    this.max = undefined;\r\n    this._range = undefined;\r\n    /** @type {Tick[]} */\r\n    this.ticks = [];\r\n    /** @type {object[]|null} */\r\n    this._gridLineItems = null;\r\n    /** @type {object[]|null} */\r\n    this._labelItems = null;\r\n    /** @type {object|null} */\r\n    this._labelSizes = null;\r\n    this._length = 0;\r\n    this._maxLength = 0;\r\n    this._longestTextCache = {};\r\n    /** @type {number} */\r\n    this._startPixel = undefined;\r\n    /** @type {number} */\r\n    this._endPixel = undefined;\r\n    this._reversePixels = false;\r\n    this._userMax = undefined;\r\n    this._userMin = undefined;\r\n    this._suggestedMax = undefined;\r\n    this._suggestedMin = undefined;\r\n    this._ticksLength = 0;\r\n    this._borderValue = 0;\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @param {any} options\r\n\t * @since 3.0\r\n\t */\r\n  init(options) {\r\n    this.options = options.setContext(this.getContext());\r\n\r\n    this.axis = options.axis;\r\n\r\n    // parse min/max value, so we can properly determine min/max for other scales\r\n    this._userMin = this.parse(options.min);\r\n    this._userMax = this.parse(options.max);\r\n    this._suggestedMin = this.parse(options.suggestedMin);\r\n    this._suggestedMax = this.parse(options.suggestedMax);\r\n  }\r\n\r\n  /**\r\n\t * Parse a supported input value to internal representation.\r\n\t * @param {*} raw\r\n\t * @param {number} [index]\r\n\t * @since 3.0\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    return raw;\r\n  }\r\n\r\n  /**\r\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getUserBounds() {\r\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\r\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\r\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\r\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\r\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\r\n    return {\r\n      min: finiteOrDefault(_userMin, _suggestedMin),\r\n      max: finiteOrDefault(_userMax, _suggestedMax),\r\n      minDefined: isFinite(_userMin),\r\n      maxDefined: isFinite(_userMax)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} canStack\r\n\t * @return {{min: number, max: number}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getMinMax(canStack) {\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n    let range;\r\n\r\n    if (minDefined && maxDefined) {\r\n      return {min, max};\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      range = metas[i].controller.getMinMax(this, canStack);\r\n      if (!minDefined) {\r\n        min = Math.min(min, range.min);\r\n      }\r\n      if (!maxDefined) {\r\n        max = Math.max(max, range.max);\r\n      }\r\n    }\r\n\r\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\r\n    min = maxDefined && min > max ? max : min;\r\n    max = minDefined && min > max ? min : max;\r\n\r\n    return {\r\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\r\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Get the padding needed for the scale\r\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\r\n\t * @private\r\n\t */\r\n  getPadding() {\r\n    return {\r\n      left: this.paddingLeft || 0,\r\n      top: this.paddingTop || 0,\r\n      right: this.paddingRight || 0,\r\n      bottom: this.paddingBottom || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Returns the scale tick objects\r\n\t * @return {Tick[]}\r\n\t * @since 2.7\r\n\t */\r\n  getTicks() {\r\n    return this.ticks;\r\n  }\r\n\r\n  /**\r\n\t * @return {string[]}\r\n\t */\r\n  getLabels() {\r\n    const data = this.chart.data;\r\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\r\n  }\r\n\r\n  // When a new layout is created, reset the data limits cache\r\n  beforeLayout() {\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n  }\r\n\r\n  // These methods are ordered by lifecycle. Utilities then follow.\r\n  // Any function defined here is inherited by all scale types.\r\n  // Any function can be extended by the scale type\r\n\r\n  beforeUpdate() {\r\n    call(this.options.beforeUpdate, [this]);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} maxWidth - the max width in pixels\r\n\t * @param {number} maxHeight - the max height in pixels\r\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\r\n\t *   This space comes from two sources:\r\n\t *     - padding - space that's required to show the labels at the edges of the scale\r\n\t *     - thickness of scales or legends in another orientation\r\n\t */\r\n  update(maxWidth, maxHeight, margins) {\r\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\r\n    const sampleSize = tickOpts.sampleSize;\r\n\r\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\r\n    this.beforeUpdate();\r\n\r\n    // Absorb the master measurements\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins = Object.assign({\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }, margins);\r\n\r\n    this.ticks = null;\r\n    this._labelSizes = null;\r\n    this._gridLineItems = null;\r\n    this._labelItems = null;\r\n\r\n    // Dimensions\r\n    this.beforeSetDimensions();\r\n    this.setDimensions();\r\n    this.afterSetDimensions();\r\n\r\n    this._maxLength = this.isHorizontal()\r\n      ? this.width + margins.left + margins.right\r\n      : this.height + margins.top + margins.bottom;\r\n\r\n    // Data min/max\r\n    if (!this._dataLimitsCached) {\r\n      this.beforeDataLimits();\r\n      this.determineDataLimits();\r\n      this.afterDataLimits();\r\n      this._range = _addGrace(this, grace, beginAtZero);\r\n      this._dataLimitsCached = true;\r\n    }\r\n\r\n    this.beforeBuildTicks();\r\n\r\n    this.ticks = this.buildTicks() || [];\r\n\r\n    // Allow modification of ticks in callback.\r\n    this.afterBuildTicks();\r\n\r\n    // Compute tick rotation and fit using a sampled subset of labels\r\n    // We generally don't need to compute the size of every single label for determining scale size\r\n    const samplingEnabled = sampleSize < this.ticks.length;\r\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\r\n\r\n    // configure is called twice, once here, once from core.controller.updateLayout.\r\n    // Here we haven't been positioned yet, but dimensions are correct.\r\n    // Variables set in configure are needed for calculateLabelRotation, and\r\n    // it's ok that coordinates are not correct there, only dimensions matter.\r\n    this.configure();\r\n\r\n    // Tick Rotation\r\n    this.beforeCalculateLabelRotation();\r\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\r\n    this.afterCalculateLabelRotation();\r\n\r\n    // Auto-skip\r\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\r\n      this.ticks = autoSkip(this, this.ticks);\r\n      this._labelSizes = null;\r\n      this.afterAutoSkip();\r\n    }\r\n\r\n    if (samplingEnabled) {\r\n      // Generate labels using all non-skipped ticks\r\n      this._convertTicksToLabels(this.ticks);\r\n    }\r\n\r\n    this.beforeFit();\r\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\r\n    this.afterFit();\r\n\r\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\r\n\r\n    this.afterUpdate();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    let reversePixels = this.options.reverse;\r\n    let startPixel, endPixel;\r\n\r\n    if (this.isHorizontal()) {\r\n      startPixel = this.left;\r\n      endPixel = this.right;\r\n    } else {\r\n      startPixel = this.top;\r\n      endPixel = this.bottom;\r\n      // by default vertical scales are from bottom to top, so pixels are reversed\r\n      reversePixels = !reversePixels;\r\n    }\r\n    this._startPixel = startPixel;\r\n    this._endPixel = endPixel;\r\n    this._reversePixels = reversePixels;\r\n    this._length = endPixel - startPixel;\r\n    this._alignToPixels = this.options.alignToPixels;\r\n  }\r\n\r\n  afterUpdate() {\r\n    call(this.options.afterUpdate, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeSetDimensions() {\r\n    call(this.options.beforeSetDimensions, [this]);\r\n  }\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    if (this.isHorizontal()) {\r\n      // Reset position before calculating rotation\r\n      this.width = this.maxWidth;\r\n      this.left = 0;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n\r\n      // Reset position before calculating rotation\r\n      this.top = 0;\r\n      this.bottom = this.height;\r\n    }\r\n\r\n    // Reset padding\r\n    this.paddingLeft = 0;\r\n    this.paddingTop = 0;\r\n    this.paddingRight = 0;\r\n    this.paddingBottom = 0;\r\n  }\r\n  afterSetDimensions() {\r\n    call(this.options.afterSetDimensions, [this]);\r\n  }\r\n\r\n  _callHooks(name) {\r\n    this.chart.notifyPlugins(name, this.getContext());\r\n    call(this.options[name], [this]);\r\n  }\r\n\r\n  // Data limits\r\n  beforeDataLimits() {\r\n    this._callHooks('beforeDataLimits');\r\n  }\r\n  determineDataLimits() {}\r\n  afterDataLimits() {\r\n    this._callHooks('afterDataLimits');\r\n  }\r\n\r\n  //\r\n  beforeBuildTicks() {\r\n    this._callHooks('beforeBuildTicks');\r\n  }\r\n  /**\r\n\t * @return {object[]} the ticks\r\n\t */\r\n  buildTicks() {\r\n    return [];\r\n  }\r\n  afterBuildTicks() {\r\n    this._callHooks('afterBuildTicks');\r\n  }\r\n\r\n  beforeTickToLabelConversion() {\r\n    call(this.options.beforeTickToLabelConversion, [this]);\r\n  }\r\n  /**\r\n\t * Convert ticks to label strings\r\n\t * @param {Tick[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    const tickOpts = this.options.ticks;\r\n    let i, ilen, tick;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      tick = ticks[i];\r\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\r\n    }\r\n  }\r\n  afterTickToLabelConversion() {\r\n    call(this.options.afterTickToLabelConversion, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeCalculateLabelRotation() {\r\n    call(this.options.beforeCalculateLabelRotation, [this]);\r\n  }\r\n  calculateLabelRotation() {\r\n    const options = this.options;\r\n    const tickOpts = options.ticks;\r\n    const numTicks = this.ticks.length;\r\n    const minRotation = tickOpts.minRotation || 0;\r\n    const maxRotation = tickOpts.maxRotation;\r\n    let labelRotation = minRotation;\r\n    let tickWidth, maxHeight, maxLabelDiagonal;\r\n\r\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\r\n      this.labelRotation = minRotation;\r\n      return;\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const maxLabelWidth = labelSizes.widest.width;\r\n    const maxLabelHeight = labelSizes.highest.height;\r\n\r\n    // Estimate the width of each grid based on the canvas width, the maximum\r\n    // label width and the number of tick intervals\r\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\r\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\r\n\r\n    // Allow 3 pixels x2 padding either side for label readability\r\n    if (maxLabelWidth + 6 > tickWidth) {\r\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\r\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\r\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\r\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\r\n      labelRotation = toDegrees(Math.min(\r\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\r\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\r\n      ));\r\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\r\n    }\r\n\r\n    this.labelRotation = labelRotation;\r\n  }\r\n  afterCalculateLabelRotation() {\r\n    call(this.options.afterCalculateLabelRotation, [this]);\r\n  }\r\n  afterAutoSkip() {}\r\n\r\n  //\r\n\r\n  beforeFit() {\r\n    call(this.options.beforeFit, [this]);\r\n  }\r\n  fit() {\r\n    // Reset\r\n    const minSize = {\r\n      width: 0,\r\n      height: 0\r\n    };\r\n\r\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\r\n    const display = this._isVisible();\r\n    const isHorizontal = this.isHorizontal();\r\n\r\n    if (display) {\r\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\r\n      if (isHorizontal) {\r\n        minSize.width = this.maxWidth;\r\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\r\n      } else {\r\n        minSize.height = this.maxHeight; // fill all the height\r\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\r\n      }\r\n\r\n      // Don't bother fitting the ticks if we are not showing the labels\r\n      if (tickOpts.display && this.ticks.length) {\r\n        const {first, last, widest, highest} = this._getLabelSizes();\r\n        const tickPadding = tickOpts.padding * 2;\r\n        const angleRadians = toRadians(this.labelRotation);\r\n        const cos = Math.cos(angleRadians);\r\n        const sin = Math.sin(angleRadians);\r\n\r\n        if (isHorizontal) {\r\n        // A horizontal axis is more constrained by the height.\r\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\r\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\r\n        } else {\r\n        // A vertical axis is more constrained by the width. Labels are the\r\n        // dominant factor here, so get that length first and account for padding\r\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\r\n\r\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\r\n        }\r\n        this._calculatePadding(first, last, sin, cos);\r\n      }\r\n    }\r\n\r\n    this._handleMargins();\r\n\r\n    if (isHorizontal) {\r\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\r\n      this.height = minSize.height;\r\n    } else {\r\n      this.width = minSize.width;\r\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\r\n    }\r\n  }\r\n\r\n  _calculatePadding(first, last, sin, cos) {\r\n    const {ticks: {align, padding}, position} = this.options;\r\n    const isRotated = this.labelRotation !== 0;\r\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\r\n\r\n    if (this.isHorizontal()) {\r\n      const offsetLeft = this.getPixelForTick(0) - this.left;\r\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\r\n      let paddingLeft = 0;\r\n      let paddingRight = 0;\r\n\r\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\r\n      // which means that the right padding is dominated by the font height\r\n      if (isRotated) {\r\n        if (labelsBelowTicks) {\r\n          paddingLeft = cos * first.width;\r\n          paddingRight = sin * last.height;\r\n        } else {\r\n          paddingLeft = sin * first.height;\r\n          paddingRight = cos * last.width;\r\n        }\r\n      } else if (align === 'start') {\r\n        paddingRight = last.width;\r\n      } else if (align === 'end') {\r\n        paddingLeft = first.width;\r\n      } else if (align !== 'inner') {\r\n        paddingLeft = first.width / 2;\r\n        paddingRight = last.width / 2;\r\n      }\r\n\r\n      // Adjust padding taking into account changes in offsets\r\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\r\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\r\n    } else {\r\n      let paddingTop = last.height / 2;\r\n      let paddingBottom = first.height / 2;\r\n\r\n      if (align === 'start') {\r\n        paddingTop = 0;\r\n        paddingBottom = first.height;\r\n      } else if (align === 'end') {\r\n        paddingTop = last.height;\r\n        paddingBottom = 0;\r\n      }\r\n\r\n      this.paddingTop = paddingTop + padding;\r\n      this.paddingBottom = paddingBottom + padding;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle margins and padding interactions\r\n\t * @private\r\n\t */\r\n  _handleMargins() {\r\n    if (this._margins) {\r\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\r\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\r\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\r\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\r\n    }\r\n  }\r\n\r\n  afterFit() {\r\n    call(this.options.afterFit, [this]);\r\n  }\r\n\r\n  // Shared Methods\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isHorizontal() {\r\n    const {axis, position} = this.options;\r\n    return position === 'top' || position === 'bottom' || axis === 'x';\r\n  }\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isFullSize() {\r\n    return this.options.fullSize;\r\n  }\r\n\r\n  /**\r\n\t * @param {Tick[]} ticks\r\n\t * @private\r\n\t */\r\n  _convertTicksToLabels(ticks) {\r\n    this.beforeTickToLabelConversion();\r\n\r\n    this.generateTickLabels(ticks);\r\n\r\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\r\n    let i, ilen;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      if (isNullOrUndef(ticks[i].label)) {\r\n        ticks.splice(i, 1);\r\n        ilen--;\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this.afterTickToLabelConversion();\r\n  }\r\n\r\n  /**\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _getLabelSizes() {\r\n    let labelSizes = this._labelSizes;\r\n\r\n    if (!labelSizes) {\r\n      const sampleSize = this.options.ticks.sampleSize;\r\n      let ticks = this.ticks;\r\n      if (sampleSize < ticks.length) {\r\n        ticks = sample(ticks, sampleSize);\r\n      }\r\n\r\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\r\n    }\r\n\r\n    return labelSizes;\r\n  }\r\n\r\n  /**\r\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\r\n\t * labels where offset indicates the anchor point offset from the top in pixels.\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _computeLabelSizes(ticks, length) {\r\n    const {ctx, _longestTextCache: caches} = this;\r\n    const widths = [];\r\n    const heights = [];\r\n    let widestLabelSize = 0;\r\n    let highestLabelSize = 0;\r\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n      label = ticks[i].label;\r\n      tickFont = this._resolveTickFontOptions(i);\r\n      ctx.font = fontString = tickFont.string;\r\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\r\n      lineHeight = tickFont.lineHeight;\r\n      width = height = 0;\r\n      // Undefined labels and arrays should not be measured\r\n      if (!isNullOrUndef(label) && !isArray(label)) {\r\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\r\n        height = lineHeight;\r\n      } else if (isArray(label)) {\r\n        // if it is an array let's measure each element\r\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\r\n          nestedLabel = label[j];\r\n          // Undefined labels and arrays should not be measured\r\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\r\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\r\n            height += lineHeight;\r\n          }\r\n        }\r\n      }\r\n      widths.push(width);\r\n      heights.push(height);\r\n      widestLabelSize = Math.max(width, widestLabelSize);\r\n      highestLabelSize = Math.max(height, highestLabelSize);\r\n    }\r\n    garbageCollect(caches, length);\r\n\r\n    const widest = widths.indexOf(widestLabelSize);\r\n    const highest = heights.indexOf(highestLabelSize);\r\n\r\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\r\n\r\n    return {\r\n      first: valueAt(0),\r\n      last: valueAt(length - 1),\r\n      widest: valueAt(widest),\r\n      highest: valueAt(highest),\r\n      widths,\r\n      heights,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Used to get the label to display in the tooltip for the given value\r\n\t * @param {*} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value;\r\n  }\r\n\r\n  /**\r\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {*} value\r\n\t * @param {number} [index]\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\r\n    return NaN;\r\n  }\r\n\r\n  /**\r\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} pixel\r\n\t * @return {*}\r\n\t */\r\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Returns the location of the tick at the given index\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} index\r\n\t * @return {number}\r\n\t */\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the pixel location of a percentage of scale\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} decimal\r\n\t * @return {number}\r\n\t */\r\n  getPixelForDecimal(decimal) {\r\n    if (this._reversePixels) {\r\n      decimal = 1 - decimal;\r\n    }\r\n\r\n    const pixel = this._startPixel + decimal * this._length;\r\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForPixel(pixel) {\r\n    const decimal = (pixel - this._startPixel) / this._length;\r\n    return this._reversePixels ? 1 - decimal : decimal;\r\n  }\r\n\r\n  /**\r\n\t * Returns the pixel for the minimum chart value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @return {number}\r\n\t */\r\n  getBasePixel() {\r\n    return this.getPixelForValue(this.getBaseValue());\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t */\r\n  getBaseValue() {\r\n    const {min, max} = this;\r\n\r\n    return min < 0 && max < 0 ? max :\r\n      min > 0 && max > 0 ? min :\r\n      0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index) {\r\n    const ticks = this.ticks || [];\r\n\r\n    if (index >= 0 && index < ticks.length) {\r\n      const tick = ticks[index];\r\n      return tick.$context ||\r\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\r\n    }\r\n    return this.$context ||\r\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _tickSize() {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    // Calculate space needed by label in axis direction.\r\n    const rot = toRadians(this.labelRotation);\r\n    const cos = Math.abs(Math.cos(rot));\r\n    const sin = Math.abs(Math.sin(rot));\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const padding = optionTicks.autoSkipPadding || 0;\r\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\r\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\r\n\r\n    // Calculate space needed for 1 tick in axis direction.\r\n    return this.isHorizontal()\r\n      ? h * cos > w * sin ? w / cos : h / sin\r\n      : h * sin < w * cos ? h / cos : w / sin;\r\n  }\r\n\r\n  /**\r\n\t * @return {boolean}\r\n\t * @private\r\n\t */\r\n  _isVisible() {\r\n    const display = this.options.display;\r\n\r\n    if (display !== 'auto') {\r\n      return !!display;\r\n    }\r\n\r\n    return this.getMatchingVisibleMetas().length > 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeGridLineItems(chartArea) {\r\n    const axis = this.axis;\r\n    const chart = this.chart;\r\n    const options = this.options;\r\n    const {grid, position, border} = options;\r\n    const offset = grid.offset;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const ticksLength = ticks.length + (offset ? 1 : 0);\r\n    const tl = getTickMarkLength(grid);\r\n    const items = [];\r\n\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\r\n    const axisHalfWidth = axisWidth / 2;\r\n    const alignBorderValue = function(pixel) {\r\n      return _alignPixel(chart, pixel, axisWidth);\r\n    };\r\n    let borderValue, i, lineValue, alignedLineValue;\r\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\r\n\r\n    if (position === 'top') {\r\n      borderValue = alignBorderValue(this.bottom);\r\n      ty1 = this.bottom - tl;\r\n      ty2 = borderValue - axisHalfWidth;\r\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\r\n      y2 = chartArea.bottom;\r\n    } else if (position === 'bottom') {\r\n      borderValue = alignBorderValue(this.top);\r\n      y1 = chartArea.top;\r\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = this.top + tl;\r\n    } else if (position === 'left') {\r\n      borderValue = alignBorderValue(this.right);\r\n      tx1 = this.right - tl;\r\n      tx2 = borderValue - axisHalfWidth;\r\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\r\n      x2 = chartArea.right;\r\n    } else if (position === 'right') {\r\n      borderValue = alignBorderValue(this.left);\r\n      x1 = chartArea.left;\r\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\r\n      tx1 = borderValue + axisHalfWidth;\r\n      tx2 = this.left + tl;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      y1 = chartArea.top;\r\n      y2 = chartArea.bottom;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = ty1 + tl;\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      tx1 = borderValue - axisHalfWidth;\r\n      tx2 = tx1 - tl;\r\n      x1 = chartArea.left;\r\n      x2 = chartArea.right;\r\n    }\r\n\r\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\r\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\r\n    for (i = 0; i < ticksLength; i += step) {\r\n      const context = this.getContext(i);\r\n      const optsAtIndex = grid.setContext(context);\r\n      const optsAtIndexBorder = border.setContext(context);\r\n\r\n      const lineWidth = optsAtIndex.lineWidth;\r\n      const lineColor = optsAtIndex.color;\r\n      const borderDash = optsAtIndexBorder.dash || [];\r\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\r\n\r\n      const tickWidth = optsAtIndex.tickWidth;\r\n      const tickColor = optsAtIndex.tickColor;\r\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\r\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\r\n\r\n      lineValue = getPixelForGridLine(this, i, offset);\r\n\r\n      // Skip if the pixel is out of the range\r\n      if (lineValue === undefined) {\r\n        continue;\r\n      }\r\n\r\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\r\n\r\n      if (isHorizontal) {\r\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\r\n      } else {\r\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\r\n      }\r\n\r\n      items.push({\r\n        tx1,\r\n        ty1,\r\n        tx2,\r\n        ty2,\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        width: lineWidth,\r\n        color: lineColor,\r\n        borderDash,\r\n        borderDashOffset,\r\n        tickWidth,\r\n        tickColor,\r\n        tickBorderDash,\r\n        tickBorderDashOffset,\r\n      });\r\n    }\r\n\r\n    this._ticksLength = ticksLength;\r\n    this._borderValue = borderValue;\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelItems(chartArea) {\r\n    const axis = this.axis;\r\n    const options = this.options;\r\n    const {position, ticks: optionTicks} = options;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const {align, crossAlign, padding, mirror} = optionTicks;\r\n    const tl = getTickMarkLength(options.grid);\r\n    const tickAndPadding = tl + padding;\r\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\r\n    const rotation = -toRadians(this.labelRotation);\r\n    const items = [];\r\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\r\n    let textBaseline = 'middle';\r\n\r\n    if (position === 'top') {\r\n      y = this.bottom - hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'bottom') {\r\n      y = this.top + hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'left') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (position === 'right') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\r\n      }\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\r\n      }\r\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\r\n    }\r\n\r\n    if (axis === 'y') {\r\n      if (align === 'start') {\r\n        textBaseline = 'top';\r\n      } else if (align === 'end') {\r\n        textBaseline = 'bottom';\r\n      }\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      label = tick.label;\r\n\r\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\r\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\r\n      font = this._resolveTickFontOptions(i);\r\n      lineHeight = font.lineHeight;\r\n      lineCount = isArray(label) ? label.length : 1;\r\n      const halfCount = lineCount / 2;\r\n      const color = optsAtIndex.color;\r\n      const strokeColor = optsAtIndex.textStrokeColor;\r\n      const strokeWidth = optsAtIndex.textStrokeWidth;\r\n      let tickTextAlign = textAlign;\r\n\r\n      if (isHorizontal) {\r\n        x = pixel;\r\n\r\n        if (textAlign === 'inner') {\r\n          if (i === ilen - 1) {\r\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\r\n          } else if (i === 0) {\r\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\r\n          } else {\r\n            tickTextAlign = 'center';\r\n          }\r\n        }\r\n\r\n        if (position === 'top') {\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\r\n          } else {\r\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\r\n          }\r\n        } else {\r\n          // eslint-disable-next-line no-lonely-if\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\r\n          } else {\r\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\r\n          }\r\n        }\r\n        if (mirror) {\r\n          textOffset *= -1;\r\n        }\r\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\r\n          x += (lineHeight / 2) * Math.sin(rotation);\r\n        }\r\n      } else {\r\n        y = pixel;\r\n        textOffset = (1 - lineCount) * lineHeight / 2;\r\n      }\r\n\r\n      let backdrop;\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\r\n        const height = labelSizes.heights[i];\r\n        const width = labelSizes.widths[i];\r\n\r\n        let top = textOffset - labelPadding.top;\r\n        let left = 0 - labelPadding.left;\r\n\r\n        switch (textBaseline) {\r\n        case 'middle':\r\n          top -= height / 2;\r\n          break;\r\n        case 'bottom':\r\n          top -= height;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        switch (textAlign) {\r\n        case 'center':\r\n          left -= width / 2;\r\n          break;\r\n        case 'right':\r\n          left -= width;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        backdrop = {\r\n          left,\r\n          top,\r\n          width: width + labelPadding.width,\r\n          height: height + labelPadding.height,\r\n\r\n          color: optsAtIndex.backdropColor,\r\n        };\r\n      }\r\n\r\n      items.push({\r\n        rotation,\r\n        label,\r\n        font,\r\n        color,\r\n        strokeColor,\r\n        strokeWidth,\r\n        textOffset,\r\n        textAlign: tickTextAlign,\r\n        textBaseline,\r\n        translation: [x, y],\r\n        backdrop,\r\n      });\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  _getXAxisLabelAlignment() {\r\n    const {position, ticks} = this.options;\r\n    const rotation = -toRadians(this.labelRotation);\r\n\r\n    if (rotation) {\r\n      return position === 'top' ? 'left' : 'right';\r\n    }\r\n\r\n    let align = 'center';\r\n\r\n    if (ticks.align === 'start') {\r\n      align = 'left';\r\n    } else if (ticks.align === 'end') {\r\n      align = 'right';\r\n    } else if (ticks.align === 'inner') {\r\n      align = 'inner';\r\n    }\r\n\r\n    return align;\r\n  }\r\n\r\n  _getYAxisLabelAlignment(tl) {\r\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\r\n    const labelSizes = this._getLabelSizes();\r\n    const tickAndPadding = tl + padding;\r\n    const widest = labelSizes.widest.width;\r\n\r\n    let textAlign;\r\n    let x;\r\n\r\n    if (position === 'left') {\r\n      if (mirror) {\r\n        x = this.right + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += (widest / 2);\r\n        } else {\r\n          textAlign = 'right';\r\n          x += widest;\r\n        }\r\n      } else {\r\n        x = this.right - tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x = this.left;\r\n        }\r\n      }\r\n    } else if (position === 'right') {\r\n      if (mirror) {\r\n        x = this.left + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x -= widest;\r\n        }\r\n      } else {\r\n        x = this.left + tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += widest / 2;\r\n        } else {\r\n          textAlign = 'right';\r\n          x = this.right;\r\n        }\r\n      }\r\n    } else {\r\n      textAlign = 'right';\r\n    }\r\n\r\n    return {textAlign, x};\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelArea() {\r\n    if (this.options.ticks.mirror) {\r\n      return;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const position = this.options.position;\r\n\r\n    if (position === 'left' || position === 'right') {\r\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\r\n    } if (position === 'top' || position === 'bottom') {\r\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  drawBackground() {\r\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\r\n    if (backgroundColor) {\r\n      ctx.save();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(left, top, width, height);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  getLineWidthForValue(value) {\r\n    const grid = this.options.grid;\r\n    if (!this._isVisible() || !grid.display) {\r\n      return 0;\r\n    }\r\n    const ticks = this.ticks;\r\n    const index = ticks.findIndex(t => t.value === value);\r\n    if (index >= 0) {\r\n      const opts = grid.setContext(this.getContext(index));\r\n      return opts.lineWidth;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid(chartArea) {\r\n    const grid = this.options.grid;\r\n    const ctx = this.ctx;\r\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\r\n    let i, ilen;\r\n\r\n    const drawLine = (p1, p2, style) => {\r\n      if (!style.width || !style.color) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n      ctx.lineWidth = style.width;\r\n      ctx.strokeStyle = style.color;\r\n      ctx.setLineDash(style.borderDash || []);\r\n      ctx.lineDashOffset = style.borderDashOffset;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(p1.x, p1.y);\r\n      ctx.lineTo(p2.x, p2.y);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    };\r\n\r\n    if (grid.display) {\r\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n        const item = items[i];\r\n\r\n        if (grid.drawOnChartArea) {\r\n          drawLine(\r\n            {x: item.x1, y: item.y1},\r\n            {x: item.x2, y: item.y2},\r\n            item\r\n          );\r\n        }\r\n\r\n        if (grid.drawTicks) {\r\n          drawLine(\r\n            {x: item.tx1, y: item.ty1},\r\n            {x: item.tx2, y: item.ty2},\r\n            {\r\n              color: item.tickColor,\r\n              width: item.tickWidth,\r\n              borderDash: item.tickBorderDash,\r\n              borderDashOffset: item.tickBorderDashOffset\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {\r\n    const {chart, ctx, options: {border, grid}} = this;\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = border.display ? borderOpts.width : 0;\r\n    if (!axisWidth) {\r\n      return;\r\n    }\r\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\r\n    const borderValue = this._borderValue;\r\n    let x1, x2, y1, y2;\r\n\r\n    if (this.isHorizontal()) {\r\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\r\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\r\n      y1 = y2 = borderValue;\r\n    } else {\r\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\r\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\r\n      x1 = x2 = borderValue;\r\n    }\r\n    ctx.save();\r\n    ctx.lineWidth = borderOpts.width;\r\n    ctx.strokeStyle = borderOpts.color;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels(chartArea) {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    if (!optionTicks.display) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this.ctx;\r\n\r\n    const area = this._computeLabelArea();\r\n    if (area) {\r\n      clipArea(ctx, area);\r\n    }\r\n\r\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      const item = items[i];\r\n      const tickFont = item.font;\r\n      const label = item.label;\r\n\r\n      let y = item.textOffset;\r\n      renderText(ctx, label, 0, y, tickFont, item);\r\n    }\r\n\r\n    if (area) {\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const {ctx, options: {position, title, reverse}} = this;\r\n\r\n    if (!title.display) {\r\n      return;\r\n    }\r\n\r\n    const font = toFont(title.font);\r\n    const padding = toPadding(title.padding);\r\n    const align = title.align;\r\n    let offset = font.lineHeight / 2;\r\n\r\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\r\n      offset += padding.bottom;\r\n      if (isArray(title.text)) {\r\n        offset += font.lineHeight * (title.text.length - 1);\r\n      }\r\n    } else {\r\n      offset += padding.top;\r\n    }\r\n\r\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\r\n\r\n    renderText(ctx, title.text, 0, 0, font, {\r\n      color: title.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: titleAlign(align, position, reverse),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n\r\n  draw(chartArea) {\r\n    if (!this._isVisible()) {\r\n      return;\r\n    }\r\n\r\n    this.drawBackground();\r\n    this.drawGrid(chartArea);\r\n    this.drawBorder();\r\n    this.drawTitle();\r\n    this.drawLabels(chartArea);\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t * @private\r\n\t */\r\n  _layers() {\r\n    const opts = this.options;\r\n    const tz = opts.ticks && opts.ticks.z || 0;\r\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\r\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\r\n\r\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\r\n      // backward compatibility: draw has been overridden by custom scale\r\n      return [{\r\n        z: tz,\r\n        draw: (chartArea) => {\r\n          this.draw(chartArea);\r\n        }\r\n      }];\r\n    }\r\n\r\n    return [{\r\n      z: gz,\r\n      draw: (chartArea) => {\r\n        this.drawBackground();\r\n        this.drawGrid(chartArea);\r\n        this.drawTitle();\r\n      }\r\n    }, {\r\n      z: bz,\r\n      draw: () => {\r\n        this.drawBorder();\r\n      }\r\n    }, {\r\n      z: tz,\r\n      draw: (chartArea) => {\r\n        this.drawLabels(chartArea);\r\n      }\r\n    }];\r\n  }\r\n\r\n  /**\r\n\t * Returns visible dataset metas that are attached to this scale\r\n\t * @param {string} [type] - if specified, also filter by dataset type\r\n\t * @return {object[]}\r\n\t */\r\n  getMatchingVisibleMetas(type) {\r\n    const metas = this.chart.getSortedVisibleDatasetMetas();\r\n    const axisID = this.axis + 'AxisID';\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      const meta = metas[i];\r\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @return {object}\r\n\t * @protected\r\n \t */\r\n  _resolveTickFontOptions(index) {\r\n    const opts = this.options.ticks.setContext(this.getContext(index));\r\n    return toFont(opts.font);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  _maxDigits() {\r\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\r\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\r\n  }\r\n}\r\n","import {merge} from '../helpers/index.js';\r\nimport defaults, {overrides} from './core.defaults.js';\r\n\r\n/**\r\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\r\n */\r\n\r\nexport default class TypedRegistry {\r\n  constructor(type, scope, override) {\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.override = override;\r\n    this.items = Object.create(null);\r\n  }\r\n\r\n  isForType(type) {\r\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t * @returns {string} The scope where items defaults were registered to.\r\n\t */\r\n  register(item) {\r\n    const proto = Object.getPrototypeOf(item);\r\n    let parentScope;\r\n\r\n    if (isIChartComponent(proto)) {\r\n      // Make sure the parent is registered and note the scope where its defaults are.\r\n      parentScope = this.register(proto);\r\n    }\r\n\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope + '.' + id;\r\n\r\n    if (!id) {\r\n      throw new Error('class does not have id: ' + item);\r\n    }\r\n\r\n    if (id in items) {\r\n      // already registered\r\n      return scope;\r\n    }\r\n\r\n    items[id] = item;\r\n    registerDefaults(item, scope, parentScope);\r\n    if (this.override) {\r\n      defaults.override(item.id, item.overrides);\r\n    }\r\n\r\n    return scope;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object?}\r\n\t */\r\n  get(id) {\r\n    return this.items[id];\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t */\r\n  unregister(item) {\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope;\r\n\r\n    if (id in items) {\r\n      delete items[id];\r\n    }\r\n\r\n    if (scope && id in defaults[scope]) {\r\n      delete defaults[scope][id];\r\n      if (this.override) {\r\n        delete overrides[id];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerDefaults(item, scope, parentScope) {\r\n  // Inherit the parent's defaults and keep existing defaults\r\n  const itemDefaults = merge(Object.create(null), [\r\n    parentScope ? defaults.get(parentScope) : {},\r\n    defaults.get(scope),\r\n    item.defaults\r\n  ]);\r\n\r\n  defaults.set(scope, itemDefaults);\r\n\r\n  if (item.defaultRoutes) {\r\n    routeDefaults(scope, item.defaultRoutes);\r\n  }\r\n\r\n  if (item.descriptors) {\r\n    defaults.describe(scope, item.descriptors);\r\n  }\r\n}\r\n\r\nfunction routeDefaults(scope, routes) {\r\n  Object.keys(routes).forEach(property => {\r\n    const propertyParts = property.split('.');\r\n    const sourceName = propertyParts.pop();\r\n    const sourceScope = [scope].concat(propertyParts).join('.');\r\n    const parts = routes[property].split('.');\r\n    const targetName = parts.pop();\r\n    const targetScope = parts.join('.');\r\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\r\n  });\r\n}\r\n\r\nfunction isIChartComponent(proto) {\r\n  return 'id' in proto && 'defaults' in proto;\r\n}\r\n","import DatasetController from './core.datasetController.js';\r\nimport Element from './core.element.js';\r\nimport Scale from './core.scale.js';\r\nimport TypedRegistry from './core.typedRegistry.js';\r\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Registry {\r\n  constructor() {\r\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\r\n    this.elements = new TypedRegistry(Element, 'elements');\r\n    this.plugins = new TypedRegistry(Object, 'plugins');\r\n    this.scales = new TypedRegistry(Scale, 'scales');\r\n    // Order is important, Scale has Element in prototype chain,\r\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\r\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  add(...args) {\r\n    this._each('register', args);\r\n  }\r\n\r\n  remove(...args) {\r\n    this._each('unregister', args);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  addControllers(...args) {\r\n    this._each('register', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  addElements(...args) {\r\n    this._each('register', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  addPlugins(...args) {\r\n    this._each('register', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  addScales(...args) {\r\n    this._each('register', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof DatasetController}\r\n\t */\r\n  getController(id) {\r\n    return this._get(id, this.controllers, 'controller');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Element}\r\n\t */\r\n  getElement(id) {\r\n    return this._get(id, this.elements, 'element');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object}\r\n\t */\r\n  getPlugin(id) {\r\n    return this._get(id, this.plugins, 'plugin');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Scale}\r\n\t */\r\n  getScale(id) {\r\n    return this._get(id, this.scales, 'scale');\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  removeControllers(...args) {\r\n    this._each('unregister', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  removeElements(...args) {\r\n    this._each('unregister', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  removePlugins(...args) {\r\n    this._each('unregister', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  removeScales(...args) {\r\n    this._each('unregister', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _each(method, args, typedRegistry) {\r\n    [...args].forEach(arg => {\r\n      const reg = typedRegistry || this._getRegistryForType(arg);\r\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\r\n        this._exec(method, reg, arg);\r\n      } else {\r\n        // Handle loopable args\r\n        // Use case:\r\n        //  import * as plugins from './plugins.js';\r\n        //  Chart.register(plugins);\r\n        each(arg, item => {\r\n          // If there are mixed types in the loopable, make sure those are\r\n          // registered in correct registry\r\n          // Use case: (treemap exporting controller, elements etc)\r\n          //  import * as treemap from 'chartjs-chart-treemap.js';\r\n          //  Chart.register(treemap);\r\n\r\n          const itemReg = typedRegistry || this._getRegistryForType(item);\r\n          this._exec(method, itemReg, item);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _exec(method, registry, component) {\r\n    const camelMethod = _capitalize(method);\r\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\r\n    registry[method](component);\r\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRegistryForType(type) {\r\n    for (let i = 0; i < this._typedRegistries.length; i++) {\r\n      const reg = this._typedRegistries[i];\r\n      if (reg.isForType(type)) {\r\n        return reg;\r\n      }\r\n    }\r\n    // plugins is the fallback registry\r\n    return this.plugins;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _get(id, typedRegistry, type) {\r\n    const item = typedRegistry.get(id);\r\n    if (item === undefined) {\r\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\r\n    }\r\n    return item;\r\n  }\r\n\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Registry();\r\n","import registry from './core.registry.js';\r\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\r\n */\r\n\r\n/**\r\n * @callback filterCallback\r\n * @param {{plugin: object, options: object}} value\r\n * @param {number} [index]\r\n * @param {array} [array]\r\n * @param {object} [thisArg]\r\n * @return {boolean}\r\n */\r\n\r\n\r\nexport default class PluginService {\r\n  constructor() {\r\n    this._init = [];\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notify(chart, hook, args, filter) {\r\n    if (hook === 'beforeInit') {\r\n      this._init = this._createDescriptors(chart, true);\r\n      this._notify(this._init, chart, 'install');\r\n    }\r\n\r\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\r\n    const result = this._notify(descriptors, chart, hook, args);\r\n\r\n    if (hook === 'afterDestroy') {\r\n      this._notify(descriptors, chart, 'stop');\r\n      this._notify(this._init, chart, 'uninstall');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(descriptors, chart, hook, args) {\r\n    args = args || {};\r\n    for (const descriptor of descriptors) {\r\n      const plugin = descriptor.plugin;\r\n      const method = plugin[hook];\r\n      const params = [chart, args, descriptor.options];\r\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  invalidate() {\r\n    // When plugins are registered, there is the possibility of a double\r\n    // invalidate situation. In this case, we only want to invalidate once.\r\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\r\n    // plugins are restarted without being correctly stopped.\r\n    // See https://github.com/chartjs/Chart.js/issues/8147\r\n    if (!isNullOrUndef(this._cache)) {\r\n      this._oldCache = this._cache;\r\n      this._cache = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _descriptors(chart) {\r\n    if (this._cache) {\r\n      return this._cache;\r\n    }\r\n\r\n    const descriptors = this._cache = this._createDescriptors(chart);\r\n\r\n    this._notifyStateChanges(chart);\r\n\r\n    return descriptors;\r\n  }\r\n\r\n  _createDescriptors(chart, all) {\r\n    const config = chart && chart.config;\r\n    const options = valueOrDefault(config.options && config.options.plugins, {});\r\n    const plugins = allPlugins(config);\r\n    // options === false => all plugins are disabled\r\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _notifyStateChanges(chart) {\r\n    const previousDescriptors = this._oldCache || [];\r\n    const descriptors = this._cache;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\r\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\r\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./core.config.js').default} config\r\n */\r\nfunction allPlugins(config) {\r\n  const localIds = {};\r\n  const plugins = [];\r\n  const keys = Object.keys(registry.plugins.items);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    plugins.push(registry.getPlugin(keys[i]));\r\n  }\r\n\r\n  const local = config.plugins || [];\r\n  for (let i = 0; i < local.length; i++) {\r\n    const plugin = local[i];\r\n\r\n    if (plugins.indexOf(plugin) === -1) {\r\n      plugins.push(plugin);\r\n      localIds[plugin.id] = true;\r\n    }\r\n  }\r\n\r\n  return {plugins, localIds};\r\n}\r\n\r\nfunction getOpts(options, all) {\r\n  if (!all && options === false) {\r\n    return null;\r\n  }\r\n  if (options === true) {\r\n    return {};\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\r\n  const result = [];\r\n  const context = chart.getContext();\r\n\r\n  for (const plugin of plugins) {\r\n    const id = plugin.id;\r\n    const opts = getOpts(options[id], all);\r\n    if (opts === null) {\r\n      continue;\r\n    }\r\n    result.push({\r\n      plugin,\r\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction pluginOpts(config, {plugin, local}, opts, context) {\r\n  const keys = config.pluginScopeKeys(plugin);\r\n  const scopes = config.getOptionScopes(opts, keys);\r\n  if (local && plugin.defaults) {\r\n    // make sure plugin defaults are in scopes for local (not registered) plugins\r\n    scopes.push(plugin.defaults);\r\n  }\r\n  return config.createResolver(scopes, context, [''], {\r\n    // These are just defaults that plugins can override\r\n    scriptable: false,\r\n    indexable: false,\r\n    allKeys: true\r\n  });\r\n}\r\n","import defaults, {overrides, descriptors} from './core.defaults.js';\r\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\r\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\r\n\r\nexport function getIndexAxis(type, options) {\r\n  const datasetDefaults = defaults.datasets[type] || {};\r\n  const datasetOptions = (options.datasets || {})[type] || {};\r\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\r\n}\r\n\r\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\r\n  let axis = id;\r\n  if (id === '_index_') {\r\n    axis = indexAxis;\r\n  } else if (id === '_value_') {\r\n    axis = indexAxis === 'x' ? 'y' : 'x';\r\n  }\r\n  return axis;\r\n}\r\n\r\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\r\n  return axis === indexAxis ? '_index_' : '_value_';\r\n}\r\n\r\nfunction axisFromPosition(position) {\r\n  if (position === 'top' || position === 'bottom') {\r\n    return 'x';\r\n  }\r\n  if (position === 'left' || position === 'right') {\r\n    return 'y';\r\n  }\r\n}\r\n\r\nexport function determineAxis(id, scaleOptions) {\r\n  if (id === 'x' || id === 'y' || id === 'r') {\r\n    return id;\r\n  }\r\n\r\n  id = scaleOptions.axis\r\n    || axisFromPosition(scaleOptions.position)\r\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\r\n\r\n  if (id) {\r\n    return id;\r\n  }\r\n\r\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\r\n}\r\n\r\nfunction mergeScaleConfig(config, options) {\r\n  const chartDefaults = overrides[config.type] || {scales: {}};\r\n  const configScales = options.scales || {};\r\n  const chartIndexAxis = getIndexAxis(config.type, options);\r\n  const scales = Object.create(null);\r\n\r\n  // First figure out first scale id's per axis.\r\n  Object.keys(configScales).forEach(id => {\r\n    const scaleConf = configScales[id];\r\n    if (!isObject(scaleConf)) {\r\n      return console.error(`Invalid scale configuration for scale: ${id}`);\r\n    }\r\n    if (scaleConf._proxy) {\r\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\r\n    }\r\n    const axis = determineAxis(id, scaleConf);\r\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\r\n    const defaultScaleOptions = chartDefaults.scales || {};\r\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\r\n  });\r\n\r\n  // Then merge dataset defaults to scale configs\r\n  config.data.datasets.forEach(dataset => {\r\n    const type = dataset.type || config.type;\r\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\r\n    const datasetDefaults = overrides[type] || {};\r\n    const defaultScaleOptions = datasetDefaults.scales || {};\r\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\r\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\r\n      const id = dataset[axis + 'AxisID'] || axis;\r\n      scales[id] = scales[id] || Object.create(null);\r\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\r\n    });\r\n  });\r\n\r\n  // apply scale defaults, if not overridden by dataset defaults\r\n  Object.keys(scales).forEach(key => {\r\n    const scale = scales[key];\r\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\r\n  });\r\n\r\n  return scales;\r\n}\r\n\r\nfunction initOptions(config) {\r\n  const options = config.options || (config.options = {});\r\n\r\n  options.plugins = valueOrDefault(options.plugins, {});\r\n  options.scales = mergeScaleConfig(config, options);\r\n}\r\n\r\nfunction initData(data) {\r\n  data = data || {};\r\n  data.datasets = data.datasets || [];\r\n  data.labels = data.labels || [];\r\n  return data;\r\n}\r\n\r\nfunction initConfig(config) {\r\n  config = config || {};\r\n  config.data = initData(config.data);\r\n\r\n  initOptions(config);\r\n\r\n  return config;\r\n}\r\n\r\nconst keyCache = new Map();\r\nconst keysCached = new Set();\r\n\r\nfunction cachedKeys(cacheKey, generate) {\r\n  let keys = keyCache.get(cacheKey);\r\n  if (!keys) {\r\n    keys = generate();\r\n    keyCache.set(cacheKey, keys);\r\n    keysCached.add(keys);\r\n  }\r\n  return keys;\r\n}\r\n\r\nconst addIfFound = (set, obj, key) => {\r\n  const opts = resolveObjectKey(obj, key);\r\n  if (opts !== undefined) {\r\n    set.add(opts);\r\n  }\r\n};\r\n\r\nexport default class Config {\r\n  constructor(config) {\r\n    this._config = initConfig(config);\r\n    this._scopeCache = new Map();\r\n    this._resolverCache = new Map();\r\n  }\r\n\r\n  get platform() {\r\n    return this._config.platform;\r\n  }\r\n\r\n  get type() {\r\n    return this._config.type;\r\n  }\r\n\r\n  set type(type) {\r\n    this._config.type = type;\r\n  }\r\n\r\n  get data() {\r\n    return this._config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this._config.data = initData(data);\r\n  }\r\n\r\n  get options() {\r\n    return this._config.options;\r\n  }\r\n\r\n  set options(options) {\r\n    this._config.options = options;\r\n  }\r\n\r\n  get plugins() {\r\n    return this._config.plugins;\r\n  }\r\n\r\n  update() {\r\n    const config = this._config;\r\n    this.clearCache();\r\n    initOptions(config);\r\n  }\r\n\r\n  clearCache() {\r\n    this._scopeCache.clear();\r\n    this._resolverCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @return {string[][]}\r\n   */\r\n  datasetScopeKeys(datasetType) {\r\n    return cachedKeys(datasetType,\r\n      () => [[\r\n        `datasets.${datasetType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset animation options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} transition\r\n   * @return {string[][]}\r\n   */\r\n  datasetAnimationScopeKeys(datasetType, transition) {\r\n    return cachedKeys(`${datasetType}.transition.${transition}`,\r\n      () => [\r\n        [\r\n          `datasets.${datasetType}.transitions.${transition}`,\r\n          `transitions.${transition}`,\r\n        ],\r\n        // The following are used for looking up the `animations` and `animation` keys\r\n        [\r\n          `datasets.${datasetType}`,\r\n          ''\r\n        ]\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving element options that belong\r\n   * to an dataset. These keys do not include the dataset itself, because it\r\n   * is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} elementType\r\n   * @return {string[][]}\r\n   */\r\n  datasetElementScopeKeys(datasetType, elementType) {\r\n    return cachedKeys(`${datasetType}-${elementType}`,\r\n      () => [[\r\n        `datasets.${datasetType}.elements.${elementType}`,\r\n        `datasets.${datasetType}`,\r\n        `elements.${elementType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving plugin options.\r\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\r\n   * @return {string[][]}\r\n   */\r\n  pluginScopeKeys(plugin) {\r\n    const id = plugin.id;\r\n    const type = this.type;\r\n    return cachedKeys(`${type}-plugin-${id}`,\r\n      () => [[\r\n        `plugins.${id}`,\r\n        ...plugin.additionalOptionScopes || [],\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _cachedScopes(mainScope, resetCache) {\r\n    const _scopeCache = this._scopeCache;\r\n    let cache = _scopeCache.get(mainScope);\r\n    if (!cache || resetCache) {\r\n      cache = new Map();\r\n      _scopeCache.set(mainScope, cache);\r\n    }\r\n    return cache;\r\n  }\r\n\r\n  /**\r\n   * Resolves the objects from options and defaults for option value resolution.\r\n   * @param {object} mainScope - The main scope object for options\r\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\r\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\r\n   */\r\n  getOptionScopes(mainScope, keyLists, resetCache) {\r\n    const {options, type} = this;\r\n    const cache = this._cachedScopes(mainScope, resetCache);\r\n    const cached = cache.get(keyLists);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const scopes = new Set();\r\n\r\n    keyLists.forEach(keys => {\r\n      if (mainScope) {\r\n        scopes.add(mainScope);\r\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\r\n      }\r\n      keys.forEach(key => addIfFound(scopes, options, key));\r\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\r\n      keys.forEach(key => addIfFound(scopes, defaults, key));\r\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\r\n    });\r\n\r\n    const array = Array.from(scopes);\r\n    if (array.length === 0) {\r\n      array.push(Object.create(null));\r\n    }\r\n    if (keysCached.has(keyLists)) {\r\n      cache.set(keyLists, array);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Returns the option scopes for resolving chart options\r\n   * @return {object[]}\r\n   */\r\n  chartOptionScopes() {\r\n    const {options, type} = this;\r\n\r\n    return [\r\n      options,\r\n      overrides[type] || {},\r\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\r\n      {type},\r\n      defaults,\r\n      descriptors\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {string[]} names\r\n   * @param {function|object} context\r\n   * @param {string[]} [prefixes]\r\n   * @return {object}\r\n   */\r\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\r\n    const result = {$shared: true};\r\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\r\n    let options = resolver;\r\n    if (needContext(resolver, names)) {\r\n      result.$shared = false;\r\n      context = isFunction(context) ? context() : context;\r\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\r\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\r\n      options = _attachContext(resolver, context, subResolver);\r\n    }\r\n\r\n    for (const prop of names) {\r\n      result[prop] = options[prop];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {object} [context]\r\n   * @param {string[]} [prefixes]\r\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\r\n   */\r\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\r\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\r\n    return isObject(context)\r\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\r\n      : resolver;\r\n  }\r\n}\r\n\r\nfunction getResolver(resolverCache, scopes, prefixes) {\r\n  let cache = resolverCache.get(scopes);\r\n  if (!cache) {\r\n    cache = new Map();\r\n    resolverCache.set(scopes, cache);\r\n  }\r\n  const cacheKey = prefixes.join();\r\n  let cached = cache.get(cacheKey);\r\n  if (!cached) {\r\n    const resolver = _createResolver(scopes, prefixes);\r\n    cached = {\r\n      resolver,\r\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\r\n    };\r\n    cache.set(cacheKey, cached);\r\n  }\r\n  return cached;\r\n}\r\n\r\nconst hasFunction = value => isObject(value)\r\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\r\n\r\nfunction needContext(proxy, names) {\r\n  const {isScriptable, isIndexable} = _descriptors(proxy);\r\n\r\n  for (const prop of names) {\r\n    const scriptable = isScriptable(prop);\r\n    const indexable = isIndexable(prop);\r\n    const value = (indexable || scriptable) && proxy[prop];\r\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\r\n      || (indexable && isArray(value))) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import animator from './core.animator.js';\r\nimport defaults, {overrides} from './core.defaults.js';\r\nimport Interaction from './core.interaction.js';\r\nimport layouts from './core.layouts.js';\r\nimport {_detectPlatform} from '../platform/index.js';\r\nimport PluginService from './core.plugins.js';\r\nimport registry from './core.registry.js';\r\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\r\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\r\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\r\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\r\n// @ts-ignore\r\nimport {version} from '../../package.json';\r\nimport {debounce} from '../helpers/helpers.extras.js';\r\n\r\n/**\r\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../../types/index.js').Point } Point\r\n */\r\n\r\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\r\nfunction positionIsHorizontal(position, axis) {\r\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\r\n}\r\n\r\nfunction compare2Level(l1, l2) {\r\n  return function(a, b) {\r\n    return a[l1] === b[l1]\r\n      ? a[l2] - b[l2]\r\n      : a[l1] - b[l1];\r\n  };\r\n}\r\n\r\nfunction onAnimationsComplete(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n\r\n  chart.notifyPlugins('afterRender');\r\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\r\n}\r\n\r\nfunction onAnimationProgress(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\r\n}\r\n\r\n/**\r\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\r\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\r\n */\r\nfunction getCanvas(item) {\r\n  if (_isDomSupported() && typeof item === 'string') {\r\n    item = document.getElementById(item);\r\n  } else if (item && item.length) {\r\n    // Support for array based queries (such as jQuery)\r\n    item = item[0];\r\n  }\r\n\r\n  if (item && item.canvas) {\r\n    // Support for any object associated to a canvas (including a context2d)\r\n    item = item.canvas;\r\n  }\r\n  return item;\r\n}\r\n\r\nconst instances = {};\r\nconst getChart = (key) => {\r\n  const canvas = getCanvas(key);\r\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\r\n};\r\n\r\nfunction moveNumericKeys(obj, start, move) {\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    const intKey = +key;\r\n    if (intKey >= start) {\r\n      const value = obj[key];\r\n      delete obj[key];\r\n      if (move > 0 || intKey > start) {\r\n        obj[intKey + move] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ChartEvent} e\r\n * @param {ChartEvent|null} lastEvent\r\n * @param {boolean} inChartArea\r\n * @param {boolean} isClick\r\n * @returns {ChartEvent|null}\r\n */\r\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\r\n  if (!inChartArea || e.type === 'mouseout') {\r\n    return null;\r\n  }\r\n  if (isClick) {\r\n    return lastEvent;\r\n  }\r\n  return e;\r\n}\r\n\r\nfunction getDatasetArea(meta) {\r\n  const {xScale, yScale} = meta;\r\n  if (xScale && yScale) {\r\n    return {\r\n      left: xScale.left,\r\n      right: xScale.right,\r\n      top: yScale.top,\r\n      bottom: yScale.bottom\r\n    };\r\n  }\r\n}\r\n\r\nclass Chart {\r\n\r\n  static defaults = defaults;\r\n  static instances = instances;\r\n  static overrides = overrides;\r\n  static registry = registry;\r\n  static version = version;\r\n  static getChart = getChart;\r\n\r\n  static register(...items) {\r\n    registry.add(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  static unregister(...items) {\r\n    registry.remove(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(item, userConfig) {\r\n    const config = this.config = new Config(userConfig);\r\n    const initialCanvas = getCanvas(item);\r\n    const existingChart = getChart(initialCanvas);\r\n    if (existingChart) {\r\n      throw new Error(\r\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\r\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\r\n      );\r\n    }\r\n\r\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n\r\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\r\n    this.platform.updateConfig(config);\r\n\r\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\r\n    const canvas = context && context.canvas;\r\n    const height = canvas && canvas.height;\r\n    const width = canvas && canvas.width;\r\n\r\n    this.id = uid();\r\n    this.ctx = context;\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this._options = options;\r\n    // Store the previously used aspect ratio to determine if a resize\r\n    // is needed during updates. Do this after _options is set since\r\n    // aspectRatio uses a getter\r\n    this._aspectRatio = this.aspectRatio;\r\n    this._layers = [];\r\n    this._metasets = [];\r\n    this._stacks = undefined;\r\n    this.boxes = [];\r\n    this.currentDevicePixelRatio = undefined;\r\n    this.chartArea = undefined;\r\n    this._active = [];\r\n    this._lastEvent = undefined;\r\n    this._listeners = {};\r\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\r\n    this._responsiveListeners = undefined;\r\n    this._sortedMetasets = [];\r\n    this.scales = {};\r\n    this._plugins = new PluginService();\r\n    this.$proxies = {};\r\n    this._hiddenIndices = {};\r\n    this.attached = false;\r\n    this._animationsDisabled = undefined;\r\n    this.$context = undefined;\r\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\r\n    this._dataChanges = [];\r\n\r\n    // Add the chart instance to the global namespace\r\n    instances[this.id] = this;\r\n\r\n    if (!context || !canvas) {\r\n      // The given item is not a compatible context2d element, let's return before finalizing\r\n      // the chart initialization but after setting basic chart / controller properties that\r\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\r\n      // https://github.com/chartjs/Chart.js/issues/2807\r\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\r\n      return;\r\n    }\r\n\r\n    animator.listen(this, 'complete', onAnimationsComplete);\r\n    animator.listen(this, 'progress', onAnimationProgress);\r\n\r\n    this._initialize();\r\n    if (this.attached) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  get aspectRatio() {\r\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\r\n    if (!isNullOrUndef(aspectRatio)) {\r\n      // If aspectRatio is defined in options, use that.\r\n      return aspectRatio;\r\n    }\r\n\r\n    if (maintainAspectRatio && _aspectRatio) {\r\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\r\n      return _aspectRatio;\r\n    }\r\n\r\n    // Calculate\r\n    return height ? width / height : null;\r\n  }\r\n\r\n  get data() {\r\n    return this.config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this.config.data = data;\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  set options(options) {\r\n    this.config.options = options;\r\n  }\r\n\r\n  get registry() {\r\n    return registry;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _initialize() {\r\n    // Before init plugin notification\r\n    this.notifyPlugins('beforeInit');\r\n\r\n    if (this.options.responsive) {\r\n      this.resize();\r\n    } else {\r\n      retinaScale(this, this.options.devicePixelRatio);\r\n    }\r\n\r\n    this.bindEvents();\r\n\r\n    // After init plugin notification\r\n    this.notifyPlugins('afterInit');\r\n\r\n    return this;\r\n  }\r\n\r\n  clear() {\r\n    clearCanvas(this.canvas, this.ctx);\r\n    return this;\r\n  }\r\n\r\n  stop() {\r\n    animator.stop(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Resize the chart to its container or to explicit dimensions.\r\n\t * @param {number} [width]\r\n\t * @param {number} [height]\r\n\t */\r\n  resize(width, height) {\r\n    if (!animator.running(this)) {\r\n      this._resize(width, height);\r\n    } else {\r\n      this._resizeBeforeDraw = {width, height};\r\n    }\r\n  }\r\n\r\n  _resize(width, height) {\r\n    const options = this.options;\r\n    const canvas = this.canvas;\r\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\r\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\r\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\r\n    const mode = this.width ? 'resize' : 'attach';\r\n\r\n    this.width = newSize.width;\r\n    this.height = newSize.height;\r\n    this._aspectRatio = this.aspectRatio;\r\n    if (!retinaScale(this, newRatio, true)) {\r\n      return;\r\n    }\r\n\r\n    this.notifyPlugins('resize', {size: newSize});\r\n\r\n    callCallback(options.onResize, [this, newSize], this);\r\n\r\n    if (this.attached) {\r\n      if (this._doResize(mode)) {\r\n        // The resize update is delayed, only draw without updating.\r\n        this.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  ensureScalesHaveIDs() {\r\n    const options = this.options;\r\n    const scalesOptions = options.scales || {};\r\n\r\n    each(scalesOptions, (axisOptions, axisID) => {\r\n      axisOptions.id = axisID;\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Builds a map of scale ID to scale object for future lookup.\r\n\t */\r\n  buildOrUpdateScales() {\r\n    const options = this.options;\r\n    const scaleOpts = options.scales;\r\n    const scales = this.scales;\r\n    const updated = Object.keys(scales).reduce((obj, id) => {\r\n      obj[id] = false;\r\n      return obj;\r\n    }, {});\r\n    let items = [];\r\n\r\n    if (scaleOpts) {\r\n      items = items.concat(\r\n        Object.keys(scaleOpts).map((id) => {\r\n          const scaleOptions = scaleOpts[id];\r\n          const axis = determineAxis(id, scaleOptions);\r\n          const isRadial = axis === 'r';\r\n          const isHorizontal = axis === 'x';\r\n          return {\r\n            options: scaleOptions,\r\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\r\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    each(items, (item) => {\r\n      const scaleOptions = item.options;\r\n      const id = scaleOptions.id;\r\n      const axis = determineAxis(id, scaleOptions);\r\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\r\n\r\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\r\n        scaleOptions.position = item.dposition;\r\n      }\r\n\r\n      updated[id] = true;\r\n      let scale = null;\r\n      if (id in scales && scales[id].type === scaleType) {\r\n        scale = scales[id];\r\n      } else {\r\n        const scaleClass = registry.getScale(scaleType);\r\n        scale = new scaleClass({\r\n          id,\r\n          type: scaleType,\r\n          ctx: this.ctx,\r\n          chart: this\r\n        });\r\n        scales[scale.id] = scale;\r\n      }\r\n\r\n      scale.init(scaleOptions, options);\r\n    });\r\n    // clear up discarded scales\r\n    each(updated, (hasUpdated, id) => {\r\n      if (!hasUpdated) {\r\n        delete scales[id];\r\n      }\r\n    });\r\n\r\n    each(scales, (scale) => {\r\n      layouts.configure(this, scale, scale.options);\r\n      layouts.addBox(this, scale);\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateMetasets() {\r\n    const metasets = this._metasets;\r\n    const numData = this.data.datasets.length;\r\n    const numMeta = metasets.length;\r\n\r\n    metasets.sort((a, b) => a.index - b.index);\r\n    if (numMeta > numData) {\r\n      for (let i = numData; i < numMeta; ++i) {\r\n        this._destroyDatasetMeta(i);\r\n      }\r\n      metasets.splice(numData, numMeta - numData);\r\n    }\r\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeUnreferencedMetasets() {\r\n    const {_metasets: metasets, data: {datasets}} = this;\r\n    if (metasets.length > datasets.length) {\r\n      delete this._stacks;\r\n    }\r\n    metasets.forEach((meta, index) => {\r\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\r\n        this._destroyDatasetMeta(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  buildOrUpdateControllers() {\r\n    const newControllers = [];\r\n    const datasets = this.data.datasets;\r\n    let i, ilen;\r\n\r\n    this._removeUnreferencedMetasets();\r\n\r\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\r\n      const dataset = datasets[i];\r\n      let meta = this.getDatasetMeta(i);\r\n      const type = dataset.type || this.config.type;\r\n\r\n      if (meta.type && meta.type !== type) {\r\n        this._destroyDatasetMeta(i);\r\n        meta = this.getDatasetMeta(i);\r\n      }\r\n      meta.type = type;\r\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\r\n      meta.order = dataset.order || 0;\r\n      meta.index = i;\r\n      meta.label = '' + dataset.label;\r\n      meta.visible = this.isDatasetVisible(i);\r\n\r\n      if (meta.controller) {\r\n        meta.controller.updateIndex(i);\r\n        meta.controller.linkScales();\r\n      } else {\r\n        const ControllerClass = registry.getController(type);\r\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\r\n        Object.assign(ControllerClass, {\r\n          dataElementType: registry.getElement(dataElementType),\r\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\r\n        });\r\n        meta.controller = new ControllerClass(this, i);\r\n        newControllers.push(meta.controller);\r\n      }\r\n    }\r\n\r\n    this._updateMetasets();\r\n    return newControllers;\r\n  }\r\n\r\n  /**\r\n\t * Reset the elements of all datasets\r\n\t * @private\r\n\t */\r\n  _resetElements() {\r\n    each(this.data.datasets, (dataset, datasetIndex) => {\r\n      this.getDatasetMeta(datasetIndex).controller.reset();\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n\t* Resets the chart back to its state before the initial animation\r\n\t*/\r\n  reset() {\r\n    this._resetElements();\r\n    this.notifyPlugins('reset');\r\n  }\r\n\r\n  update(mode) {\r\n    const config = this.config;\r\n\r\n    config.update();\r\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n    const animsDisabled = this._animationsDisabled = !options.animation;\r\n\r\n    this._updateScales();\r\n    this._checkEventBindings();\r\n    this._updateHiddenIndices();\r\n\r\n    // plugins options references might have change, let's invalidate the cache\r\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\r\n    this._plugins.invalidate();\r\n\r\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Make sure dataset controllers are updated and new controllers are reset\r\n    const newControllers = this.buildOrUpdateControllers();\r\n\r\n    this.notifyPlugins('beforeElementsUpdate');\r\n\r\n    // Make sure all dataset controllers have correct meta data counts\r\n    let minPadding = 0;\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\r\n      const {controller} = this.getDatasetMeta(i);\r\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\r\n      // New controllers will be reset after the layout pass, so we only want to modify\r\n      // elements added to new datasets\r\n      controller.buildOrUpdateElements(reset);\r\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\r\n    }\r\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\r\n    this._updateLayout(minPadding);\r\n\r\n    // Only reset the controllers if we have animations\r\n    if (!animsDisabled) {\r\n      // Can only reset the new controllers after the scales have been updated\r\n      // Reset is done to get the starting point for the initial animation\r\n      each(newControllers, (controller) => {\r\n        controller.reset();\r\n      });\r\n    }\r\n\r\n    this._updateDatasets(mode);\r\n\r\n    // Do this before render so that any plugins that need final scale updates can use it\r\n    this.notifyPlugins('afterUpdate', {mode});\r\n\r\n    this._layers.sort(compare2Level('z', '_idx'));\r\n\r\n    // Replay last event from before update, or set hover styles on active elements\r\n    const {_active, _lastEvent} = this;\r\n    if (_lastEvent) {\r\n      this._eventHandler(_lastEvent, true);\r\n    } else if (_active.length) {\r\n      this._updateHoverStyles(_active, _active, true);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateScales() {\r\n    each(this.scales, (scale) => {\r\n      layouts.removeBox(this, scale);\r\n    });\r\n\r\n    this.ensureScalesHaveIDs();\r\n    this.buildOrUpdateScales();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _checkEventBindings() {\r\n    const options = this.options;\r\n    const existingEvents = new Set(Object.keys(this._listeners));\r\n    const newEvents = new Set(options.events);\r\n\r\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\r\n      // The configured events have changed. Rebind.\r\n      this.unbindEvents();\r\n      this.bindEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateHiddenIndices() {\r\n    const {_hiddenIndices} = this;\r\n    const changes = this._getUniformDataChanges() || [];\r\n    for (const {method, start, count} of changes) {\r\n      const move = method === '_removeElements' ? -count : count;\r\n      moveNumericKeys(_hiddenIndices, start, move);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _getUniformDataChanges() {\r\n    const _dataChanges = this._dataChanges;\r\n    if (!_dataChanges || !_dataChanges.length) {\r\n      return;\r\n    }\r\n\r\n    this._dataChanges = [];\r\n    const datasetCount = this.data.datasets.length;\r\n    const makeSet = (idx) => new Set(\r\n      _dataChanges\r\n        .filter(c => c[0] === idx)\r\n        .map((c, i) => i + ',' + c.splice(1).join(','))\r\n    );\r\n\r\n    const changeSet = makeSet(0);\r\n    for (let i = 1; i < datasetCount; i++) {\r\n      if (!setsEqual(changeSet, makeSet(i))) {\r\n        return;\r\n      }\r\n    }\r\n    return Array.from(changeSet)\r\n      .map(c => c.split(','))\r\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\r\n  }\r\n\r\n  /**\r\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\r\n\t * hook, in which case, plugins will not be called on `afterLayout`.\r\n\t * @private\r\n\t */\r\n  _updateLayout(minPadding) {\r\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    layouts.update(this, this.width, this.height, minPadding);\r\n\r\n    const area = this.chartArea;\r\n    const noArea = area.width <= 0 || area.height <= 0;\r\n\r\n    this._layers = [];\r\n    each(this.boxes, (box) => {\r\n      if (noArea && box.position === 'chartArea') {\r\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\r\n        return;\r\n      }\r\n\r\n      // configure is called twice, once in core.scale.update and once here.\r\n      // Here the boxes are fully updated and at their final positions.\r\n      if (box.configure) {\r\n        box.configure();\r\n      }\r\n      this._layers.push(...box._layers());\r\n    }, this);\r\n\r\n    this._layers.forEach((item, index) => {\r\n      item._idx = index;\r\n    });\r\n\r\n    this.notifyPlugins('afterLayout');\r\n  }\r\n\r\n  /**\r\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDatasets(mode) {\r\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this.getDatasetMeta(i).controller.configure();\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\r\n  }\r\n\r\n  /**\r\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDataset(index, mode) {\r\n    const meta = this.getDatasetMeta(index);\r\n    const args = {meta, index, mode, cancelable: true};\r\n\r\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\r\n      return;\r\n    }\r\n\r\n    meta.controller._update(mode);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetUpdate', args);\r\n  }\r\n\r\n  render() {\r\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    if (animator.has(this)) {\r\n      if (this.attached && !animator.running(this)) {\r\n        animator.start(this);\r\n      }\r\n    } else {\r\n      this.draw();\r\n      onAnimationsComplete({chart: this});\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    let i;\r\n    if (this._resizeBeforeDraw) {\r\n      const {width, height} = this._resizeBeforeDraw;\r\n      this._resize(width, height);\r\n      this._resizeBeforeDraw = null;\r\n    }\r\n    this.clear();\r\n\r\n    if (this.width <= 0 || this.height <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\r\n    // currently be part of layers. Instead, we draw\r\n    // layers <= 0 before(default, backward compat), and the rest after\r\n    const layers = this._layers;\r\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this._drawDatasets();\r\n\r\n    // Rest of layers\r\n    for (; i < layers.length; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this.notifyPlugins('afterDraw');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getSortedDatasetMetas(filterVisible) {\r\n    const metasets = this._sortedMetasets;\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n      const meta = metasets[i];\r\n      if (!filterVisible || meta.visible) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * Gets the visible dataset metas in drawing order\r\n\t * @return {object[]}\r\n\t */\r\n  getSortedVisibleDatasetMetas() {\r\n    return this._getSortedDatasetMetas(true);\r\n  }\r\n\r\n  /**\r\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDatasets() {\r\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    const metasets = this.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      this._drawDataset(metasets[i]);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsDraw');\r\n  }\r\n\r\n  /**\r\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDataset(meta) {\r\n    const ctx = this.ctx;\r\n    const clip = meta._clip;\r\n    const useClip = !clip.disabled;\r\n    const area = getDatasetArea(meta) || this.chartArea;\r\n    const args = {\r\n      meta,\r\n      index: meta.index,\r\n      cancelable: true\r\n    };\r\n\r\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\r\n      return;\r\n    }\r\n\r\n    if (useClip) {\r\n      clipArea(ctx, {\r\n        left: clip.left === false ? 0 : area.left - clip.left,\r\n        right: clip.right === false ? this.width : area.right + clip.right,\r\n        top: clip.top === false ? 0 : area.top - clip.top,\r\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\r\n      });\r\n    }\r\n\r\n    meta.controller.draw();\r\n\r\n    if (useClip) {\r\n      unclipArea(ctx);\r\n    }\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetDraw', args);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given point is in the chart area.\r\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\r\n   * @returns {boolean}\r\n   */\r\n  isPointInArea(point) {\r\n    return _isPointInArea(point, this.chartArea, this._minPadding);\r\n  }\r\n\r\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\r\n    const method = Interaction.modes[mode];\r\n    if (typeof method === 'function') {\r\n      return method(this, e, options, useFinalPosition);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getDatasetMeta(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    const metasets = this._metasets;\r\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\r\n\r\n    if (!meta) {\r\n      meta = {\r\n        type: null,\r\n        data: [],\r\n        dataset: null,\r\n        controller: null,\r\n        hidden: null,\t\t\t// See isDatasetVisible() comment\r\n        xAxisID: null,\r\n        yAxisID: null,\r\n        order: dataset && dataset.order || 0,\r\n        index: datasetIndex,\r\n        _dataset: dataset,\r\n        _parsed: [],\r\n        _sorted: false\r\n      };\r\n      metasets.push(meta);\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getContext() {\r\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\r\n  }\r\n\r\n  getVisibleDatasetCount() {\r\n    return this.getSortedVisibleDatasetMetas().length;\r\n  }\r\n\r\n  isDatasetVisible(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    if (!dataset) {\r\n      return false;\r\n    }\r\n\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n\r\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\r\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\r\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\r\n  }\r\n\r\n  setDatasetVisibility(datasetIndex, visible) {\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    meta.hidden = !visible;\r\n  }\r\n\r\n  toggleDataVisibility(index) {\r\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\r\n  }\r\n\r\n  getDataVisibility(index) {\r\n    return !this._hiddenIndices[index];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateVisibility(datasetIndex, dataIndex, visible) {\r\n    const mode = visible ? 'show' : 'hide';\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    const anims = meta.controller._resolveAnimations(undefined, mode);\r\n\r\n    if (defined(dataIndex)) {\r\n      meta.data[dataIndex].hidden = !visible;\r\n      this.update();\r\n    } else {\r\n      this.setDatasetVisibility(datasetIndex, visible);\r\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\r\n      anims.update(meta, {visible});\r\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\r\n    }\r\n  }\r\n\r\n  hide(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, false);\r\n  }\r\n\r\n  show(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroyDatasetMeta(datasetIndex) {\r\n    const meta = this._metasets[datasetIndex];\r\n    if (meta && meta.controller) {\r\n      meta.controller._destroy();\r\n    }\r\n    delete this._metasets[datasetIndex];\r\n  }\r\n\r\n  _stop() {\r\n    let i, ilen;\r\n    this.stop();\r\n    animator.remove(this);\r\n\r\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._destroyDatasetMeta(i);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.notifyPlugins('beforeDestroy');\r\n    const {canvas, ctx} = this;\r\n\r\n    this._stop();\r\n    this.config.clearCache();\r\n\r\n    if (canvas) {\r\n      this.unbindEvents();\r\n      clearCanvas(canvas, ctx);\r\n      this.platform.releaseContext(ctx);\r\n      this.canvas = null;\r\n      this.ctx = null;\r\n    }\r\n\r\n    delete instances[this.id];\r\n\r\n    this.notifyPlugins('afterDestroy');\r\n  }\r\n\r\n  toBase64Image(...args) {\r\n    return this.canvas.toDataURL(...args);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  bindEvents() {\r\n    this.bindUserEvents();\r\n    if (this.options.responsive) {\r\n      this.bindResponsiveEvents();\r\n    } else {\r\n      this.attached = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindUserEvents() {\r\n    const listeners = this._listeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n\r\n    const listener = (e, x, y) => {\r\n      e.offsetX = x;\r\n      e.offsetY = y;\r\n      this._eventHandler(e);\r\n    };\r\n\r\n    each(this.options.events, (type) => _add(type, listener));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindResponsiveEvents() {\r\n    if (!this._responsiveListeners) {\r\n      this._responsiveListeners = {};\r\n    }\r\n    const listeners = this._responsiveListeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n    const _remove = (type, listener) => {\r\n      if (listeners[type]) {\r\n        platform.removeEventListener(this, type, listener);\r\n        delete listeners[type];\r\n      }\r\n    };\r\n\r\n    const listener = (width, height) => {\r\n      if (this.canvas) {\r\n        this.resize(width, height);\r\n      }\r\n    };\r\n\r\n    let detached; // eslint-disable-line prefer-const\r\n    const attached = () => {\r\n      _remove('attach', attached);\r\n\r\n      this.attached = true;\r\n      this.resize();\r\n\r\n      _add('resize', listener);\r\n      _add('detach', detached);\r\n    };\r\n\r\n    detached = () => {\r\n      this.attached = false;\r\n\r\n      _remove('resize', listener);\r\n\r\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\r\n      this._stop();\r\n      this._resize(0, 0);\r\n\r\n      _add('attach', attached);\r\n    };\r\n\r\n    if (platform.isAttached(this.canvas)) {\r\n      attached();\r\n    } else {\r\n      detached();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  unbindEvents() {\r\n    each(this._listeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._listeners = {};\r\n\r\n    each(this._responsiveListeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._responsiveListeners = undefined;\r\n  }\r\n\r\n  updateHoverStyle(items, mode, enabled) {\r\n    const prefix = enabled ? 'set' : 'remove';\r\n    let meta, item, i, ilen;\r\n\r\n    if (mode === 'dataset') {\r\n      meta = this.getDatasetMeta(items[0].datasetIndex);\r\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      item = items[i];\r\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\r\n      if (controller) {\r\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active (hovered) elements\r\n\t * @returns array\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active (hovered) elements\r\n\t * @param {array} activeElements New active data points\r\n\t */\r\n  setActiveElements(activeElements) {\r\n    const lastActive = this._active || [];\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.getDatasetMeta(datasetIndex);\r\n      if (!meta) {\r\n        throw new Error('No dataset found at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(active, lastActive);\r\n\r\n    if (changed) {\r\n      this._active = active;\r\n      // Make sure we don't use the previous mouse event to override the active elements in update.\r\n      this._lastEvent = null;\r\n      this._updateHoverStyles(active, lastActive);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notifyPlugins(hook, args, filter) {\r\n    return this._plugins.notify(this, hook, args, filter);\r\n  }\r\n\r\n  /**\r\n   * Check if a plugin with the specific ID is registered and enabled\r\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\r\n   * @returns {boolean}\r\n   */\r\n  isPluginEnabled(pluginId) {\r\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateHoverStyles(active, lastActive, replay) {\r\n    const hoverOptions = this.options.hover;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\r\n    const deactivated = diff(lastActive, active);\r\n    const activated = replay ? active : diff(active, lastActive);\r\n\r\n    if (deactivated.length) {\r\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\r\n    }\r\n\r\n    if (activated.length && hoverOptions.mode) {\r\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _eventHandler(e, replay) {\r\n    const args = {\r\n      event: e,\r\n      replay,\r\n      cancelable: true,\r\n      inChartArea: this.isPointInArea(e)\r\n    };\r\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\r\n\r\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\r\n      return;\r\n    }\r\n\r\n    const changed = this._handleEvent(e, replay, args.inChartArea);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterEvent', args, eventFilter);\r\n\r\n    if (changed || args.changed) {\r\n      this.render();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e the event to handle\r\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\r\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\r\n\t * @return {boolean} true if the chart needs to re-render\r\n\t * @private\r\n\t */\r\n  _handleEvent(e, replay, inChartArea) {\r\n    const {_active: lastActive = [], options} = this;\r\n\r\n    // If the event is replayed from `update`, we should evaluate with the final positions.\r\n    //\r\n    // The `replay`:\r\n    // It's the last event (excluding click) that has occurred before `update`.\r\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\r\n    //\r\n    // The why:\r\n    // If animations are active, the elements haven't moved yet compared to state before update.\r\n    // But if they will, we are activating the elements that would be active, if this check\r\n    // was done after the animations have completed. => \"final positions\".\r\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\r\n    // This is done so we do not have to evaluate the active elements each animation frame\r\n    // - it would be expensive.\r\n    const useFinalPosition = replay;\r\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\r\n    const isClick = _isClickEvent(e);\r\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\r\n\r\n    if (inChartArea) {\r\n      // Set _lastEvent to null while we are processing the event handlers.\r\n      // This prevents recursion if the handler calls chart.update()\r\n      this._lastEvent = null;\r\n\r\n      // Invoke onHover hook\r\n      callCallback(options.onHover, [e, active, this], this);\r\n\r\n      if (isClick) {\r\n        callCallback(options.onClick, [e, active, this], this);\r\n      }\r\n    }\r\n\r\n    const changed = !_elementsEqual(active, lastActive);\r\n    if (changed || replay) {\r\n      this._active = active;\r\n      this._updateHoverStyles(active, lastActive, replay);\r\n    }\r\n\r\n    this._lastEvent = lastEvent;\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n   * @param {ChartEvent} e - The event\r\n   * @param {import('../../types/index.js').ActiveElement[]} lastActive - Previously active elements\r\n   * @param {boolean} inChartArea - Is the envent inside chartArea\r\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\r\n   * @returns {import('../../types/index.js').ActiveElement[]} - The active elements\r\n   * @pravate\r\n   */\r\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    const hoverOptions = this.options.hover;\r\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nfunction invalidatePlugins() {\r\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\r\n}\r\n\r\nexport default Chart;\r\n","/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\r\n\r\nimport type {AnyObject} from '../../types/basic.js';\r\nimport type {ChartOptions} from '../../types/index.js';\r\n\r\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\r\n\r\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\r\n  readonly options: T;\r\n  /**\r\n   * Will called with chart options after adapter creation.\r\n   */\r\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\r\n  /**\r\n   * Returns a map of time formats for the supported formatting units defined\r\n   * in Unit as well as 'datetime' representing a detailed date/time string.\r\n   */\r\n  formats(this: DateAdapter<T>): Record<string, string>;\r\n  /**\r\n   * Parses the given `value` and return the associated timestamp.\r\n   * @param value - the value to parse (usually comes from the data)\r\n   * @param [format] - the expected data format\r\n   */\r\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\r\n  /**\r\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\r\n   * @param timestamp - the timestamp to format\r\n   * @param format - the date/time token\r\n   */\r\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\r\n  /**\r\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param amount - the amount to add\r\n   * @param unit - the unit as string\r\n   */\r\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns the number of `unit` between the given timestamps.\r\n   * @param a - the input timestamp (reference)\r\n   * @param b - the timestamp to subtract\r\n   * @param unit - the unit as string\r\n   */\r\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns start of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   * @param [weekday] - the ISO day of the week with 1 being Monday\r\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\r\n   */\r\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\r\n  /**\r\n   * Returns end of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   */\r\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\r\n}\r\n\r\nfunction abstract<T = void>(): T {\r\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\r\n}\r\n\r\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\r\nclass DateAdapterBase implements DateAdapter {\r\n\r\n  /**\r\n   * Override default date adapter methods.\r\n   * Accepts type parameter to define options type.\r\n   * @example\r\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n   *   init() {\r\n   *     console.log(this.options.myAdapterOption);\r\n   *   }\r\n   * })\r\n   */\r\n  static override<T extends AnyObject = AnyObject>(\r\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\r\n  ) {\r\n    Object.assign(DateAdapterBase.prototype, members);\r\n  }\r\n\r\n  readonly options: AnyObject;\r\n\r\n  constructor(options: AnyObject) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  init() {}\r\n\r\n  formats(): Record<string, string> {\r\n    return abstract();\r\n  }\r\n\r\n  parse(): number | null {\r\n    return abstract();\r\n  }\r\n\r\n  format(): string {\r\n    return abstract();\r\n  }\r\n\r\n  add(): number {\r\n    return abstract();\r\n  }\r\n\r\n  diff(): number {\r\n    return abstract();\r\n  }\r\n\r\n  startOf(): number {\r\n    return abstract();\r\n  }\r\n\r\n  endOf(): number {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default {\r\n  _date: DateAdapterBase\r\n};\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {\r\n  _arrayUnique, isArray, isNullOrUndef,\r\n  valueOrDefault, resolveObjectKey, sign, defined\r\n} from '../helpers/index.js';\r\n\r\nfunction getAllScaleValues(scale, type) {\r\n  if (!scale._cache.$bar) {\r\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\r\n    let values = [];\r\n\r\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\r\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\r\n    }\r\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\r\n  }\r\n  return scale._cache.$bar;\r\n}\r\n\r\n/**\r\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\r\n * @private\r\n */\r\nfunction computeMinSampleSize(meta) {\r\n  const scale = meta.iScale;\r\n  const values = getAllScaleValues(scale, meta.type);\r\n  let min = scale._length;\r\n  let i, ilen, curr, prev;\r\n  const updateMinAndPrev = () => {\r\n    if (curr === 32767 || curr === -32768) {\r\n      // Ignore truncated pixels\r\n      return;\r\n    }\r\n    if (defined(prev)) {\r\n      // curr - prev === 0 is ignored\r\n      min = Math.min(min, Math.abs(curr - prev) || min);\r\n    }\r\n    prev = curr;\r\n  };\r\n\r\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForValue(values[i]);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  prev = undefined;\r\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForTick(i);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  return min;\r\n}\r\n\r\n/**\r\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\r\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\r\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\r\n * @private\r\n */\r\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\r\n  const thickness = options.barThickness;\r\n  let size, ratio;\r\n\r\n  if (isNullOrUndef(thickness)) {\r\n    size = ruler.min * options.categoryPercentage;\r\n    ratio = options.barPercentage;\r\n  } else {\r\n    // When bar thickness is enforced, category and bar percentages are ignored.\r\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\r\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\r\n    size = thickness * stackCount;\r\n    ratio = 1;\r\n  }\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio,\r\n    start: ruler.pixels[index] - (size / 2)\r\n  };\r\n}\r\n\r\n/**\r\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\r\n * percentage options are 1), based on the previous and following categories. This mode\r\n * generates bars with different widths when data are not evenly spaced.\r\n * @private\r\n */\r\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\r\n  const pixels = ruler.pixels;\r\n  const curr = pixels[index];\r\n  let prev = index > 0 ? pixels[index - 1] : null;\r\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\r\n  const percent = options.categoryPercentage;\r\n\r\n  if (prev === null) {\r\n    // first data: its size is double based on the next point or,\r\n    // if it's also the last data, we use the scale size.\r\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\r\n  }\r\n\r\n  if (next === null) {\r\n    // last data: its size is also double based on the previous point.\r\n    next = curr + curr - prev;\r\n  }\r\n\r\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\r\n  const size = Math.abs(next - prev) / 2 * percent;\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio: options.barPercentage,\r\n    start\r\n  };\r\n}\r\n\r\nfunction parseFloatBar(entry, item, vScale, i) {\r\n  const startValue = vScale.parse(entry[0], i);\r\n  const endValue = vScale.parse(entry[1], i);\r\n  const min = Math.min(startValue, endValue);\r\n  const max = Math.max(startValue, endValue);\r\n  let barStart = min;\r\n  let barEnd = max;\r\n\r\n  if (Math.abs(min) > Math.abs(max)) {\r\n    barStart = max;\r\n    barEnd = min;\r\n  }\r\n\r\n  // Store `barEnd` (furthest away from origin) as parsed value,\r\n  // to make stacking straight forward\r\n  item[vScale.axis] = barEnd;\r\n\r\n  item._custom = {\r\n    barStart,\r\n    barEnd,\r\n    start: startValue,\r\n    end: endValue,\r\n    min,\r\n    max\r\n  };\r\n}\r\n\r\nfunction parseValue(entry, item, vScale, i) {\r\n  if (isArray(entry)) {\r\n    parseFloatBar(entry, item, vScale, i);\r\n  } else {\r\n    item[vScale.axis] = vScale.parse(entry, i);\r\n  }\r\n  return item;\r\n}\r\n\r\nfunction parseArrayOrPrimitive(meta, data, start, count) {\r\n  const iScale = meta.iScale;\r\n  const vScale = meta.vScale;\r\n  const labels = iScale.getLabels();\r\n  const singleScale = iScale === vScale;\r\n  const parsed = [];\r\n  let i, ilen, item, entry;\r\n\r\n  for (i = start, ilen = start + count; i < ilen; ++i) {\r\n    entry = data[i];\r\n    item = {};\r\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\r\n    parsed.push(parseValue(entry, item, vScale, i));\r\n  }\r\n  return parsed;\r\n}\r\n\r\nfunction isFloatBar(custom) {\r\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\r\n}\r\n\r\nfunction barSign(size, vScale, actualBase) {\r\n  if (size !== 0) {\r\n    return sign(size);\r\n  }\r\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\r\n}\r\n\r\nfunction borderProps(properties) {\r\n  let reverse, start, end, top, bottom;\r\n  if (properties.horizontal) {\r\n    reverse = properties.base > properties.x;\r\n    start = 'left';\r\n    end = 'right';\r\n  } else {\r\n    reverse = properties.base < properties.y;\r\n    start = 'bottom';\r\n    end = 'top';\r\n  }\r\n  if (reverse) {\r\n    top = 'end';\r\n    bottom = 'start';\r\n  } else {\r\n    top = 'start';\r\n    bottom = 'end';\r\n  }\r\n  return {start, end, reverse, top, bottom};\r\n}\r\n\r\nfunction setBorderSkipped(properties, options, stack, index) {\r\n  let edge = options.borderSkipped;\r\n  const res = {};\r\n\r\n  if (!edge) {\r\n    properties.borderSkipped = res;\r\n    return;\r\n  }\r\n\r\n  if (edge === true) {\r\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\r\n    return;\r\n  }\r\n\r\n  const {start, end, reverse, top, bottom} = borderProps(properties);\r\n\r\n  if (edge === 'middle' && stack) {\r\n    properties.enableBorderRadius = true;\r\n    if ((stack._top || 0) === index) {\r\n      edge = top;\r\n    } else if ((stack._bottom || 0) === index) {\r\n      edge = bottom;\r\n    } else {\r\n      res[parseEdge(bottom, start, end, reverse)] = true;\r\n      edge = top;\r\n    }\r\n  }\r\n\r\n  res[parseEdge(edge, start, end, reverse)] = true;\r\n  properties.borderSkipped = res;\r\n}\r\n\r\nfunction parseEdge(edge, a, b, reverse) {\r\n  if (reverse) {\r\n    edge = swap(edge, a, b);\r\n    edge = startEnd(edge, b, a);\r\n  } else {\r\n    edge = startEnd(edge, a, b);\r\n  }\r\n  return edge;\r\n}\r\n\r\nfunction swap(orig, v1, v2) {\r\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\r\n}\r\n\r\nfunction startEnd(v, start, end) {\r\n  return v === 'start' ? start : v === 'end' ? end : v;\r\n}\r\n\r\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\r\n  properties.inflateAmount = inflateAmount === 'auto'\r\n    ? ratio === 1 ? 0.33 : 0\r\n    : inflateAmount;\r\n}\r\n\r\nexport default class BarController extends DatasetController {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'bar',\r\n\r\n    categoryPercentage: 0.8,\r\n    barPercentage: 0.9,\r\n    grouped: true,\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'base', 'width', 'height']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n        offset: true,\r\n        grid: {\r\n          offset: true\r\n        }\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n        beginAtZero: true,\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n\t * Overriding primitive data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding array data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding object data parsing since we support mixed primitive/array\r\n\t * value-scale data for float bars\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const parsed = [];\r\n    let i, ilen, item, obj;\r\n    for (i = start, ilen = start + count; i < ilen; ++i) {\r\n      obj = data[i];\r\n      item = {};\r\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\r\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    super.updateRangeFromParsed(range, scale, parsed, stack);\r\n    const custom = parsed._custom;\r\n    if (custom && scale === this._cachedMeta.vScale) {\r\n      // float bar: only one end of the bar is considered by `super`\r\n      range.min = Math.min(range.min, custom.min);\r\n      range.max = Math.max(range.max, custom.max);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const {iScale, vScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const value = isFloatBar(custom)\r\n      ? '[' + custom.start + ', ' + custom.end + ']'\r\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\r\n\r\n    return {\r\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\r\n      value\r\n    };\r\n  }\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n\r\n    super.initialize();\r\n\r\n    const meta = this._cachedMeta;\r\n    meta.stack = this.getDataset().stack;\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.updateElements(meta.data, 0, meta.data.length, mode);\r\n  }\r\n\r\n  updateElements(bars, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {index, _cachedMeta: {vScale}} = this;\r\n    const base = vScale.getBasePixel();\r\n    const horizontal = vScale.isHorizontal();\r\n    const ruler = this._getRuler();\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const parsed = this.getParsed(i);\r\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\r\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\r\n      const stack = (parsed._stacks || {})[vScale.axis];\r\n\r\n      const properties = {\r\n        horizontal,\r\n        base: vpixels.base,\r\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\r\n        x: horizontal ? vpixels.head : ipixels.center,\r\n        y: horizontal ? ipixels.center : vpixels.head,\r\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\r\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\r\n      };\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\r\n      }\r\n      const options = properties.options || bars[i].options;\r\n      setBorderSkipped(properties, options, stack, index);\r\n      setInflateAmount(properties, options, ruler.ratio);\r\n      this.updateElement(bars[i], i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the stacks based on groups and bar visibility.\r\n\t * @param {number} [last] - The dataset index\r\n\t * @param {number} [dataIndex] - The data index of the ruler\r\n\t * @returns {string[]} The list of stack IDs\r\n\t * @private\r\n\t */\r\n  _getStacks(last, dataIndex) {\r\n    const {iScale} = this._cachedMeta;\r\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\r\n      .filter(meta => meta.controller.options.grouped);\r\n    const stacked = iScale.options.stacked;\r\n    const stacks = [];\r\n\r\n    const skipNull = (meta) => {\r\n      const parsed = meta.controller.getParsed(dataIndex);\r\n      const val = parsed && parsed[meta.vScale.axis];\r\n\r\n      if (isNullOrUndef(val) || isNaN(val)) {\r\n        return true;\r\n      }\r\n    };\r\n\r\n    for (const meta of metasets) {\r\n      if (dataIndex !== undefined && skipNull(meta)) {\r\n        continue;\r\n      }\r\n\r\n      // stacked   | meta.stack\r\n      //           | found | not found | undefined\r\n      // false     |   x   |     x     |     x\r\n      // true      |       |     x     |\r\n      // undefined |       |     x     |     x\r\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\r\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\r\n        stacks.push(meta.stack);\r\n      }\r\n      if (meta.index === last) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\r\n    // stack where possible invisible bars will be located.\r\n    // https://github.com/chartjs/Chart.js/issues/6368\r\n    if (!stacks.length) {\r\n      stacks.push(undefined);\r\n    }\r\n\r\n    return stacks;\r\n  }\r\n\r\n  /**\r\n\t * Returns the effective number of stacks based on groups and bar visibility.\r\n\t * @private\r\n\t */\r\n  _getStackCount(index) {\r\n    return this._getStacks(undefined, index).length;\r\n  }\r\n\r\n  /**\r\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\r\n\t * @param {number} [datasetIndex] - The dataset index\r\n\t * @param {string} [name] - The stack name to find\r\n   * @param {number} [dataIndex]\r\n\t * @returns {number} The stack index\r\n\t * @private\r\n\t */\r\n  _getStackIndex(datasetIndex, name, dataIndex) {\r\n    const stacks = this._getStacks(datasetIndex, dataIndex);\r\n    const index = (name !== undefined)\r\n      ? stacks.indexOf(name)\r\n      : -1; // indexOf returns -1 if element is not present\r\n\r\n    return (index === -1)\r\n      ? stacks.length - 1\r\n      : index;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRuler() {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const pixels = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\r\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\r\n    }\r\n\r\n    const barThickness = opts.barThickness;\r\n    const min = barThickness || computeMinSampleSize(meta);\r\n\r\n    return {\r\n      min,\r\n      pixels,\r\n      start: iScale._startPixel,\r\n      end: iScale._endPixel,\r\n      stackCount: this._getStackCount(),\r\n      scale: iScale,\r\n      grouped: opts.grouped,\r\n      // bar thickness ratio used for non-grouped bars\r\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Note: pixel values are not clamped to the scale area.\r\n\t * @private\r\n\t */\r\n  _calculateBarValuePixels(index) {\r\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\r\n    const actualBase = baseValue || 0;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const floating = isFloatBar(custom);\r\n    let value = parsed[vScale.axis];\r\n    let start = 0;\r\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\r\n    let head, size;\r\n\r\n    if (length !== value) {\r\n      start = length - value;\r\n      length = value;\r\n    }\r\n\r\n    if (floating) {\r\n      value = custom.barStart;\r\n      length = custom.barEnd - custom.barStart;\r\n      // bars crossing origin are not stacked\r\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\r\n        start = 0;\r\n      }\r\n      start += value;\r\n    }\r\n\r\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\r\n    let base = vScale.getPixelForValue(startValue);\r\n\r\n    if (this.chart.getDataVisibility(index)) {\r\n      head = vScale.getPixelForValue(start + length);\r\n    } else {\r\n      // When not visible, no height\r\n      head = base;\r\n    }\r\n\r\n    size = head - base;\r\n\r\n    if (Math.abs(size) < minBarLength) {\r\n      size = barSign(size, vScale, actualBase) * minBarLength;\r\n      if (value === actualBase) {\r\n        base -= size / 2;\r\n      }\r\n      const startPixel = vScale.getPixelForDecimal(0);\r\n      const endPixel = vScale.getPixelForDecimal(1);\r\n      const min = Math.min(startPixel, endPixel);\r\n      const max = Math.max(startPixel, endPixel);\r\n      base = Math.max(Math.min(base, max), min);\r\n      head = base + size;\r\n    }\r\n\r\n    if (base === vScale.getPixelForValue(actualBase)) {\r\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\r\n      base += halfGrid;\r\n      size -= halfGrid;\r\n    }\r\n\r\n    return {\r\n      size,\r\n      base,\r\n      head,\r\n      center: head + size / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _calculateBarIndexPixels(index, ruler) {\r\n    const scale = ruler.scale;\r\n    const options = this.options;\r\n    const skipNull = options.skipNull;\r\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\r\n    let center, size;\r\n    if (ruler.grouped) {\r\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\r\n      const range = options.barThickness === 'flex'\r\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\r\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\r\n\r\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\r\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\r\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\r\n    } else {\r\n      // For non-grouped bar charts, exact pixel values are used\r\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\r\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\r\n    }\r\n\r\n    return {\r\n      base: center - size / 2,\r\n      head: center + size / 2,\r\n      center,\r\n      size\r\n    };\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    const vScale = meta.vScale;\r\n    const rects = meta.data;\r\n    const ilen = rects.length;\r\n    let i = 0;\r\n\r\n    for (; i < ilen; ++i) {\r\n      if (this.getParsed(i)[vScale.axis] !== null) {\r\n        rects[i].draw(this._ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\nfunction getRatioAndOffset(rotation, circumference, cutout) {\r\n  let ratioX = 1;\r\n  let ratioY = 1;\r\n  let offsetX = 0;\r\n  let offsetY = 0;\r\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\r\n  if (circumference < TAU) {\r\n    const startAngle = rotation;\r\n    const endAngle = startAngle + circumference;\r\n    const startX = Math.cos(startAngle);\r\n    const startY = Math.sin(startAngle);\r\n    const endX = Math.cos(endAngle);\r\n    const endY = Math.sin(endAngle);\r\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\r\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\r\n    const maxX = calcMax(0, startX, endX);\r\n    const maxY = calcMax(HALF_PI, startY, endY);\r\n    const minX = calcMin(PI, startX, endX);\r\n    const minY = calcMin(PI + HALF_PI, startY, endY);\r\n    ratioX = (maxX - minX) / 2;\r\n    ratioY = (maxY - minY) / 2;\r\n    offsetX = -(maxX + minX) / 2;\r\n    offsetY = -(maxY + minY) / 2;\r\n  }\r\n  return {ratioX, ratioY, offsetX, offsetY};\r\n}\r\n\r\nexport default class DoughnutController extends DatasetController {\r\n\r\n  static id = 'doughnut';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      // Boolean - Whether we animate the rotation of the Doughnut\r\n      animateRotate: true,\r\n      // Boolean - Whether we animate scaling the Doughnut from the centre\r\n      animateScale: false\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\r\n      },\r\n    },\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: '50%',\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%',\r\n\r\n    // Spacing between arcs\r\n    spacing: 0,\r\n\r\n    indexAxis: 'r',\r\n  };\r\n\r\n  static descriptors = {\r\n    _scriptable: (name) => name !== 'spacing',\r\n    _indexable: (name) => name !== 'spacing',\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    // Need to override these to give a nice default\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle, color}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  fontColor: color,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.enableOptionSharing = true;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.offsetX = undefined;\r\n    this.offsetY = undefined;\r\n  }\r\n\r\n  linkScales() {}\r\n\r\n  /**\r\n\t * Override data parsing, since we are not using scales\r\n\t */\r\n  parse(start, count) {\r\n    const data = this.getDataset().data;\r\n    const meta = this._cachedMeta;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n    } else {\r\n      let getter = (i) => +data[i];\r\n\r\n      if (isObject(data[start])) {\r\n        const {key = 'value'} = this._parsing;\r\n        getter = (i) => +resolveObjectKey(data[i], key);\r\n      }\r\n\r\n      let i, ilen;\r\n      for (i = start, ilen = start + count; i < ilen; ++i) {\r\n        meta._parsed[i] = getter(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRotation() {\r\n    return toRadians(this.options.rotation - 90);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getCircumference() {\r\n    return toRadians(this.options.circumference);\r\n  }\r\n\r\n  /**\r\n\t * Get the maximal rotation & circumference extents\r\n\t * across all visible datasets.\r\n\t */\r\n  _getRotationExtents() {\r\n    let min = TAU;\r\n    let max = -TAU;\r\n\r\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\r\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\r\n        const controller = this.chart.getDatasetMeta(i).controller;\r\n        const rotation = controller._getRotation();\r\n        const circumference = controller._getCircumference();\r\n\r\n        min = Math.min(min, rotation);\r\n        max = Math.max(max, rotation + circumference);\r\n      }\r\n    }\r\n\r\n    return {\r\n      rotation: min,\r\n      circumference: max - min,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {\r\n    const chart = this.chart;\r\n    const {chartArea} = chart;\r\n    const meta = this._cachedMeta;\r\n    const arcs = meta.data;\r\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\r\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\r\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\r\n    const chartWeight = this._getRingWeight(this.index);\r\n\r\n    // Compute the maximal rotation & circumference limits.\r\n    // If we only consider our dataset, this can cause problems when two datasets\r\n    // are both less than a circle with different rotations (starting angles)\r\n    const {circumference, rotation} = this._getRotationExtents();\r\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\r\n    const maxWidth = (chartArea.width - spacing) / ratioX;\r\n    const maxHeight = (chartArea.height - spacing) / ratioY;\r\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\r\n    const outerRadius = toDimension(this.options.radius, maxRadius);\r\n    const innerRadius = Math.max(outerRadius * cutout, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\r\n    this.offsetX = offsetX * outerRadius;\r\n    this.offsetY = offsetY * outerRadius;\r\n\r\n    meta.total = this.calculateTotal();\r\n\r\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\r\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\r\n\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _circumference(i, reset) {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const circumference = this._getCircumference();\r\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\r\n      return 0;\r\n    }\r\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const centerX = (chartArea.left + chartArea.right) / 2;\r\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\r\n    const animateScale = reset && animationOpts.animateScale;\r\n    const innerRadius = animateScale ? 0 : this.innerRadius;\r\n    const outerRadius = animateScale ? 0 : this.outerRadius;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    let startAngle = this._getRotation();\r\n    let i;\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      startAngle += this._circumference(i, reset);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const circumference = this._circumference(i, reset);\r\n      const arc = arcs[i];\r\n      const properties = {\r\n        x: centerX + this.offsetX,\r\n        y: centerY + this.offsetY,\r\n        startAngle,\r\n        endAngle: startAngle + circumference,\r\n        circumference,\r\n        outerRadius,\r\n        innerRadius\r\n      };\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\r\n      }\r\n      startAngle += circumference;\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  calculateTotal() {\r\n    const meta = this._cachedMeta;\r\n    const metaData = meta.data;\r\n    let total = 0;\r\n    let i;\r\n\r\n    for (i = 0; i < metaData.length; i++) {\r\n      const value = meta._parsed[i];\r\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\r\n        total += Math.abs(value);\r\n      }\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  calculateCircumference(value) {\r\n    const total = this._cachedMeta.total;\r\n    if (total > 0 && !isNaN(value)) {\r\n      return TAU * (Math.abs(value) / total);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  getMaxBorderWidth(arcs) {\r\n    let max = 0;\r\n    const chart = this.chart;\r\n    let i, ilen, meta, controller, options;\r\n\r\n    if (!arcs) {\r\n      // Find the outmost visible dataset\r\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\r\n        if (chart.isDatasetVisible(i)) {\r\n          meta = chart.getDatasetMeta(i);\r\n          arcs = meta.data;\r\n          controller = meta.controller;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!arcs) {\r\n      return 0;\r\n    }\r\n\r\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      options = controller.resolveDataElementOptions(i);\r\n      if (options.borderAlign !== 'inner') {\r\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  getMaxOffset(arcs) {\r\n    let max = 0;\r\n\r\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      const options = this.resolveDataElementOptions(i);\r\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\r\n\t * @private\r\n\t */\r\n  _getRingWeightOffset(datasetIndex) {\r\n    let ringWeightOffset = 0;\r\n\r\n    for (let i = 0; i < datasetIndex; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        ringWeightOffset += this._getRingWeight(i);\r\n      }\r\n    }\r\n\r\n    return ringWeightOffset;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRingWeight(datasetIndex) {\r\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\r\n  }\r\n\r\n  /**\r\n\t * Returns the sum of all visible data set weights.\r\n\t * @private\r\n\t */\r\n  _getVisibleDatasetWeightTotal() {\r\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {valueOrDefault} from '../helpers/helpers.core.js';\r\n\r\nexport default class BubbleController extends DatasetController {\r\n\r\n  static id = 'bubble';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'borderWidth', 'radius']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    super.initialize();\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const parsed = super.parseArrayData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const parsed = super.parseObjectData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const data = this._cachedMeta.data;\r\n\r\n    let max = 0;\r\n    for (let i = data.length - 1; i >= 0; --i) {\r\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n    }\r\n    return max > 0 && max;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n    const r = parsed._custom;\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const points = this._cachedMeta.data;\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const parsed = !reset && this.getParsed(i);\r\n      const properties = {};\r\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\r\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n\r\n        if (reset) {\r\n          properties.options.radius = 0;\r\n        }\r\n      }\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    const parsed = this.getParsed(index);\r\n    let values = super.resolveDataElementOptions(index, mode);\r\n\r\n    // In case values were cached (and thus frozen), we need to clone the values\r\n    if (values.$shared) {\r\n      values = Object.assign({}, values, {$shared: false});\r\n    }\r\n\r\n    // Custom radius resolution\r\n    const radius = values.radius;\r\n    if (mode !== 'active') {\r\n      values.radius = 0;\r\n    }\r\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\r\n\r\n    return values;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isNullOrUndef} from '../helpers/index.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\r\n\r\nexport default class LineController extends DatasetController {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n\r\n    showLine: true,\r\n    spanGaps: false,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n      },\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    this.supportsDecimation = true;\r\n    super.initialize();\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {dataset: line, data: points = [], _dataset} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    // Update Line\r\n    line._chart = this.chart;\r\n    line._datasetIndex = this.index;\r\n    line._decimated = !!_dataset._decimated;\r\n    line.points = points;\r\n\r\n    const options = this.resolveDatasetElementOptions(mode);\r\n    if (!this.options.showLine) {\r\n      options.borderWidth = 0;\r\n    }\r\n    options.segment = this.options.segment;\r\n    this.updateElement(line, undefined, {\r\n      animated: !animationsDisabled,\r\n      options\r\n    }, mode);\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    const end = start + count;\r\n    const pointsCount = points.length;\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = 0; i < pointsCount; ++i) {\r\n      const point = points[i];\r\n      const properties = directUpdate ? point : {};\r\n\r\n      if (i < start || i >= end) {\r\n        properties.skip = true;\r\n        continue;\r\n      }\r\n\r\n      const parsed = this.getParsed(i);\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n    const data = meta.data || [];\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\r\n    super.draw();\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\r\n\r\nexport default class PolarAreaController extends DatasetController {\r\n\r\n  static id = 'polarArea';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: true\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\r\n      },\r\n    },\r\n    indexAxis: 'r',\r\n    startAngle: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle, color}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  fontColor: color,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n        angleLines: {\r\n          display: false\r\n        },\r\n        beginAtZero: true,\r\n        grid: {\r\n          circular: true\r\n        },\r\n        pointLabels: {\r\n          display: false\r\n        },\r\n        startAngle: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const arcs = this._cachedMeta.data;\r\n\r\n    this._updateRadius();\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  getMinMax() {\r\n    const meta = this._cachedMeta;\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n\r\n    meta.data.forEach((element, index) => {\r\n      const parsed = this.getParsed(index).r;\r\n\r\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\r\n        if (parsed < range.min) {\r\n          range.min = parsed;\r\n        }\r\n\r\n        if (parsed > range.max) {\r\n          range.max = parsed;\r\n        }\r\n      }\r\n    });\r\n\r\n    return range;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateRadius() {\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n\r\n    const outerRadius = Math.max(minSize / 2, 0);\r\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\r\n\r\n    this.outerRadius = outerRadius - (radiusLength * this.index);\r\n    this.innerRadius = this.outerRadius - radiusLength;\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const scale = this._cachedMeta.rScale;\r\n    const centerX = scale.xCenter;\r\n    const centerY = scale.yCenter;\r\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\r\n    let angle = datasetStartAngle;\r\n    let i;\r\n\r\n    const defaultAngle = 360 / this.countVisibleElements();\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      angle += this._computeAngle(i, mode, defaultAngle);\r\n    }\r\n    for (i = start; i < start + count; i++) {\r\n      const arc = arcs[i];\r\n      let startAngle = angle;\r\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\r\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\r\n      angle = endAngle;\r\n\r\n      if (reset) {\r\n        if (animationOpts.animateScale) {\r\n          outerRadius = 0;\r\n        }\r\n        if (animationOpts.animateRotate) {\r\n          startAngle = endAngle = datasetStartAngle;\r\n        }\r\n      }\r\n\r\n      const properties = {\r\n        x: centerX,\r\n        y: centerY,\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle,\r\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\r\n      };\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  countVisibleElements() {\r\n    const meta = this._cachedMeta;\r\n    let count = 0;\r\n\r\n    meta.data.forEach((element, index) => {\r\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeAngle(index, mode, defaultAngle) {\r\n    return this.chart.getDataVisibility(index)\r\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\r\n      : 0;\r\n  }\r\n}\r\n","import DoughnutController from './controller.doughnut.js';\r\n\r\n// Pie charts are Doughnut chart with different defaults\r\nexport default class PieController extends DoughnutController {\r\n\r\n  static id = 'pie';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: 0,\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outr radius of the chart\r\n    radius: '100%'\r\n  };\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\r\n\r\nexport default class RadarController extends DatasetController {\r\n\r\n  static id = 'radar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n    indexAxis: 'r',\r\n    showLine: true,\r\n    elements: {\r\n      line: {\r\n        fill: 'start'\r\n      }\r\n    },\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const vScale = this._cachedMeta.vScale;\r\n    const parsed = this.getParsed(index);\r\n\r\n    return {\r\n      label: vScale.getLabels()[index],\r\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const line = meta.dataset;\r\n    const points = meta.data || [];\r\n    const labels = meta.iScale.getLabels();\r\n\r\n    // Update Line\r\n    line.points = points;\r\n    // In resize mode only point locations change, so no need to set the points or options.\r\n    if (mode !== 'resize') {\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      if (!this.options.showLine) {\r\n        options.borderWidth = 0;\r\n      }\r\n\r\n      const properties = {\r\n        _loop: true,\r\n        _fullLoop: labels.length === points.length,\r\n        options\r\n      };\r\n\r\n      this.updateElement(line, undefined, properties, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const scale = this._cachedMeta.rScale;\r\n    const reset = mode === 'reset';\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\r\n\r\n      const x = reset ? scale.xCenter : pointPosition.x;\r\n      const y = reset ? scale.yCenter : pointPosition.y;\r\n\r\n      const properties = {\r\n        x,\r\n        y,\r\n        angle: pointPosition.angle,\r\n        skip: isNaN(x) || isNaN(y),\r\n        options\r\n      };\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isNullOrUndef} from '../helpers/index.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\r\n\r\nexport default class ScatterController extends DatasetController {\r\n\r\n  static id = 'scatter';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n    showLine: false,\r\n    fill: false\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n\r\n    interaction: {\r\n      mode: 'point'\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {data: points = []} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    if (this.options.showLine) {\r\n\r\n      const {dataset: line, _dataset} = meta;\r\n\r\n      // Update Line\r\n      line._chart = this.chart;\r\n      line._datasetIndex = this.index;\r\n      line._decimated = !!_dataset._decimated;\r\n      line.points = points;\r\n\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      options.segment = this.options.segment;\r\n      this.updateElement(line, undefined, {\r\n        animated: !animationsDisabled,\r\n        options\r\n      }, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  addElements() {\r\n    const {showLine} = this.options;\r\n\r\n    if (!this.datasetElementType && showLine) {\r\n      this.datasetElementType = this.chart.registry.getElement('line');\r\n    }\r\n\r\n    super.addElements();\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = start; i < start + count; ++i) {\r\n      const point = points[i];\r\n      const parsed = this.getParsed(i);\r\n      const properties = directUpdate ? point : {};\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data || [];\r\n\r\n    if (!this.options.showLine) {\r\n      let max = 0;\r\n      for (let i = data.length - 1; i >= 0; --i) {\r\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n      }\r\n      return max > 0 && max;\r\n    }\r\n\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\r\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\r\nimport {_readValueToProps} from '../helpers/helpers.options.js';\r\nimport type {ArcOptions, Point} from '../../types/index.js';\r\n\r\n\r\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\r\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\r\n  let angleMargin = pixelMargin / outerRadius;\r\n\r\n  // Draw an inner border by clipping the arc and drawing a double-width border\r\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\r\n  if (innerRadius > pixelMargin) {\r\n    angleMargin = pixelMargin / innerRadius;\r\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\r\n  } else {\r\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\r\n  }\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction toRadiusCorners(value) {\r\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\r\n}\r\n\r\n/**\r\n * Parse border radius from the provided options\r\n */\r\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\r\n  const o = toRadiusCorners(arc.options.borderRadius);\r\n  const halfThickness = (outerRadius - innerRadius) / 2;\r\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\r\n\r\n  // Outer limits are complicated. We want to compute the available angular distance at\r\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\r\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\r\n  //\r\n  // If the borderRadius is large, that value can become negative.\r\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\r\n  // we know that the thickness term will dominate and compute the limits at that point\r\n  const computeOuterLimit = (val) => {\r\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\r\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\r\n  };\r\n\r\n  return {\r\n    outerStart: computeOuterLimit(o.outerStart),\r\n    outerEnd: computeOuterLimit(o.outerEnd),\r\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\r\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\r\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\r\n  return {\r\n    x: x + r * Math.cos(theta),\r\n    y: y + r * Math.sin(theta),\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */\r\nfunction pathArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  end: number,\r\n  circular: boolean,\r\n) {\r\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\r\n\r\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\r\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\r\n\r\n  let spacingOffset = 0;\r\n  const alpha = end - start;\r\n\r\n  if (spacing) {\r\n    // When spacing is present, it is the same for all items\r\n    // So we adjust the start and end angle of the arc such that\r\n    // the distance is the same as it would be without the spacing\r\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\r\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\r\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\r\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\r\n    spacingOffset = (alpha - adjustedAngle) / 2;\r\n  }\r\n\r\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\r\n  const angleOffset = (alpha - beta) / 2;\r\n  const startAngle = start + angleOffset + spacingOffset;\r\n  const endAngle = end - angleOffset - spacingOffset;\r\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\r\n\r\n  const outerStartAdjustedRadius = outerRadius - outerStart;\r\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\r\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\r\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\r\n\r\n  const innerStartAdjustedRadius = innerRadius + innerStart;\r\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\r\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\r\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\r\n\r\n  ctx.beginPath();\r\n\r\n  if (circular) {\r\n    // The first arc segments from point 1 to point a to point 2\r\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\r\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\r\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\r\n\r\n    // The corner segment from point 2 to point 3\r\n    if (outerEnd > 0) {\r\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\r\n    }\r\n\r\n    // The line from point 3 to point 4\r\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\r\n    ctx.lineTo(p4.x, p4.y);\r\n\r\n    // The corner segment from point 4 to point 5\r\n    if (innerEnd > 0) {\r\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\r\n    }\r\n\r\n    // The inner arc from point 5 to point b to point 6\r\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\r\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\r\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\r\n\r\n    // The corner segment from point 6 to point 7\r\n    if (innerStart > 0) {\r\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\r\n    }\r\n\r\n    // The line from point 7 to point 8\r\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\r\n    ctx.lineTo(p8.x, p8.y);\r\n\r\n    // The corner segment from point 8 to point 1\r\n    if (outerStart > 0) {\r\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\r\n    }\r\n  } else {\r\n    ctx.moveTo(x, y);\r\n\r\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\r\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerStartX, outerStartY);\r\n\r\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\r\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerEndX, outerEndY);\r\n  }\r\n\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  circular: boolean,\r\n) {\r\n  const {fullCircles, startAngle, circumference} = element;\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.fill();\r\n    }\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + (circumference % TAU || TAU);\r\n    }\r\n  }\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.fill();\r\n  return endAngle;\r\n}\r\n\r\nfunction drawBorder(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  circular: boolean,\r\n) {\r\n  const {fullCircles, startAngle, circumference, options} = element;\r\n  const {borderWidth, borderJoinStyle} = options;\r\n  const inner = options.borderAlign === 'inner';\r\n\r\n  if (!borderWidth) {\r\n    return;\r\n  }\r\n\r\n  if (inner) {\r\n    ctx.lineWidth = borderWidth * 2;\r\n    ctx.lineJoin = borderJoinStyle || 'round';\r\n  } else {\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.lineJoin = borderJoinStyle || 'bevel';\r\n  }\r\n\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.stroke();\r\n    }\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + (circumference % TAU || TAU);\r\n    }\r\n  }\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, endAngle);\r\n  }\r\n\r\n  if (!fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nexport interface ArcProps extends Point {\r\n  startAngle: number;\r\n  endAngle: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  circumference: number;\r\n}\r\n\r\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\r\n\r\n  static id = 'arc';\r\n\r\n  static defaults = {\r\n    borderAlign: 'center',\r\n    borderColor: '#fff',\r\n    borderJoinStyle: undefined,\r\n    borderRadius: 0,\r\n    borderWidth: 2,\r\n    offset: 0,\r\n    spacing: 0,\r\n    angle: undefined,\r\n    circular: true,\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor'\r\n  };\r\n\r\n  circumference: number;\r\n  endAngle: number;\r\n  fullCircles: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  pixelMargin: number;\r\n  startAngle: number;\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.circumference = undefined;\r\n    this.startAngle = undefined;\r\n    this.endAngle = undefined;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.pixelMargin = 0;\r\n    this.fullCircles = 0;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\r\n    const point = this.getProps(['x', 'y'], useFinalPosition);\r\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\r\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference'\r\n    ], useFinalPosition);\r\n    const rAdjust = this.options.spacing / 2;\r\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\r\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\r\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\r\n\r\n    return (betweenAngles && withinRadius);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition: boolean) {\r\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\r\n      'x',\r\n      'y',\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference',\r\n    ], useFinalPosition);\r\n    const {offset, spacing} = this.options;\r\n    const halfAngle = (startAngle + endAngle) / 2;\r\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\r\n    return {\r\n      x: x + Math.cos(halfAngle) * halfRadius,\r\n      y: y + Math.sin(halfAngle) * halfRadius\r\n    };\r\n  }\r\n\r\n  tooltipPosition(useFinalPosition: boolean) {\r\n    return this.getCenterPoint(useFinalPosition);\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    const {options, circumference} = this;\r\n    const offset = (options.offset || 0) / 4;\r\n    const spacing = (options.spacing || 0) / 2;\r\n    const circular = options.circular;\r\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\r\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\r\n\r\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\r\n      return;\r\n    }\r\n\r\n    ctx.save();\r\n\r\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\r\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\r\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\r\n    const radiusOffset = offset * fix;\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n\r\n    drawArc(ctx, this, radiusOffset, spacing, circular);\r\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\r\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\r\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\r\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\r\nimport {valueOrDefault} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./element.point.js').default } PointElement\r\n */\r\n\r\nfunction setStyle(ctx, options, style = options) {\r\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\r\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\r\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\r\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\r\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\r\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\r\n}\r\n\r\nfunction lineTo(ctx, previous, target) {\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\nfunction getLineMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedLineTo;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierCurveTo;\r\n  }\r\n\r\n  return lineTo;\r\n}\r\n\r\nfunction pathVars(points, segment, params = {}) {\r\n  const count = points.length;\r\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\r\n  const {start: segmentStart, end: segmentEnd} = segment;\r\n  const start = Math.max(paramsStart, segmentStart);\r\n  const end = Math.min(paramsEnd, segmentEnd);\r\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\r\n\r\n  return {\r\n    count,\r\n    start,\r\n    loop: segment.loop,\r\n    ilen: end < start && !outside ? count + end - start : end - start\r\n  };\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction pathSegment(ctx, line, segment, params) {\r\n  const {points, options} = line;\r\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\r\n  const lineMethod = getLineMethod(options);\r\n  // eslint-disable-next-line prefer-const\r\n  let {move = true, reverse} = params || {};\r\n  let i, point, prev;\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[(start + (reverse ? ilen - i : i)) % count];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    } else if (move) {\r\n      ctx.moveTo(point.x, point.y);\r\n      move = false;\r\n    } else {\r\n      lineMethod(ctx, prev, point, reverse, options.stepped);\r\n    }\r\n\r\n    prev = point;\r\n  }\r\n\r\n  if (loop) {\r\n    point = points[(start + (reverse ? ilen : 0)) % count];\r\n    lineMethod(ctx, prev, point, reverse, options.stepped);\r\n  }\r\n\r\n  return !!loop;\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction fastPathSegment(ctx, line, segment, params) {\r\n  const points = line.points;\r\n  const {count, start, ilen} = pathVars(points, segment, params);\r\n  const {move = true, reverse} = params || {};\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, prevX, minY, maxY, lastY;\r\n\r\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\r\n  const drawX = () => {\r\n    if (minY !== maxY) {\r\n      // Draw line to maxY and minY, using the average x-coordinate\r\n      ctx.lineTo(avgX, maxY);\r\n      ctx.lineTo(avgX, minY);\r\n      // Line to y-value of last point in group. So the line continues\r\n      // from correct position. Not using move, to have solid path.\r\n      ctx.lineTo(avgX, lastY);\r\n    }\r\n  };\r\n\r\n  if (move) {\r\n    point = points[pointIndex(0)];\r\n    ctx.moveTo(point.x, point.y);\r\n  }\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[pointIndex(i)];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    }\r\n\r\n    const x = point.x;\r\n    const y = point.y;\r\n    const truncX = x | 0; // truncated x-coordinate\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      avgX = (countX * avgX + x) / ++countX;\r\n    } else {\r\n      drawX();\r\n      // Draw line to next x-position, using the first (or only)\r\n      // y-value in that group\r\n      ctx.lineTo(x, y);\r\n\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n    }\r\n    // Keep track of the last y-value in group\r\n    lastY = y;\r\n  }\r\n  drawX();\r\n}\r\n\r\n/**\r\n * @param {LineElement} line - the line\r\n * @returns {function}\r\n * @private\r\n */\r\nfunction _getSegmentMethod(line) {\r\n  const opts = line.options;\r\n  const borderDash = opts.borderDash && opts.borderDash.length;\r\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\r\n  return useFastPath ? fastPathSegment : pathSegment;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _getInterpolationMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedInterpolation;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierInterpolation;\r\n  }\r\n\r\n  return _pointInLine;\r\n}\r\n\r\nfunction strokePathWithCache(ctx, line, start, count) {\r\n  let path = line._path;\r\n  if (!path) {\r\n    path = line._path = new Path2D();\r\n    if (line.path(path, start, count)) {\r\n      path.closePath();\r\n    }\r\n  }\r\n  setStyle(ctx, line.options);\r\n  ctx.stroke(path);\r\n}\r\n\r\nfunction strokePathDirect(ctx, line, start, count) {\r\n  const {segments, options} = line;\r\n  const segmentMethod = _getSegmentMethod(line);\r\n\r\n  for (const segment of segments) {\r\n    setStyle(ctx, options, segment.style);\r\n    ctx.beginPath();\r\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\r\n      ctx.closePath();\r\n    }\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nconst usePath2D = typeof Path2D === 'function';\r\n\r\nfunction draw(ctx, line, start, count) {\r\n  if (usePath2D && !line.options.segment) {\r\n    strokePathWithCache(ctx, line, start, count);\r\n  } else {\r\n    strokePathDirect(ctx, line, start, count);\r\n  }\r\n}\r\n\r\nexport default class LineElement extends Element {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0,\r\n    borderJoinStyle: 'miter',\r\n    borderWidth: 3,\r\n    capBezierPoints: true,\r\n    cubicInterpolationMode: 'default',\r\n    fill: false,\r\n    spanGaps: false,\r\n    stepped: false,\r\n    tension: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n\r\n  static descriptors = {\r\n    _scriptable: true,\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.animated = true;\r\n    this.options = undefined;\r\n    this._chart = undefined;\r\n    this._loop = undefined;\r\n    this._fullLoop = undefined;\r\n    this._path = undefined;\r\n    this._points = undefined;\r\n    this._segments = undefined;\r\n    this._decimated = false;\r\n    this._pointsUpdated = false;\r\n    this._datasetIndex = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  updateControlPoints(chartArea, indexAxis) {\r\n    const options = this.options;\r\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\r\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\r\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\r\n      this._pointsUpdated = true;\r\n    }\r\n  }\r\n\r\n  set points(points) {\r\n    this._points = points;\r\n    delete this._segments;\r\n    delete this._path;\r\n    this._pointsUpdated = false;\r\n  }\r\n\r\n  get points() {\r\n    return this._points;\r\n  }\r\n\r\n  get segments() {\r\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\r\n  }\r\n\r\n  /**\r\n\t * First non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  first() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    return segments.length && points[segments[0].start];\r\n  }\r\n\r\n  /**\r\n\t * Last non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  last() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    const count = segments.length;\r\n    return count && points[segments[count - 1].end];\r\n  }\r\n\r\n  /**\r\n\t * Interpolate a point in this line at the same value on `property` as\r\n\t * the reference `point` provided\r\n\t * @param {PointElement} point - the reference point\r\n\t * @param {string} property - the property to match on\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  interpolate(point, property) {\r\n    const options = this.options;\r\n    const value = point[property];\r\n    const points = this.points;\r\n    const segments = _boundSegments(this, {property, start: value, end: value});\r\n\r\n    if (!segments.length) {\r\n      return;\r\n    }\r\n\r\n    const result = [];\r\n    const _interpolate = _getInterpolationMethod(options);\r\n    let i, ilen;\r\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\r\n      const {start, end} = segments[i];\r\n      const p1 = points[start];\r\n      const p2 = points[end];\r\n      if (p1 === p2) {\r\n        result.push(p1);\r\n        continue;\r\n      }\r\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\r\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\r\n      interpolated[property] = point[property];\r\n      result.push(interpolated);\r\n    }\r\n    return result.length === 1 ? result[0] : result;\r\n  }\r\n\r\n  /**\r\n\t * Append a segment of this line to current path.\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} segment\r\n\t * @param {number} segment.start - start index of the segment, referring the points array\r\n \t * @param {number} segment.end - end index of the segment, referring the points array\r\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\r\n\t * @param {object} params\r\n\t * @param {boolean} params.move - move to starting point (vs line to it)\r\n\t * @param {boolean} params.reverse - path the segment from end to start\r\n\t * @param {number} params.start - limit segment to points starting from `start` index\r\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\r\n\t */\r\n  pathSegment(ctx, segment, params) {\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    return segmentMethod(ctx, this, segment, params);\r\n  }\r\n\r\n  /**\r\n\t * Append all segments of this line to current path.\r\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\r\n\t */\r\n  path(ctx, start, count) {\r\n    const segments = this.segments;\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    let loop = this._loop;\r\n\r\n    start = start || 0;\r\n    count = count || (this.points.length - start);\r\n\r\n    for (const segment of segments) {\r\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\r\n    }\r\n    return !!loop;\r\n  }\r\n\r\n  /**\r\n\t * Draw\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} chartArea\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t */\r\n  draw(ctx, chartArea, start, count) {\r\n    const options = this.options || {};\r\n    const points = this.points || [];\r\n\r\n    if (points.length && options.borderWidth) {\r\n      ctx.save();\r\n\r\n      draw(ctx, this, start, count);\r\n\r\n      ctx.restore();\r\n    }\r\n\r\n    if (this.animated) {\r\n      // When line is animated, the control points and path are not cached.\r\n      this._pointsUpdated = false;\r\n      this._path = undefined;\r\n    }\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\r\nimport type {\r\n  CartesianParsedData,\r\n  ChartArea,\r\n  Point,\r\n  PointHoverOptions,\r\n  PointOptions,\r\n} from '../../types/index.js';\r\n\r\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\r\n  const options = el.options;\r\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\r\n\r\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\r\n}\r\n\r\nexport type PointProps = Point\r\n\r\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\r\n\r\n  static id = 'point';\r\n\r\n  parsed: CartesianParsedData;\r\n  skip?: boolean;\r\n  stop?: boolean;\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderWidth: 1,\r\n    hitRadius: 1,\r\n    hoverBorderWidth: 1,\r\n    hoverRadius: 4,\r\n    pointStyle: 'circle',\r\n    radius: 3,\r\n    rotation: 0\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.parsed = undefined;\r\n    this.skip = undefined;\r\n    this.stop = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\r\n    const options = this.options;\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\r\n  }\r\n\r\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseX, 'x', useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseY, 'y', useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition?: boolean) {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y};\r\n  }\r\n\r\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\r\n    options = options || this.options || {};\r\n    let radius = options.radius || 0;\r\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\r\n    const borderWidth = radius && options.borderWidth || 0;\r\n    return (radius + borderWidth) * 2;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\r\n    const options = this.options;\r\n\r\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\r\n      return;\r\n    }\r\n\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n    ctx.fillStyle = options.backgroundColor;\r\n    drawPoint(ctx, options, this.x, this.y);\r\n  }\r\n\r\n  getRange() {\r\n    const options = this.options || {};\r\n    // @ts-expect-error Fallbacks should never be hit in practice\r\n    return options.radius + options.hitRadius;\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\r\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\r\n\r\n/**\r\n * Helper function to get the bounds of the bar regardless of the orientation\r\n * @param {BarElement} bar the bar\r\n * @param {boolean} [useFinalPosition]\r\n * @return {object} bounds of the bar\r\n * @private\r\n */\r\nfunction getBarBounds(bar, useFinalPosition) {\r\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\r\n\r\n  let left, right, top, bottom, half;\r\n\r\n  if (bar.horizontal) {\r\n    half = height / 2;\r\n    left = Math.min(x, base);\r\n    right = Math.max(x, base);\r\n    top = y - half;\r\n    bottom = y + half;\r\n  } else {\r\n    half = width / 2;\r\n    left = x - half;\r\n    right = x + half;\r\n    top = Math.min(y, base);\r\n    bottom = Math.max(y, base);\r\n  }\r\n\r\n  return {left, top, right, bottom};\r\n}\r\n\r\nfunction skipOrLimit(skip, value, min, max) {\r\n  return skip ? 0 : _limitValue(value, min, max);\r\n}\r\n\r\nfunction parseBorderWidth(bar, maxW, maxH) {\r\n  const value = bar.options.borderWidth;\r\n  const skip = bar.borderSkipped;\r\n  const o = toTRBL(value);\r\n\r\n  return {\r\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\r\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\r\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\r\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\r\n  };\r\n}\r\n\r\nfunction parseBorderRadius(bar, maxW, maxH) {\r\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\r\n  const value = bar.options.borderRadius;\r\n  const o = toTRBLCorners(value);\r\n  const maxR = Math.min(maxW, maxH);\r\n  const skip = bar.borderSkipped;\r\n\r\n  // If the value is an object, assume the user knows what they are doing\r\n  // and apply as directed.\r\n  const enableBorder = enableBorderRadius || isObject(value);\r\n\r\n  return {\r\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\r\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\r\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\r\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\r\n  };\r\n}\r\n\r\nfunction boundingRects(bar) {\r\n  const bounds = getBarBounds(bar);\r\n  const width = bounds.right - bounds.left;\r\n  const height = bounds.bottom - bounds.top;\r\n  const border = parseBorderWidth(bar, width / 2, height / 2);\r\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\r\n\r\n  return {\r\n    outer: {\r\n      x: bounds.left,\r\n      y: bounds.top,\r\n      w: width,\r\n      h: height,\r\n      radius\r\n    },\r\n    inner: {\r\n      x: bounds.left + border.l,\r\n      y: bounds.top + border.t,\r\n      w: width - border.l - border.r,\r\n      h: height - border.t - border.b,\r\n      radius: {\r\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\r\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\r\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\r\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction inRange(bar, x, y, useFinalPosition) {\r\n  const skipX = x === null;\r\n  const skipY = y === null;\r\n  const skipBoth = skipX && skipY;\r\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\r\n\r\n  return bounds\r\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\r\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\r\n}\r\n\r\nfunction hasRadius(radius) {\r\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nfunction addNormalRectPath(ctx, rect) {\r\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nfunction inflateRect(rect, amount, refRect = {}) {\r\n  const x = rect.x !== refRect.x ? -amount : 0;\r\n  const y = rect.y !== refRect.y ? -amount : 0;\r\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\r\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\r\n  return {\r\n    x: rect.x + x,\r\n    y: rect.y + y,\r\n    w: rect.w + w,\r\n    h: rect.h + h,\r\n    radius: rect.radius\r\n  };\r\n}\r\n\r\nexport default class BarElement extends Element {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderSkipped: 'start',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    inflateAmount: 'auto',\r\n    pointStyle: undefined\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.horizontal = undefined;\r\n    this.base = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.inflateAmount = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\r\n    const {inner, outer} = boundingRects(this);\r\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\r\n\r\n    ctx.save();\r\n\r\n    if (outer.w !== inner.w || outer.h !== inner.h) {\r\n      ctx.beginPath();\r\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\r\n      ctx.clip();\r\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\r\n      ctx.fillStyle = borderColor;\r\n      ctx.fill('evenodd');\r\n    }\r\n\r\n    ctx.beginPath();\r\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    return inRange(this, mouseX, mouseY, useFinalPosition);\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, null, useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, null, mouseY, useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\r\n    return {\r\n      x: horizontal ? (x + base) / 2 : x,\r\n      y: horizontal ? y : (y + base) / 2\r\n    };\r\n  }\r\n\r\n  getRange(axis) {\r\n    return axis === 'x' ? this.width / 2 : this.height / 2;\r\n  }\r\n}\r\n","import type {Chart, ChartConfiguration, ChartDataset} from '../types.js';\r\n\r\nexport interface ColorsPluginOptions {\r\n  enabled?: boolean;\r\n}\r\n\r\ninterface ColorsDescriptor {\r\n  backgroundColor?: unknown;\r\n  borderColor?: unknown;\r\n}\r\n\r\nconst BORDER_COLORS = [\r\n  'rgb(54, 162, 235)', // blue\r\n  'rgb(255, 99, 132)', // red\r\n  'rgb(255, 159, 64)', // orange\r\n  'rgb(255, 205, 86)', // yellow\r\n  'rgb(75, 192, 192)', // green\r\n  'rgb(153, 102, 255)', // purple\r\n  'rgb(201, 203, 207)' // grey\r\n];\r\n\r\n// Border colors with 50% transparency\r\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\r\n\r\nfunction getBorderColor(i: number) {\r\n  return BORDER_COLORS[i % BORDER_COLORS.length];\r\n}\r\n\r\nfunction getBackgroundColor(i: number) {\r\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\r\n}\r\n\r\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\r\n  dataset.borderColor = getBorderColor(i);\r\n  dataset.backgroundColor = getBackgroundColor(i);\r\n\r\n  return ++i;\r\n}\r\n\r\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\r\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\r\n\r\n  return i;\r\n}\r\n\r\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\r\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\r\n\r\n  return i;\r\n}\r\n\r\nfunction getColorizer(chartType: string) {\r\n  let i = 0;\r\n\r\n  return (dataset: ChartDataset) => {\r\n    const type = dataset.type || chartType;\r\n\r\n    if (type === 'doughnut' || type === 'pie') {\r\n      i = colorizeDoughnutDataset(dataset, i);\r\n    } else if (type === 'polarArea') {\r\n      i = colorizePolarAreaDataset(dataset, i);\r\n    } else if (type) {\r\n      i = colorizeDefaultDataset(dataset, i);\r\n    }\r\n  };\r\n}\r\n\r\nfunction containsColorsDefinitions(\r\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\r\n) {\r\n  let k: number | string;\r\n\r\n  for (k in descriptors) {\r\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  id: 'colors',\r\n\r\n  defaults: {\r\n    enabled: true,\r\n  },\r\n\r\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\r\n    if (!options.enabled) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      type,\r\n      options: {elements},\r\n      data: {datasets}\r\n    } = chart.config as ChartConfiguration;\r\n\r\n    if (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements)) {\r\n      return;\r\n    }\r\n\r\n    const colorizer = getColorizer(type);\r\n\r\n    datasets.forEach(colorizer);\r\n  }\r\n};\r\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\r\n\r\nfunction lttbDecimation(data, start, count, availableWidth, options) {\r\n  /**\r\n   * Implementation of the Largest Triangle Three Buckets algorithm.\r\n   *\r\n   * This implementation is based on the original implementation by Sveinn Steinarsson\r\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\r\n   *\r\n   * The original implementation is MIT licensed.\r\n   */\r\n  const samples = options.samples || availableWidth;\r\n  // There are less points than the threshold, returning the whole array\r\n  if (samples >= count) {\r\n    return data.slice(start, start + count);\r\n  }\r\n\r\n  const decimated = [];\r\n\r\n  const bucketWidth = (count - 2) / (samples - 2);\r\n  let sampledIndex = 0;\r\n  const endIndex = start + count - 1;\r\n  // Starting from offset\r\n  let a = start;\r\n  let i, maxAreaPoint, maxArea, area, nextA;\r\n\r\n  decimated[sampledIndex++] = data[a];\r\n\r\n  for (i = 0; i < samples - 2; i++) {\r\n    let avgX = 0;\r\n    let avgY = 0;\r\n    let j;\r\n\r\n    // Adding offset\r\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\r\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\r\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\r\n\r\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\r\n      avgX += data[j].x;\r\n      avgY += data[j].y;\r\n    }\r\n\r\n    avgX /= avgRangeLength;\r\n    avgY /= avgRangeLength;\r\n\r\n    // Adding offset\r\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\r\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\r\n    const {x: pointAx, y: pointAy} = data[a];\r\n\r\n    // Note that this is changed from the original algorithm which initializes these\r\n    // values to 1. The reason for this change is that if the area is small, nextA\r\n    // would never be set and thus a crash would occur in the next loop as `a` would become\r\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\r\n    // initializing with a negative number is the correct solution.\r\n    maxArea = area = -1;\r\n\r\n    for (j = rangeOffs; j < rangeTo; j++) {\r\n      area = 0.5 * Math.abs(\r\n        (pointAx - avgX) * (data[j].y - pointAy) -\r\n        (pointAx - data[j].x) * (avgY - pointAy)\r\n      );\r\n\r\n      if (area > maxArea) {\r\n        maxArea = area;\r\n        maxAreaPoint = data[j];\r\n        nextA = j;\r\n      }\r\n    }\r\n\r\n    decimated[sampledIndex++] = maxAreaPoint;\r\n    a = nextA;\r\n  }\r\n\r\n  // Include the last point\r\n  decimated[sampledIndex++] = data[endIndex];\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction minMaxDecimation(data, start, count, availableWidth) {\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\r\n  const decimated = [];\r\n  const endIndex = start + count - 1;\r\n\r\n  const xMin = data[start].x;\r\n  const xMax = data[endIndex].x;\r\n  const dx = xMax - xMin;\r\n\r\n  for (i = start; i < start + count; ++i) {\r\n    point = data[i];\r\n    x = (point.x - xMin) / dx * availableWidth;\r\n    y = point.y;\r\n    const truncX = x | 0;\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n        minIndex = i;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n        maxIndex = i;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      // Use point.x here because we're computing the average data `x` value\r\n      avgX = (countX * avgX + point.x) / ++countX;\r\n    } else {\r\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\r\n      const lastIndex = i - 1;\r\n\r\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\r\n        // The interval is defined by 4 points: start, min, max, end.\r\n        // The starting point is already considered at this point, so we need to determine which\r\n        // of the other points to add. We need to sort these points to ensure the decimated data\r\n        // is still sorted and then ensure there are no duplicates.\r\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\r\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\r\n\r\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex1],\r\n            x: avgX,\r\n          });\r\n        }\r\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex2],\r\n            x: avgX\r\n          });\r\n        }\r\n      }\r\n\r\n      // lastIndex === startIndex will occur when a range has only 1 point which could\r\n      // happen with very uneven data\r\n      if (i > 0 && lastIndex !== startIndex) {\r\n        // Last point in the previous interval\r\n        decimated.push(data[lastIndex]);\r\n      }\r\n\r\n      // Start of the new interval\r\n      decimated.push(point);\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n      minIndex = maxIndex = startIndex = i;\r\n    }\r\n  }\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction cleanDecimatedDataset(dataset) {\r\n  if (dataset._decimated) {\r\n    const data = dataset._data;\r\n    delete dataset._decimated;\r\n    delete dataset._data;\r\n    Object.defineProperty(dataset, 'data', {value: data});\r\n  }\r\n}\r\n\r\nfunction cleanDecimatedData(chart) {\r\n  chart.data.datasets.forEach((dataset) => {\r\n    cleanDecimatedDataset(dataset);\r\n  });\r\n}\r\n\r\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count;\r\n\r\n  const {iScale} = meta;\r\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n  if (minDefined) {\r\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\r\n  }\r\n  if (maxDefined) {\r\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\r\n  } else {\r\n    count = pointCount - start;\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\nexport default {\r\n  id: 'decimation',\r\n\r\n  defaults: {\r\n    algorithm: 'min-max',\r\n    enabled: false,\r\n  },\r\n\r\n  beforeElementsUpdate: (chart, args, options) => {\r\n    if (!options.enabled) {\r\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\r\n      cleanDecimatedData(chart);\r\n      return;\r\n    }\r\n\r\n    // Assume the entire chart is available to show a few more points than needed\r\n    const availableWidth = chart.width;\r\n\r\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\r\n      const {_data, indexAxis} = dataset;\r\n      const meta = chart.getDatasetMeta(datasetIndex);\r\n      const data = _data || dataset.data;\r\n\r\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\r\n        // Decimation is only supported for lines that have an X indexAxis\r\n        return;\r\n      }\r\n\r\n      if (!meta.controller.supportsDecimation) {\r\n        // Only line datasets are supported\r\n        return;\r\n      }\r\n\r\n      const xAxis = chart.scales[meta.xAxisID];\r\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\r\n        // Only linear interpolation is supported\r\n        return;\r\n      }\r\n\r\n      if (chart.options.parsing) {\r\n        // Plugin only supports data that does not need parsing\r\n        return;\r\n      }\r\n\r\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\r\n      const threshold = options.threshold || 4 * availableWidth;\r\n      if (count <= threshold) {\r\n        // No decimation is required until we are above this threshold\r\n        cleanDecimatedDataset(dataset);\r\n        return;\r\n      }\r\n\r\n      if (isNullOrUndef(_data)) {\r\n        // First time we are seeing this dataset\r\n        // We override the 'data' property with a setter that stores the\r\n        // raw data in _data, but reads the decimated data from _decimated\r\n        dataset._data = data;\r\n        delete dataset.data;\r\n        Object.defineProperty(dataset, 'data', {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._decimated;\r\n          },\r\n          set: function(d) {\r\n            this._data = d;\r\n          }\r\n        });\r\n      }\r\n\r\n      // Point the chart to the decimated data\r\n      let decimated;\r\n      switch (options.algorithm) {\r\n      case 'lttb':\r\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\r\n        break;\r\n      case 'min-max':\r\n        decimated = minMaxDecimation(data, start, count, availableWidth);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\r\n      }\r\n\r\n      dataset._decimated = decimated;\r\n    });\r\n  },\r\n\r\n  destroy(chart) {\r\n    cleanDecimatedData(chart);\r\n  }\r\n};\r\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\r\n\r\nexport function _segments(line, target, property) {\r\n  const segments = line.segments;\r\n  const points = line.points;\r\n  const tpoints = target.points;\r\n  const parts = [];\r\n\r\n  for (const segment of segments) {\r\n    let {start, end} = segment;\r\n    end = _findSegmentEnd(start, end, points);\r\n\r\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\r\n\r\n    if (!target.segments) {\r\n      // Special case for boundary not supporting `segments` (simpleArc)\r\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\r\n      parts.push({\r\n        source: segment,\r\n        target: bounds,\r\n        start: points[start],\r\n        end: points[end]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\r\n    const targetSegments = _boundSegments(target, bounds);\r\n\r\n    for (const tgt of targetSegments) {\r\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\r\n      const fillSources = _boundSegment(segment, points, subBounds);\r\n\r\n      for (const fillSource of fillSources) {\r\n        parts.push({\r\n          source: fillSource,\r\n          target: tgt,\r\n          start: {\r\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\r\n          },\r\n          end: {\r\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return parts;\r\n}\r\n\r\nexport function _getBounds(property, first, last, loop) {\r\n  if (loop) {\r\n    return;\r\n  }\r\n  let start = first[property];\r\n  let end = last[property];\r\n\r\n  if (property === 'angle') {\r\n    start = _normalizeAngle(start);\r\n    end = _normalizeAngle(end);\r\n  }\r\n  return {property, start, end};\r\n}\r\n\r\nexport function _pointsFromSegments(boundary, line) {\r\n  const {x = null, y = null} = boundary || {};\r\n  const linePoints = line.points;\r\n  const points = [];\r\n  line.segments.forEach(({start, end}) => {\r\n    end = _findSegmentEnd(start, end, linePoints);\r\n    const first = linePoints[start];\r\n    const last = linePoints[end];\r\n    if (y !== null) {\r\n      points.push({x: first.x, y});\r\n      points.push({x: last.x, y});\r\n    } else if (x !== null) {\r\n      points.push({x, y: first.y});\r\n      points.push({x, y: last.y});\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nexport function _findSegmentEnd(start, end, points) {\r\n  for (;end > start; end--) {\r\n    const point = points[end];\r\n    if (!isNaN(point.x) && !isNaN(point.y)) {\r\n      break;\r\n    }\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction _getEdge(a, b, prop, fn) {\r\n  if (a && b) {\r\n    return fn(a[prop], b[prop]);\r\n  }\r\n  return a ? a[prop] : b ? b[prop] : 0;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements/index.js';\r\nimport {isArray} from '../../helpers/index.js';\r\nimport {_pointsFromSegments} from './filler.segment.js';\r\n\r\n/**\r\n * @param {PointElement[] | { x: number; y: number; }} boundary\r\n * @param {LineElement} line\r\n * @return {LineElement?}\r\n */\r\nexport function _createBoundaryLine(boundary, line) {\r\n  let points = [];\r\n  let _loop = false;\r\n\r\n  if (isArray(boundary)) {\r\n    _loop = true;\r\n    // @ts-ignore\r\n    points = boundary;\r\n  } else {\r\n    points = _pointsFromSegments(boundary, line);\r\n  }\r\n\r\n  return points.length ? new LineElement({\r\n    points,\r\n    options: {tension: 0},\r\n    _loop,\r\n    _fullLoop: _loop\r\n  }) : null;\r\n}\r\n\r\nexport function _shouldApplyFill(source) {\r\n  return source && source.fill !== false;\r\n}\r\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.line.js').default } LineElement\r\n * @typedef { import('../../../types/index.js').FillTarget } FillTarget\r\n * @typedef { import('../../../types/index.js').ComplexFillTarget } ComplexFillTarget\r\n */\r\n\r\nexport function _resolveTarget(sources, index, propagate) {\r\n  const source = sources[index];\r\n  let fill = source.fill;\r\n  const visited = [index];\r\n  let target;\r\n\r\n  if (!propagate) {\r\n    return fill;\r\n  }\r\n\r\n  while (fill !== false && visited.indexOf(fill) === -1) {\r\n    if (!isFinite(fill)) {\r\n      return fill;\r\n    }\r\n\r\n    target = sources[fill];\r\n    if (!target) {\r\n      return false;\r\n    }\r\n\r\n    if (target.visible) {\r\n      return fill;\r\n    }\r\n\r\n    visited.push(fill);\r\n    fill = target.fill;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {number} index\r\n * @param {number} count\r\n */\r\nexport function _decodeFill(line, index, count) {\r\n  /** @type {string | {value: number}} */\r\n  const fill = parseFillOption(line);\r\n\r\n  if (isObject(fill)) {\r\n    return isNaN(fill.value) ? false : fill;\r\n  }\r\n\r\n  let target = parseFloat(fill);\r\n\r\n  if (isFinite(target) && Math.floor(target) === target) {\r\n    return decodeTargetIndex(fill[0], index, target, count);\r\n  }\r\n\r\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\r\n}\r\n\r\nfunction decodeTargetIndex(firstCh, index, target, count) {\r\n  if (firstCh === '-' || firstCh === '+') {\r\n    target = index + target;\r\n  }\r\n\r\n  if (target === index || target < 0 || target >= count) {\r\n    return false;\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @returns {number | null}\r\n */\r\nexport function _getTargetPixel(fill, scale) {\r\n  let pixel = null;\r\n  if (fill === 'start') {\r\n    pixel = scale.bottom;\r\n  } else if (fill === 'end') {\r\n    pixel = scale.top;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    pixel = scale.getPixelForValue(fill.value);\r\n  } else if (scale.getBasePixel) {\r\n    pixel = scale.getBasePixel();\r\n  }\r\n  return pixel;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @param {number} startValue\r\n * @returns {number | undefined}\r\n */\r\nexport function _getTargetValue(fill, scale, startValue) {\r\n  let value;\r\n\r\n  if (fill === 'start') {\r\n    value = startValue;\r\n  } else if (fill === 'end') {\r\n    value = scale.options.reverse ? scale.min : scale.max;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    value = fill.value;\r\n  } else {\r\n    value = scale.getBaseValue();\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n */\r\nfunction parseFillOption(line) {\r\n  const options = line.options;\r\n  const fillOption = options.fill;\r\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\r\n\r\n  if (fill === undefined) {\r\n    fill = !!options.backgroundColor;\r\n  }\r\n\r\n  if (fill === false || fill === null) {\r\n    return false;\r\n  }\r\n\r\n  if (fill === true) {\r\n    return 'origin';\r\n  }\r\n  return fill;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements/index.js';\r\nimport {_isBetween} from '../../helpers/index.js';\r\nimport {_createBoundaryLine} from './filler.helper.js';\r\n\r\n/**\r\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\r\n * @return {LineElement}\r\n */\r\nexport function _buildStackLine(source) {\r\n  const {scale, index, line} = source;\r\n  const points = [];\r\n  const segments = line.segments;\r\n  const sourcePoints = line.points;\r\n  const linesBelow = getLinesBelow(scale, index);\r\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    for (let j = segment.start; j <= segment.end; j++) {\r\n      addPointsBelow(points, sourcePoints[j], linesBelow);\r\n    }\r\n  }\r\n  return new LineElement({points, options: {}});\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @return {LineElement[]}\r\n */\r\nfunction getLinesBelow(scale, index) {\r\n  const below = [];\r\n  const metas = scale.getMatchingVisibleMetas('line');\r\n\r\n  for (let i = 0; i < metas.length; i++) {\r\n    const meta = metas[i];\r\n    if (meta.index === index) {\r\n      break;\r\n    }\r\n    if (!meta.hidden) {\r\n      below.unshift(meta.dataset);\r\n    }\r\n  }\r\n  return below;\r\n}\r\n\r\n/**\r\n * @param {PointElement[]} points\r\n * @param {PointElement} sourcePoint\r\n * @param {LineElement[]} linesBelow\r\n */\r\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\r\n  const postponed = [];\r\n  for (let j = 0; j < linesBelow.length; j++) {\r\n    const line = linesBelow[j];\r\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\r\n\r\n    if (!point || (first && last)) {\r\n      continue;\r\n    }\r\n    if (first) {\r\n      // First point of an segment -> need to add another point before this,\r\n      // from next line below.\r\n      postponed.unshift(point);\r\n    } else {\r\n      points.push(point);\r\n      if (!last) {\r\n        // In the middle of an segment, no need to add more points.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  points.push(...postponed);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {PointElement} sourcePoint\r\n * @param {string} property\r\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\r\n */\r\nfunction findPoint(line, sourcePoint, property) {\r\n  const point = line.interpolate(sourcePoint, property);\r\n  if (!point) {\r\n    return {};\r\n  }\r\n\r\n  const pointValue = point[property];\r\n  const segments = line.segments;\r\n  const linePoints = line.points;\r\n  let first = false;\r\n  let last = false;\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    const firstValue = linePoints[segment.start][property];\r\n    const lastValue = linePoints[segment.end][property];\r\n    if (_isBetween(pointValue, firstValue, lastValue)) {\r\n      first = pointValue === firstValue;\r\n      last = pointValue === lastValue;\r\n      break;\r\n    }\r\n  }\r\n  return {first, last, point};\r\n}\r\n","import {TAU} from '../../helpers/index.js';\r\n\r\n// TODO: use elements.ArcElement instead\r\nexport class simpleArc {\r\n  constructor(opts) {\r\n    this.x = opts.x;\r\n    this.y = opts.y;\r\n    this.radius = opts.radius;\r\n  }\r\n\r\n  pathSegment(ctx, bounds, opts) {\r\n    const {x, y, radius} = this;\r\n    bounds = bounds || {start: 0, end: TAU};\r\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\r\n    return !opts.bounds;\r\n  }\r\n\r\n  interpolate(point) {\r\n    const {x, y, radius} = this;\r\n    const angle = point.angle;\r\n    return {\r\n      x: x + Math.cos(angle) * radius,\r\n      y: y + Math.sin(angle) * radius,\r\n      angle\r\n    };\r\n  }\r\n}\r\n","import {isFinite} from '../../helpers/index.js';\r\nimport {_createBoundaryLine} from './filler.helper.js';\r\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\r\nimport {_buildStackLine} from './filler.target.stack.js';\r\nimport {simpleArc} from './simpleArc.js';\r\n\r\n/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nexport function _getTarget(source) {\r\n  const {chart, fill, line} = source;\r\n\r\n  if (isFinite(fill)) {\r\n    return getLineByIndex(chart, fill);\r\n  }\r\n\r\n  if (fill === 'stack') {\r\n    return _buildStackLine(source);\r\n  }\r\n\r\n  if (fill === 'shape') {\r\n    return true;\r\n  }\r\n\r\n  const boundary = computeBoundary(source);\r\n\r\n  if (boundary instanceof simpleArc) {\r\n    return boundary;\r\n  }\r\n\r\n  return _createBoundaryLine(boundary, line);\r\n}\r\n\r\n/**\r\n * @param {Chart} chart\r\n * @param {number} index\r\n */\r\nfunction getLineByIndex(chart, index) {\r\n  const meta = chart.getDatasetMeta(index);\r\n  const visible = meta && chart.isDatasetVisible(index);\r\n  return visible ? meta.dataset : null;\r\n}\r\n\r\nfunction computeBoundary(source) {\r\n  const scale = source.scale || {};\r\n\r\n  if (scale.getPointPositionForValue) {\r\n    return computeCircularBoundary(source);\r\n  }\r\n  return computeLinearBoundary(source);\r\n}\r\n\r\n\r\nfunction computeLinearBoundary(source) {\r\n  const {scale = {}, fill} = source;\r\n  const pixel = _getTargetPixel(fill, scale);\r\n\r\n  if (isFinite(pixel)) {\r\n    const horizontal = scale.isHorizontal();\r\n\r\n    return {\r\n      x: horizontal ? pixel : null,\r\n      y: horizontal ? null : pixel\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction computeCircularBoundary(source) {\r\n  const {scale, fill} = source;\r\n  const options = scale.options;\r\n  const length = scale.getLabels().length;\r\n  const start = options.reverse ? scale.max : scale.min;\r\n  const value = _getTargetValue(fill, scale, start);\r\n  const target = [];\r\n\r\n  if (options.grid.circular) {\r\n    const center = scale.getPointPositionForValue(0, start);\r\n    return new simpleArc({\r\n      x: center.x,\r\n      y: center.y,\r\n      radius: scale.getDistanceFromCenterForValue(value)\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    target.push(scale.getPointPositionForValue(i, value));\r\n  }\r\n  return target;\r\n}\r\n\r\n","import {clipArea, unclipArea} from '../../helpers/index.js';\r\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\r\nimport {_getTarget} from './filler.target.js';\r\n\r\nexport function _drawfill(ctx, source, area) {\r\n  const target = _getTarget(source);\r\n  const {line, scale, axis} = source;\r\n  const lineOpts = line.options;\r\n  const fillOption = lineOpts.fill;\r\n  const color = lineOpts.backgroundColor;\r\n  const {above = color, below = color} = fillOption || {};\r\n  if (target && line.points.length) {\r\n    clipArea(ctx, area);\r\n    doFill(ctx, {line, target, above, below, area, scale, axis});\r\n    unclipArea(ctx);\r\n  }\r\n}\r\n\r\nfunction doFill(ctx, cfg) {\r\n  const {line, target, above, below, area, scale} = cfg;\r\n  const property = line._loop ? 'angle' : cfg.axis;\r\n\r\n  ctx.save();\r\n\r\n  if (property === 'x' && below !== above) {\r\n    clipVertical(ctx, target, area.top);\r\n    fill(ctx, {line, target, color: above, scale, property});\r\n    ctx.restore();\r\n    ctx.save();\r\n    clipVertical(ctx, target, area.bottom);\r\n  }\r\n  fill(ctx, {line, target, color: below, scale, property});\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction clipVertical(ctx, target, clipY) {\r\n  const {segments, points} = target;\r\n  let first = true;\r\n  let lineLoop = false;\r\n\r\n  ctx.beginPath();\r\n  for (const segment of segments) {\r\n    const {start, end} = segment;\r\n    const firstPoint = points[start];\r\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\r\n    if (first) {\r\n      ctx.moveTo(firstPoint.x, firstPoint.y);\r\n      first = false;\r\n    } else {\r\n      ctx.lineTo(firstPoint.x, clipY);\r\n      ctx.lineTo(firstPoint.x, firstPoint.y);\r\n    }\r\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\r\n    if (lineLoop) {\r\n      ctx.closePath();\r\n    } else {\r\n      ctx.lineTo(lastPoint.x, clipY);\r\n    }\r\n  }\r\n\r\n  ctx.lineTo(target.first().x, clipY);\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction fill(ctx, cfg) {\r\n  const {line, target, property, color, scale} = cfg;\r\n  const segments = _segments(line, target, property);\r\n\r\n  for (const {source: src, target: tgt, start, end} of segments) {\r\n    const {style: {backgroundColor = color} = {}} = src;\r\n    const notShape = target !== true;\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = backgroundColor;\r\n\r\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\r\n\r\n    ctx.beginPath();\r\n\r\n    const lineLoop = !!line.pathSegment(ctx, src);\r\n\r\n    let loop;\r\n    if (notShape) {\r\n      if (lineLoop) {\r\n        ctx.closePath();\r\n      } else {\r\n        interpolatedLineTo(ctx, target, end, property);\r\n      }\r\n\r\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\r\n      loop = lineLoop && targetLoop;\r\n      if (!loop) {\r\n        interpolatedLineTo(ctx, target, start, property);\r\n      }\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nfunction clipBounds(ctx, scale, bounds) {\r\n  const {top, bottom} = scale.chart.chartArea;\r\n  const {property, start, end} = bounds || {};\r\n  if (property === 'x') {\r\n    ctx.beginPath();\r\n    ctx.rect(start, top, end - start, bottom - top);\r\n    ctx.clip();\r\n  }\r\n}\r\n\r\nfunction interpolatedLineTo(ctx, target, point, property) {\r\n  const interpolatedPoint = target.interpolate(point, property);\r\n  if (interpolatedPoint) {\r\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\r\n  }\r\n}\r\n\r\n","/**\r\n * Plugin based on discussion from the following Chart.js issues:\r\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\r\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\r\n */\r\n\r\nimport LineElement from '../../elements/element.line.js';\r\nimport {_drawfill} from './filler.drawing.js';\r\nimport {_shouldApplyFill} from './filler.helper.js';\r\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\r\n\r\nexport default {\r\n  id: 'filler',\r\n\r\n  afterDatasetsUpdate(chart, _args, options) {\r\n    const count = (chart.data.datasets || []).length;\r\n    const sources = [];\r\n    let meta, i, line, source;\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      meta = chart.getDatasetMeta(i);\r\n      line = meta.dataset;\r\n      source = null;\r\n\r\n      if (line && line.options && line instanceof LineElement) {\r\n        source = {\r\n          visible: chart.isDatasetVisible(i),\r\n          index: i,\r\n          fill: _decodeFill(line, i, count),\r\n          chart,\r\n          axis: meta.controller.options.indexAxis,\r\n          scale: meta.vScale,\r\n          line,\r\n        };\r\n      }\r\n\r\n      meta.$filler = source;\r\n      sources.push(source);\r\n    }\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      source = sources[i];\r\n      if (!source || source.fill === false) {\r\n        continue;\r\n      }\r\n\r\n      source.fill = _resolveTarget(sources, i, options.propagate);\r\n    }\r\n  },\r\n\r\n  beforeDraw(chart, _args, options) {\r\n    const draw = options.drawTime === 'beforeDraw';\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    const area = chart.chartArea;\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n      if (!source) {\r\n        continue;\r\n      }\r\n\r\n      source.line.updateControlPoints(area, source.axis);\r\n      if (draw && source.fill) {\r\n        _drawfill(chart.ctx, source, area);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetsDraw(chart, _args, options) {\r\n    if (options.drawTime !== 'beforeDatasetsDraw') {\r\n      return;\r\n    }\r\n\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n\r\n      if (_shouldApplyFill(source)) {\r\n        _drawfill(chart.ctx, source, chart.chartArea);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetDraw(chart, args, options) {\r\n    const source = args.meta.$filler;\r\n\r\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\r\n      return;\r\n    }\r\n\r\n    _drawfill(chart.ctx, source, chart.chartArea);\r\n  },\r\n\r\n  defaults: {\r\n    propagate: true,\r\n    drawTime: 'beforeDatasetDraw'\r\n  }\r\n};\r\n","import defaults from '../core/core.defaults.js';\r\nimport Element from '../core/core.element.js';\r\nimport layouts from '../core/core.layouts.js';\r\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\r\nimport {\r\n  _isBetween,\r\n  callback as call,\r\n  clipArea,\r\n  getRtlAdapter,\r\n  overrideTextDirection,\r\n  restoreTextDirection,\r\n  toFont,\r\n  toPadding,\r\n  unclipArea,\r\n  valueOrDefault,\r\n} from '../helpers/index.js';\r\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\r\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\n/**\r\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\r\n */\r\n\r\nconst getBoxSize = (labelOpts, fontSize) => {\r\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\r\n\r\n  if (labelOpts.usePointStyle) {\r\n    boxHeight = Math.min(boxHeight, fontSize);\r\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\r\n  }\r\n\r\n  return {\r\n    boxWidth,\r\n    boxHeight,\r\n    itemHeight: Math.max(fontSize, boxHeight)\r\n  };\r\n};\r\n\r\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\r\n\r\nexport class Legend extends Element {\r\n\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this._added = false;\r\n\r\n    // Contains hit boxes for each dataset (in dataset order)\r\n    this.legendHitBoxes = [];\r\n\r\n    /**\r\n \t\t * @private\r\n \t\t */\r\n    this._hoveredItem = null;\r\n\r\n    // Are we in doughnut mode which has a different data type\r\n    this.doughnutMode = false;\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this.legendItems = undefined;\r\n    this.columnSizes = undefined;\r\n    this.lineWidths = undefined;\r\n    this.maxHeight = undefined;\r\n    this.maxWidth = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this._margins = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight, margins) {\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins;\r\n\r\n    this.setDimensions();\r\n    this.buildLabels();\r\n    this.fit();\r\n  }\r\n\r\n  setDimensions() {\r\n    if (this.isHorizontal()) {\r\n      this.width = this.maxWidth;\r\n      this.left = this._margins.left;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n      this.top = this._margins.top;\r\n      this.bottom = this.height;\r\n    }\r\n  }\r\n\r\n  buildLabels() {\r\n    const labelOpts = this.options.labels || {};\r\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\r\n\r\n    if (labelOpts.filter) {\r\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\r\n    }\r\n\r\n    if (labelOpts.sort) {\r\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\r\n    }\r\n\r\n    if (this.options.reverse) {\r\n      legendItems.reverse();\r\n    }\r\n\r\n    this.legendItems = legendItems;\r\n  }\r\n\r\n  fit() {\r\n    const {options, ctx} = this;\r\n\r\n    // The legend may not be displayed for a variety of reasons including\r\n    // the fact that the defaults got set to `false`.\r\n    // When the legend is not displayed, there are no guarantees that the options\r\n    // are correctly formatted so we need to bail out as early as possible.\r\n    if (!options.display) {\r\n      this.width = this.height = 0;\r\n      return;\r\n    }\r\n\r\n    const labelOpts = options.labels;\r\n    const labelFont = toFont(labelOpts.font);\r\n    const fontSize = labelFont.size;\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    let width, height;\r\n\r\n    ctx.font = labelFont.string;\r\n\r\n    if (this.isHorizontal()) {\r\n      width = this.maxWidth; // fill all the width\r\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\r\n    } else {\r\n      height = this.maxHeight; // fill all the height\r\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\r\n    }\r\n\r\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\r\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\r\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\r\n    const lineWidths = this.lineWidths = [0];\r\n    const lineHeight = itemHeight + padding;\r\n    let totalHeight = titleHeight;\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    let row = -1;\r\n    let top = -lineHeight;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\r\n\r\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\r\n        totalHeight += lineHeight;\r\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n        top += lineHeight;\r\n        row++;\r\n      }\r\n\r\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\r\n\r\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\r\n    });\r\n\r\n    return totalHeight;\r\n  }\r\n\r\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\r\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    const columnSizes = this.columnSizes = [];\r\n    const heightLimit = maxHeight - titleHeight;\r\n\r\n    let totalWidth = padding;\r\n    let currentColWidth = 0;\r\n    let currentColHeight = 0;\r\n\r\n    let left = 0;\r\n    let col = 0;\r\n\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\r\n\r\n      // If too tall, go to new column\r\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\r\n        totalWidth += currentColWidth + padding;\r\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n        left += currentColWidth + padding;\r\n        col++;\r\n        currentColWidth = currentColHeight = 0;\r\n      }\r\n\r\n      // Store the hitbox width and height here. Final position will be updated in `draw`\r\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\r\n\r\n      // Get max width\r\n      currentColWidth = Math.max(currentColWidth, itemWidth);\r\n      currentColHeight += itemHeight + padding;\r\n    });\r\n\r\n    totalWidth += currentColWidth;\r\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n\r\n    return totalWidth;\r\n  }\r\n\r\n  adjustHitBoxes() {\r\n    if (!this.options.display) {\r\n      return;\r\n    }\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\r\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\r\n    if (this.isHorizontal()) {\r\n      let row = 0;\r\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n      for (const hitbox of hitboxes) {\r\n        if (row !== hitbox.row) {\r\n          row = hitbox.row;\r\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n        }\r\n        hitbox.top += this.top + titleHeight + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\r\n        left += hitbox.width + padding;\r\n      }\r\n    } else {\r\n      let col = 0;\r\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n      for (const hitbox of hitboxes) {\r\n        if (hitbox.col !== col) {\r\n          col = hitbox.col;\r\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n        }\r\n        hitbox.top = top;\r\n        hitbox.left += this.left + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\r\n        top += hitbox.height + padding;\r\n      }\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    return this.options.position === 'top' || this.options.position === 'bottom';\r\n  }\r\n\r\n  draw() {\r\n    if (this.options.display) {\r\n      const ctx = this.ctx;\r\n      clipArea(ctx, this);\r\n\r\n      this._draw();\r\n\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _draw() {\r\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\r\n    const {align, labels: labelOpts} = opts;\r\n    const defaultColor = defaults.color;\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const labelFont = toFont(labelOpts.font);\r\n    const {padding} = labelOpts;\r\n    const fontSize = labelFont.size;\r\n    const halfFontSize = fontSize / 2;\r\n    let cursor;\r\n\r\n    this.drawTitle();\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign('left');\r\n    ctx.textBaseline = 'middle';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.font = labelFont.string;\r\n\r\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    // current position\r\n    const drawLegendBox = function(x, y, legendItem) {\r\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\r\n        return;\r\n      }\r\n\r\n      // Set the ctx for the box\r\n      ctx.save();\r\n\r\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\r\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\r\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\r\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\r\n      ctx.lineWidth = lineWidth;\r\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n\r\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\r\n\r\n      if (labelOpts.usePointStyle) {\r\n        // Recalculate x and y for drawPoint() because its expecting\r\n        // x and y to be center of figure (instead of top left)\r\n        const drawOptions = {\r\n          radius: boxHeight * Math.SQRT2 / 2,\r\n          pointStyle: legendItem.pointStyle,\r\n          rotation: legendItem.rotation,\r\n          borderWidth: lineWidth\r\n        };\r\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\r\n        const centerY = y + halfFontSize;\r\n\r\n        // Draw pointStyle as legend symbol\r\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\r\n      } else {\r\n        // Draw box as legend symbol\r\n        // Adjust position when boxHeight < fontSize (want it centered)\r\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\r\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\r\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\r\n\r\n        ctx.beginPath();\r\n\r\n        if (Object.values(borderRadius).some(v => v !== 0)) {\r\n          addRoundedRectPath(ctx, {\r\n            x: xBoxLeft,\r\n            y: yBoxTop,\r\n            w: boxWidth,\r\n            h: boxHeight,\r\n            radius: borderRadius,\r\n          });\r\n        } else {\r\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\r\n        }\r\n\r\n        ctx.fill();\r\n        if (lineWidth !== 0) {\r\n          ctx.stroke();\r\n        }\r\n      }\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n    const fillText = function(x, y, legendItem) {\r\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\r\n        strikethrough: legendItem.hidden,\r\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\r\n      });\r\n    };\r\n\r\n    // Horizontal\r\n    const isHorizontal = this.isHorizontal();\r\n    const titleHeight = this._computeTitleHeight();\r\n    if (isHorizontal) {\r\n      cursor = {\r\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\r\n        y: this.top + padding + titleHeight,\r\n        line: 0\r\n      };\r\n    } else {\r\n      cursor = {\r\n        x: this.left + padding,\r\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\r\n        line: 0\r\n      };\r\n    }\r\n\r\n    overrideTextDirection(this.ctx, opts.textDirection);\r\n\r\n    const lineHeight = itemHeight + padding;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\r\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\r\n\r\n      const textWidth = ctx.measureText(legendItem.text).width;\r\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\r\n      const width = boxWidth + halfFontSize + textWidth;\r\n      let x = cursor.x;\r\n      let y = cursor.y;\r\n\r\n      rtlHelper.setWidth(this.width);\r\n\r\n      if (isHorizontal) {\r\n        if (i > 0 && x + width + padding > this.right) {\r\n          y = cursor.y += lineHeight;\r\n          cursor.line++;\r\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\r\n        }\r\n      } else if (i > 0 && y + lineHeight > this.bottom) {\r\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\r\n        cursor.line++;\r\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\r\n      }\r\n\r\n      const realX = rtlHelper.x(x);\r\n\r\n      drawLegendBox(realX, y, legendItem);\r\n\r\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\r\n\r\n      // Fill the actual label\r\n      fillText(rtlHelper.x(x), y, legendItem);\r\n\r\n      if (isHorizontal) {\r\n        cursor.x += width + padding;\r\n      } else if (typeof legendItem.text !== 'string') {\r\n        const fontLineHeight = labelFont.lineHeight;\r\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\r\n      } else {\r\n        cursor.y += lineHeight;\r\n      }\r\n    });\r\n\r\n    restoreTextDirection(this.ctx, opts.textDirection);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const opts = this.options;\r\n    const titleOpts = opts.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n\r\n    if (!titleOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const ctx = this.ctx;\r\n    const position = titleOpts.position;\r\n    const halfFontSize = titleFont.size / 2;\r\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\r\n    let y;\r\n\r\n    // These defaults are used when the legend is vertical.\r\n    // When horizontal, they are computed below.\r\n    let left = this.left;\r\n    let maxWidth = this.width;\r\n\r\n    if (this.isHorizontal()) {\r\n      // Move left / right so that the title is above the legend lines\r\n      maxWidth = Math.max(...this.lineWidths);\r\n      y = this.top + topPaddingPlusHalfFontSize;\r\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\r\n    } else {\r\n      // Move down so that the title is above the legend stack in every alignment\r\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\r\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\r\n    }\r\n\r\n    // Now that we know the left edge of the inner legend box, compute the correct\r\n    // X coordinate from the title alignment\r\n    const x = _alignStartEnd(position, left, left + maxWidth);\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeStyle = titleOpts.color;\r\n    ctx.fillStyle = titleOpts.color;\r\n    ctx.font = titleFont.string;\r\n\r\n    renderText(ctx, titleOpts.text, x, y, titleFont);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeTitleHeight() {\r\n    const titleOpts = this.options.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLegendItemAt(x, y) {\r\n    let i, hitBox, lh;\r\n\r\n    if (_isBetween(x, this.left, this.right)\r\n      && _isBetween(y, this.top, this.bottom)) {\r\n      // See if we are touching one of the dataset boxes\r\n      lh = this.legendHitBoxes;\r\n      for (i = 0; i < lh.length; ++i) {\r\n        hitBox = lh[i];\r\n\r\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\r\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\r\n          // Touching an element\r\n          return this.legendItems[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t */\r\n  handleEvent(e) {\r\n    const opts = this.options;\r\n    if (!isListened(e.type, opts)) {\r\n      return;\r\n    }\r\n\r\n    // Chart event already has relative position in it\r\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\r\n\r\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\r\n      const previous = this._hoveredItem;\r\n      const sameItem = itemsEqual(previous, hoveredItem);\r\n      if (previous && !sameItem) {\r\n        call(opts.onLeave, [e, previous, this], this);\r\n      }\r\n\r\n      this._hoveredItem = hoveredItem;\r\n\r\n      if (hoveredItem && !sameItem) {\r\n        call(opts.onHover, [e, hoveredItem, this], this);\r\n      }\r\n    } else if (hoveredItem) {\r\n      call(opts.onClick, [e, hoveredItem, this], this);\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\r\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\r\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\r\n  return {itemWidth, itemHeight};\r\n}\r\n\r\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\r\n  let legendItemText = legendItem.text;\r\n  if (legendItemText && typeof legendItemText !== 'string') {\r\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\r\n  }\r\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\r\n}\r\n\r\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\r\n  let itemHeight = _itemHeight;\r\n  if (typeof legendItem.text !== 'string') {\r\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\r\n  }\r\n  return itemHeight;\r\n}\r\n\r\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\r\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\r\n  return fontLineHeight * labelHeight;\r\n}\r\n\r\nfunction isListened(type, opts) {\r\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\r\n    return true;\r\n  }\r\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  id: 'legend',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Legend,\r\n\r\n  start(chart, _args, options) {\r\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\r\n    layouts.configure(chart, legend, options);\r\n    layouts.addBox(chart, legend);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, chart.legend);\r\n    delete chart.legend;\r\n  },\r\n\r\n  // During the beforeUpdate step, the layout configuration needs to run\r\n  // This ensures that if the legend position changes (via an option update)\r\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\r\n  beforeUpdate(chart, _args, options) {\r\n    const legend = chart.legend;\r\n    layouts.configure(chart, legend, options);\r\n    legend.options = options;\r\n  },\r\n\r\n  // The labels need to be built after datasets are updated to ensure that colors\r\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\r\n  afterUpdate(chart) {\r\n    const legend = chart.legend;\r\n    legend.buildLabels();\r\n    legend.adjustHitBoxes();\r\n  },\r\n\r\n\r\n  afterEvent(chart, args) {\r\n    if (!args.replay) {\r\n      chart.legend.handleEvent(args.event);\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    display: true,\r\n    position: 'top',\r\n    align: 'center',\r\n    fullSize: true,\r\n    reverse: false,\r\n    weight: 1000,\r\n\r\n    // a callback that will handle\r\n    onClick(e, legendItem, legend) {\r\n      const index = legendItem.datasetIndex;\r\n      const ci = legend.chart;\r\n      if (ci.isDatasetVisible(index)) {\r\n        ci.hide(index);\r\n        legendItem.hidden = true;\r\n      } else {\r\n        ci.show(index);\r\n        legendItem.hidden = false;\r\n      }\r\n    },\r\n\r\n    onHover: null,\r\n    onLeave: null,\r\n\r\n    labels: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      boxWidth: 40,\r\n      padding: 10,\r\n      // Generates labels shown in the legend\r\n      // Valid properties to return:\r\n      // text : text to display\r\n      // fillStyle : fill of coloured box\r\n      // strokeStyle: stroke of coloured box\r\n      // hidden : if this legend item refers to a hidden item\r\n      // lineCap : cap style for line\r\n      // lineDash\r\n      // lineDashOffset :\r\n      // lineJoin :\r\n      // lineWidth :\r\n      generateLabels(chart) {\r\n        const datasets = chart.data.datasets;\r\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\r\n\r\n        return chart._getSortedDatasetMetas().map((meta) => {\r\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\r\n          const borderWidth = toPadding(style.borderWidth);\r\n\r\n          return {\r\n            text: datasets[meta.index].label,\r\n            fillStyle: style.backgroundColor,\r\n            fontColor: color,\r\n            hidden: !meta.visible,\r\n            lineCap: style.borderCapStyle,\r\n            lineDash: style.borderDash,\r\n            lineDashOffset: style.borderDashOffset,\r\n            lineJoin: style.borderJoinStyle,\r\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\r\n            strokeStyle: style.borderColor,\r\n            pointStyle: pointStyle || style.pointStyle,\r\n            rotation: style.rotation,\r\n            textAlign: textAlign || style.textAlign,\r\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\r\n\r\n            // Below is extra data used for toggling the datasets\r\n            datasetIndex: meta.index\r\n          };\r\n        }, this);\r\n      }\r\n    },\r\n\r\n    title: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      display: false,\r\n      position: 'center',\r\n      text: '',\r\n    }\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => !name.startsWith('on'),\r\n    labels: {\r\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\r\n    }\r\n  },\r\n};\r\n","import Element from '../core/core.element.js';\r\nimport layouts from '../core/core.layouts.js';\r\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\r\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\r\nimport {renderText} from '../helpers/helpers.canvas.js';\r\n\r\nexport class Title extends Element {\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this._padding = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight) {\r\n    const opts = this.options;\r\n\r\n    this.left = 0;\r\n    this.top = 0;\r\n\r\n    if (!opts.display) {\r\n      this.width = this.height = this.right = this.bottom = 0;\r\n      return;\r\n    }\r\n\r\n    this.width = this.right = maxWidth;\r\n    this.height = this.bottom = maxHeight;\r\n\r\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\r\n    this._padding = toPadding(opts.padding);\r\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\r\n\r\n    if (this.isHorizontal()) {\r\n      this.height = textSize;\r\n    } else {\r\n      this.width = textSize;\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    const pos = this.options.position;\r\n    return pos === 'top' || pos === 'bottom';\r\n  }\r\n\r\n  _drawArgs(offset) {\r\n    const {top, left, bottom, right, options} = this;\r\n    const align = options.align;\r\n    let rotation = 0;\r\n    let maxWidth, titleX, titleY;\r\n\r\n    if (this.isHorizontal()) {\r\n      titleX = _alignStartEnd(align, left, right);\r\n      titleY = top + offset;\r\n      maxWidth = right - left;\r\n    } else {\r\n      if (options.position === 'left') {\r\n        titleX = left + offset;\r\n        titleY = _alignStartEnd(align, bottom, top);\r\n        rotation = PI * -0.5;\r\n      } else {\r\n        titleX = right - offset;\r\n        titleY = _alignStartEnd(align, top, bottom);\r\n        rotation = PI * 0.5;\r\n      }\r\n      maxWidth = bottom - top;\r\n    }\r\n    return {titleX, titleY, maxWidth, rotation};\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n\r\n    if (!opts.display) {\r\n      return;\r\n    }\r\n\r\n    const fontOpts = toFont(opts.font);\r\n    const lineHeight = fontOpts.lineHeight;\r\n    const offset = lineHeight / 2 + this._padding.top;\r\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\r\n\r\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\r\n      color: opts.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: _toLeftRightCenter(opts.align),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n}\r\n\r\nfunction createTitle(chart, titleOpts) {\r\n  const title = new Title({\r\n    ctx: chart.ctx,\r\n    options: titleOpts,\r\n    chart\r\n  });\r\n\r\n  layouts.configure(chart, title, titleOpts);\r\n  layouts.addBox(chart, title);\r\n  chart.titleBlock = title;\r\n}\r\n\r\nexport default {\r\n  id: 'title',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Title,\r\n\r\n  start(chart, _args, options) {\r\n    createTitle(chart, options);\r\n  },\r\n\r\n  stop(chart) {\r\n    const titleBlock = chart.titleBlock;\r\n    layouts.removeBox(chart, titleBlock);\r\n    delete chart.titleBlock;\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = chart.titleBlock;\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'bold',\r\n    },\r\n    fullSize: true,\r\n    padding: 10,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 2000         // by default greater than legend (1000) to be above\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import {Title} from './plugin.title.js';\r\nimport layouts from '../core/core.layouts.js';\r\n\r\nconst map = new WeakMap();\r\n\r\nexport default {\r\n  id: 'subtitle',\r\n\r\n  start(chart, _args, options) {\r\n    const title = new Title({\r\n      ctx: chart.ctx,\r\n      options,\r\n      chart\r\n    });\r\n\r\n    layouts.configure(chart, title, options);\r\n    layouts.addBox(chart, title);\r\n    map.set(chart, title);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, map.get(chart));\r\n    map.delete(chart);\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = map.get(chart);\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'normal',\r\n    },\r\n    fullSize: true,\r\n    padding: 0,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import Animations from '../core/core.animations.js';\r\nimport Element from '../core/core.element.js';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\r\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\r\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\r\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\r\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\r\nimport {createContext, drawPoint} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('../platform/platform.base.js').Chart } Chart\r\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../../types/index.js').ActiveElement } ActiveElement\r\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\r\n */\r\n\r\nconst positioners = {\r\n  /**\r\n\t * Average mode places the tooltip at the average position of the elements shown\r\n\t */\r\n  average(items) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let i, len;\r\n    let x = 0;\r\n    let y = 0;\r\n    let count = 0;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const pos = el.tooltipPosition();\r\n        x += pos.x;\r\n        y += pos.y;\r\n        ++count;\r\n      }\r\n    }\r\n\r\n    return {\r\n      x: x / count,\r\n      y: y / count\r\n    };\r\n  },\r\n\r\n  /**\r\n\t * Gets the tooltip position nearest of the item nearest to the event position\r\n\t */\r\n  nearest(items, eventPosition) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let x = eventPosition.x;\r\n    let y = eventPosition.y;\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let i, len, nearestElement;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const center = el.getCenterPoint();\r\n        const d = distanceBetweenPoints(eventPosition, center);\r\n\r\n        if (d < minDistance) {\r\n          minDistance = d;\r\n          nearestElement = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nearestElement) {\r\n      const tp = nearestElement.tooltipPosition();\r\n      x = tp.x;\r\n      y = tp.y;\r\n    }\r\n\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  }\r\n};\r\n\r\n// Helper to push or concat based on if the 2nd parameter is an array or not\r\nfunction pushOrConcat(base, toPush) {\r\n  if (toPush) {\r\n    if (isArray(toPush)) {\r\n      // base = base.concat(toPush);\r\n      Array.prototype.push.apply(base, toPush);\r\n    } else {\r\n      base.push(toPush);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\n/**\r\n * Returns array of strings split by newline\r\n * @param {*} str - The value to split by newline.\r\n * @returns {string|string[]} value if newline present - Returned from String split() method\r\n * @function\r\n */\r\nfunction splitNewlines(str) {\r\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\r\n    return str.split('\\n');\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Private helper to create a tooltip item model\r\n * @param {Chart} chart\r\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\r\n * @return new tooltip item\r\n */\r\nfunction createTooltipItem(chart, item) {\r\n  const {element, datasetIndex, index} = item;\r\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n  const {label, value} = controller.getLabelAndValue(index);\r\n\r\n  return {\r\n    chart,\r\n    label,\r\n    parsed: controller.getParsed(index),\r\n    raw: chart.data.datasets[datasetIndex].data[index],\r\n    formattedValue: value,\r\n    dataset: controller.getDataset(),\r\n    dataIndex: index,\r\n    datasetIndex,\r\n    element\r\n  };\r\n}\r\n\r\n/**\r\n * Get the size of the tooltip\r\n */\r\nfunction getTooltipSize(tooltip, options) {\r\n  const ctx = tooltip.chart.ctx;\r\n  const {body, footer, title} = tooltip;\r\n  const {boxWidth, boxHeight} = options;\r\n  const bodyFont = toFont(options.bodyFont);\r\n  const titleFont = toFont(options.titleFont);\r\n  const footerFont = toFont(options.footerFont);\r\n  const titleLineCount = title.length;\r\n  const footerLineCount = footer.length;\r\n  const bodyLineItemCount = body.length;\r\n\r\n  const padding = toPadding(options.padding);\r\n  let height = padding.height;\r\n  let width = 0;\r\n\r\n  // Count of all lines in the body\r\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\r\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\r\n\r\n  if (titleLineCount) {\r\n    height += titleLineCount * titleFont.lineHeight\r\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\r\n\t\t\t+ options.titleMarginBottom;\r\n  }\r\n  if (combinedBodyLength) {\r\n    // Body lines may include some extra height depending on boxHeight\r\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\r\n    height += bodyLineItemCount * bodyLineHeight\r\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\r\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\r\n  }\r\n  if (footerLineCount) {\r\n    height += options.footerMarginTop\r\n\t\t\t+ footerLineCount * footerFont.lineHeight\r\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\r\n  }\r\n\r\n  // Title width\r\n  let widthPadding = 0;\r\n  const maxLineWidth = function(line) {\r\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\r\n  };\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = titleFont.string;\r\n  each(tooltip.title, maxLineWidth);\r\n\r\n  // Body width\r\n  ctx.font = bodyFont.string;\r\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\r\n\r\n  // Body lines may include some extra width due to the color box\r\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\r\n  each(body, (bodyItem) => {\r\n    each(bodyItem.before, maxLineWidth);\r\n    each(bodyItem.lines, maxLineWidth);\r\n    each(bodyItem.after, maxLineWidth);\r\n  });\r\n\r\n  // Reset back to 0\r\n  widthPadding = 0;\r\n\r\n  // Footer width\r\n  ctx.font = footerFont.string;\r\n  each(tooltip.footer, maxLineWidth);\r\n\r\n  ctx.restore();\r\n\r\n  // Add padding\r\n  width += padding.width;\r\n\r\n  return {width, height};\r\n}\r\n\r\nfunction determineYAlign(chart, size) {\r\n  const {y, height} = size;\r\n\r\n  if (y < height / 2) {\r\n    return 'top';\r\n  } else if (y > (chart.height - height / 2)) {\r\n    return 'bottom';\r\n  }\r\n  return 'center';\r\n}\r\n\r\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\r\n  const {x, width} = size;\r\n  const caret = options.caretSize + options.caretPadding;\r\n  if (xAlign === 'left' && x + width + caret > chart.width) {\r\n    return true;\r\n  }\r\n\r\n  if (xAlign === 'right' && x - width - caret < 0) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction determineXAlign(chart, options, size, yAlign) {\r\n  const {x, width} = size;\r\n  const {width: chartWidth, chartArea: {left, right}} = chart;\r\n  let xAlign = 'center';\r\n\r\n  if (yAlign === 'center') {\r\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\r\n  } else if (x <= width / 2) {\r\n    xAlign = 'left';\r\n  } else if (x >= chartWidth - width / 2) {\r\n    xAlign = 'right';\r\n  }\r\n\r\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\r\n    xAlign = 'center';\r\n  }\r\n\r\n  return xAlign;\r\n}\r\n\r\n/**\r\n * Helper to get the alignment of a tooltip given the size\r\n */\r\nfunction determineAlignment(chart, options, size) {\r\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\r\n\r\n  return {\r\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\r\n    yAlign\r\n  };\r\n}\r\n\r\nfunction alignX(size, xAlign) {\r\n  let {x, width} = size;\r\n  if (xAlign === 'right') {\r\n    x -= width;\r\n  } else if (xAlign === 'center') {\r\n    x -= (width / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction alignY(size, yAlign, paddingAndSize) {\r\n  // eslint-disable-next-line prefer-const\r\n  let {y, height} = size;\r\n  if (yAlign === 'top') {\r\n    y += paddingAndSize;\r\n  } else if (yAlign === 'bottom') {\r\n    y -= height + paddingAndSize;\r\n  } else {\r\n    y -= (height / 2);\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\r\n */\r\nfunction getBackgroundPoint(options, size, alignment, chart) {\r\n  const {caretSize, caretPadding, cornerRadius} = options;\r\n  const {xAlign, yAlign} = alignment;\r\n  const paddingAndSize = caretSize + caretPadding;\r\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n\r\n  let x = alignX(size, xAlign);\r\n  const y = alignY(size, yAlign, paddingAndSize);\r\n\r\n  if (yAlign === 'center') {\r\n    if (xAlign === 'left') {\r\n      x += paddingAndSize;\r\n    } else if (xAlign === 'right') {\r\n      x -= paddingAndSize;\r\n    }\r\n  } else if (xAlign === 'left') {\r\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\r\n  } else if (xAlign === 'right') {\r\n    x += Math.max(topRight, bottomRight) + caretSize;\r\n  }\r\n\r\n  return {\r\n    x: _limitValue(x, 0, chart.width - size.width),\r\n    y: _limitValue(y, 0, chart.height - size.height)\r\n  };\r\n}\r\n\r\nfunction getAlignedX(tooltip, align, options) {\r\n  const padding = toPadding(options.padding);\r\n\r\n  return align === 'center'\r\n    ? tooltip.x + tooltip.width / 2\r\n    : align === 'right'\r\n      ? tooltip.x + tooltip.width - padding.right\r\n      : tooltip.x + padding.left;\r\n}\r\n\r\n/**\r\n * Helper to build before and after body lines\r\n */\r\nfunction getBeforeAfterBodyLines(callback) {\r\n  return pushOrConcat([], splitNewlines(callback));\r\n}\r\n\r\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\r\n  return createContext(parent, {\r\n    tooltip,\r\n    tooltipItems,\r\n    type: 'tooltip'\r\n  });\r\n}\r\n\r\nfunction overrideCallbacks(callbacks, context) {\r\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\r\n  return override ? callbacks.override(override) : callbacks;\r\n}\r\n\r\nconst defaultCallbacks = {\r\n  // Args are: (tooltipItems, data)\r\n  beforeTitle: noop,\r\n  title(tooltipItems) {\r\n    if (tooltipItems.length > 0) {\r\n      const item = tooltipItems[0];\r\n      const labels = item.chart.data.labels;\r\n      const labelCount = labels ? labels.length : 0;\r\n\r\n      if (this && this.options && this.options.mode === 'dataset') {\r\n        return item.dataset.label || '';\r\n      } else if (item.label) {\r\n        return item.label;\r\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\r\n        return labels[item.dataIndex];\r\n      }\r\n    }\r\n\r\n    return '';\r\n  },\r\n  afterTitle: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeBody: noop,\r\n\r\n  // Args are: (tooltipItem, data)\r\n  beforeLabel: noop,\r\n  label(tooltipItem) {\r\n    if (this && this.options && this.options.mode === 'dataset') {\r\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\r\n    }\r\n\r\n    let label = tooltipItem.dataset.label || '';\r\n\r\n    if (label) {\r\n      label += ': ';\r\n    }\r\n    const value = tooltipItem.formattedValue;\r\n    if (!isNullOrUndef(value)) {\r\n      label += value;\r\n    }\r\n    return label;\r\n  },\r\n  labelColor(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      borderColor: options.borderColor,\r\n      backgroundColor: options.backgroundColor,\r\n      borderWidth: options.borderWidth,\r\n      borderDash: options.borderDash,\r\n      borderDashOffset: options.borderDashOffset,\r\n      borderRadius: 0,\r\n    };\r\n  },\r\n  labelTextColor() {\r\n    return this.options.bodyColor;\r\n  },\r\n  labelPointStyle(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      pointStyle: options.pointStyle,\r\n      rotation: options.rotation,\r\n    };\r\n  },\r\n  afterLabel: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  afterBody: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeFooter: noop,\r\n  footer: noop,\r\n  afterFooter: noop\r\n};\r\n\r\n/**\r\n * Invoke callback from object with context and arguments.\r\n * If callback returns `undefined`, then will be invoked default callback.\r\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\r\n * @param {keyof typeof defaultCallbacks} name\r\n * @param {*} ctx\r\n * @param {*} arg\r\n * @returns {any}\r\n */\r\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\r\n  const result = callbacks[name].call(ctx, arg);\r\n\r\n  if (typeof result === 'undefined') {\r\n    return defaultCallbacks[name].call(ctx, arg);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class Tooltip extends Element {\r\n\r\n  /**\r\n   * @namespace Chart.Tooltip.positioners\r\n   */\r\n  static positioners = positioners;\r\n\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.opacity = 0;\r\n    this._active = [];\r\n    this._eventPosition = undefined;\r\n    this._size = undefined;\r\n    this._cachedAnimations = undefined;\r\n    this._tooltipItems = [];\r\n    this.$animations = undefined;\r\n    this.$context = undefined;\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.dataPoints = undefined;\r\n    this.title = undefined;\r\n    this.beforeBody = undefined;\r\n    this.body = undefined;\r\n    this.afterBody = undefined;\r\n    this.footer = undefined;\r\n    this.xAlign = undefined;\r\n    this.yAlign = undefined;\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this.caretX = undefined;\r\n    this.caretY = undefined;\r\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\r\n    // and `labelTextColors` to create a single variable\r\n    this.labelColors = undefined;\r\n    this.labelPointStyles = undefined;\r\n    this.labelTextColors = undefined;\r\n  }\r\n\r\n  initialize(options) {\r\n    this.options = options;\r\n    this._cachedAnimations = undefined;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations() {\r\n    const cached = this._cachedAnimations;\r\n\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const options = this.options.setContext(this.getContext());\r\n    const opts = options.enabled && chart.options.animation && options.animations;\r\n    const animations = new Animations(this.chart, opts);\r\n    if (opts._cacheable) {\r\n      this._cachedAnimations = Object.freeze(animations);\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext() {\r\n    return this.$context ||\r\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\r\n  }\r\n\r\n  getTitle(context, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\r\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\r\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\r\n    lines = pushOrConcat(lines, splitNewlines(title));\r\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\r\n\r\n    return lines;\r\n  }\r\n\r\n  getBeforeBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  getBody(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n    const bodyItems = [];\r\n\r\n    each(tooltipItems, (context) => {\r\n      const bodyItem = {\r\n        before: [],\r\n        lines: [],\r\n        after: []\r\n      };\r\n      const scoped = overrideCallbacks(callbacks, context);\r\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\r\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\r\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\r\n\r\n      bodyItems.push(bodyItem);\r\n    });\r\n\r\n    return bodyItems;\r\n  }\r\n\r\n  getAfterBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  // Get the footer and beforeFooter and afterFooter lines\r\n  getFooter(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\r\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\r\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\r\n    lines = pushOrConcat(lines, splitNewlines(footer));\r\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\r\n\r\n    return lines;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createItems(options) {\r\n    const active = this._active;\r\n    const data = this.chart.data;\r\n    const labelColors = [];\r\n    const labelPointStyles = [];\r\n    const labelTextColors = [];\r\n    let tooltipItems = [];\r\n    let i, len;\r\n\r\n    for (i = 0, len = active.length; i < len; ++i) {\r\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\r\n    }\r\n\r\n    // If the user provided a filter function, use it to modify the tooltip items\r\n    if (options.filter) {\r\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\r\n    }\r\n\r\n    // If the user provided a sorting function, use it to modify the tooltip items\r\n    if (options.itemSort) {\r\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\r\n    }\r\n\r\n    // Determine colors for boxes\r\n    each(tooltipItems, (context) => {\r\n      const scoped = overrideCallbacks(options.callbacks, context);\r\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\r\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\r\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\r\n    });\r\n\r\n    this.labelColors = labelColors;\r\n    this.labelPointStyles = labelPointStyles;\r\n    this.labelTextColors = labelTextColors;\r\n    this.dataPoints = tooltipItems;\r\n    return tooltipItems;\r\n  }\r\n\r\n  update(changed, replay) {\r\n    const options = this.options.setContext(this.getContext());\r\n    const active = this._active;\r\n    let properties;\r\n    let tooltipItems = [];\r\n\r\n    if (!active.length) {\r\n      if (this.opacity !== 0) {\r\n        properties = {\r\n          opacity: 0\r\n        };\r\n      }\r\n    } else {\r\n      const position = positioners[options.position].call(this, active, this._eventPosition);\r\n      tooltipItems = this._createItems(options);\r\n\r\n      this.title = this.getTitle(tooltipItems, options);\r\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\r\n      this.body = this.getBody(tooltipItems, options);\r\n      this.afterBody = this.getAfterBody(tooltipItems, options);\r\n      this.footer = this.getFooter(tooltipItems, options);\r\n\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, size);\r\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\r\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\r\n\r\n      this.xAlign = alignment.xAlign;\r\n      this.yAlign = alignment.yAlign;\r\n\r\n      properties = {\r\n        opacity: 1,\r\n        x: backgroundPoint.x,\r\n        y: backgroundPoint.y,\r\n        width: size.width,\r\n        height: size.height,\r\n        caretX: position.x,\r\n        caretY: position.y\r\n      };\r\n    }\r\n\r\n    this._tooltipItems = tooltipItems;\r\n    this.$context = undefined;\r\n\r\n    if (properties) {\r\n      this._resolveAnimations().update(this, properties);\r\n    }\r\n\r\n    if (changed && options.external) {\r\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\r\n    }\r\n  }\r\n\r\n  drawCaret(tooltipPoint, ctx, size, options) {\r\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\r\n\r\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\r\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\r\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\r\n  }\r\n\r\n  getCaretPosition(tooltipPoint, size, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {caretSize, cornerRadius} = options;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n    const {x: ptX, y: ptY} = tooltipPoint;\r\n    const {width, height} = size;\r\n    let x1, x2, x3, y1, y2, y3;\r\n\r\n    if (yAlign === 'center') {\r\n      y2 = ptY + (height / 2);\r\n\r\n      if (xAlign === 'left') {\r\n        x1 = ptX;\r\n        x2 = x1 - caretSize;\r\n\r\n        // Left draws bottom -> top, this y1 is on the bottom\r\n        y1 = y2 + caretSize;\r\n        y3 = y2 - caretSize;\r\n      } else {\r\n        x1 = ptX + width;\r\n        x2 = x1 + caretSize;\r\n\r\n        // Right draws top -> bottom, thus y1 is on the top\r\n        y1 = y2 - caretSize;\r\n        y3 = y2 + caretSize;\r\n      }\r\n\r\n      x3 = x1;\r\n    } else {\r\n      if (xAlign === 'left') {\r\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\r\n      } else if (xAlign === 'right') {\r\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\r\n      } else {\r\n        x2 = this.caretX;\r\n      }\r\n\r\n      if (yAlign === 'top') {\r\n        y1 = ptY;\r\n        y2 = y1 - caretSize;\r\n\r\n        // Top draws left -> right, thus x1 is on the left\r\n        x1 = x2 - caretSize;\r\n        x3 = x2 + caretSize;\r\n      } else {\r\n        y1 = ptY + height;\r\n        y2 = y1 + caretSize;\r\n\r\n        // Bottom draws right -> left, thus x1 is on the right\r\n        x1 = x2 + caretSize;\r\n        x3 = x2 - caretSize;\r\n      }\r\n      y3 = y1;\r\n    }\r\n    return {x1, x2, x3, y1, y2, y3};\r\n  }\r\n\r\n  drawTitle(pt, ctx, options) {\r\n    const title = this.title;\r\n    const length = title.length;\r\n    let titleFont, titleSpacing, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.titleAlign, options);\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      titleFont = toFont(options.titleFont);\r\n      titleSpacing = options.titleSpacing;\r\n\r\n      ctx.fillStyle = options.titleColor;\r\n      ctx.font = titleFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\r\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\r\n\r\n        if (i + 1 === length) {\r\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\r\n    const labelColors = this.labelColors[i];\r\n    const labelPointStyle = this.labelPointStyles[i];\r\n    const {boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    const colorX = getAlignedX(this, 'left', options);\r\n    const rtlColorX = rtlHelper.x(colorX);\r\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\r\n    const colorY = pt.y + yOffSet;\r\n\r\n    if (options.usePointStyle) {\r\n      const drawOptions = {\r\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\r\n        pointStyle: labelPointStyle.pointStyle,\r\n        rotation: labelPointStyle.rotation,\r\n        borderWidth: 1\r\n      };\r\n      // Recalculate x and y for drawPoint() because its expecting\r\n      // x and y to be center of figure (instead of top left)\r\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\r\n      const centerY = colorY + boxHeight / 2;\r\n\r\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\r\n      ctx.strokeStyle = options.multiKeyBackground;\r\n      ctx.fillStyle = options.multiKeyBackground;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n\r\n      // Draw the point\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.fillStyle = labelColors.backgroundColor;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n    } else {\r\n      // Border\r\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\r\n      ctx.strokeStyle = labelColors.borderColor;\r\n      ctx.setLineDash(labelColors.borderDash || []);\r\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\r\n\r\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\r\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\r\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\r\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        addRoundedRectPath(ctx, {\r\n          x: outerX,\r\n          y: colorY,\r\n          w: boxWidth,\r\n          h: boxHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: innerX,\r\n          y: colorY + 1,\r\n          w: boxWidth - 2,\r\n          h: boxHeight - 2,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        // Normal rect\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\r\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\r\n        // Inner square\r\n        ctx.fillStyle = labelColors.backgroundColor;\r\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\r\n      }\r\n    }\r\n\r\n    // restore fillStyle\r\n    ctx.fillStyle = this.labelTextColors[i];\r\n  }\r\n\r\n  drawBody(pt, ctx, options) {\r\n    const {body} = this;\r\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    let bodyLineHeight = bodyFont.lineHeight;\r\n    let xLinePadding = 0;\r\n\r\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n    const fillLineOfText = function(line) {\r\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\r\n      pt.y += bodyLineHeight + bodySpacing;\r\n    };\r\n\r\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\r\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\r\n\r\n    ctx.textAlign = bodyAlign;\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = bodyFont.string;\r\n\r\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\r\n\r\n    // Before body lines\r\n    ctx.fillStyle = options.bodyColor;\r\n    each(this.beforeBody, fillLineOfText);\r\n\r\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\r\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\r\n      : 0;\r\n\r\n    // Draw body lines now\r\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\r\n      bodyItem = body[i];\r\n      textColor = this.labelTextColors[i];\r\n\r\n      ctx.fillStyle = textColor;\r\n      each(bodyItem.before, fillLineOfText);\r\n\r\n      lines = bodyItem.lines;\r\n      // Draw Legend-like boxes if needed\r\n      if (displayColors && lines.length) {\r\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\r\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\r\n      }\r\n\r\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\r\n        fillLineOfText(lines[j]);\r\n        // Reset for any lines that don't include colorbox\r\n        bodyLineHeight = bodyFont.lineHeight;\r\n      }\r\n\r\n      each(bodyItem.after, fillLineOfText);\r\n    }\r\n\r\n    // Reset back to 0 for after body\r\n    xLinePadding = 0;\r\n    bodyLineHeight = bodyFont.lineHeight;\r\n\r\n    // After body lines\r\n    each(this.afterBody, fillLineOfText);\r\n    pt.y -= bodySpacing; // Remove last body spacing\r\n  }\r\n\r\n  drawFooter(pt, ctx, options) {\r\n    const footer = this.footer;\r\n    const length = footer.length;\r\n    let footerFont, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.footerAlign, options);\r\n      pt.y += options.footerMarginTop;\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      footerFont = toFont(options.footerFont);\r\n\r\n      ctx.fillStyle = options.footerColor;\r\n      ctx.font = footerFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\r\n        pt.y += footerFont.lineHeight + options.footerSpacing;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawBackground(pt, ctx, tooltipSize, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {x, y} = pt;\r\n    const {width, height} = tooltipSize;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + topLeft, y);\r\n    if (yAlign === 'top') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width - topRight, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\r\n    if (yAlign === 'center' && xAlign === 'right') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width, y + height - bottomRight);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\r\n    if (yAlign === 'bottom') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + bottomLeft, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\r\n    if (yAlign === 'center' && xAlign === 'left') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x, y + topLeft);\r\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\r\n    ctx.closePath();\r\n\r\n    ctx.fill();\r\n\r\n    if (options.borderWidth > 0) {\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Update x/y animation targets when _active elements are animating too\r\n\t * @private\r\n\t */\r\n  _updateAnimationTarget(options) {\r\n    const chart = this.chart;\r\n    const anims = this.$animations;\r\n    const animX = anims && anims.x;\r\n    const animY = anims && anims.y;\r\n    if (animX || animY) {\r\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, this._size);\r\n      const alignment = determineAlignment(chart, options, positionAndSize);\r\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\r\n      if (animX._to !== point.x || animY._to !== point.y) {\r\n        this.xAlign = alignment.xAlign;\r\n        this.yAlign = alignment.yAlign;\r\n        this.width = size.width;\r\n        this.height = size.height;\r\n        this.caretX = position.x;\r\n        this.caretY = position.y;\r\n        this._resolveAnimations().update(this, point);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if the tooltip will draw anything\r\n   * @returns {boolean} True if the tooltip will render\r\n   */\r\n  _willRender() {\r\n    return !!this.opacity;\r\n  }\r\n\r\n  draw(ctx) {\r\n    const options = this.options.setContext(this.getContext());\r\n    let opacity = this.opacity;\r\n\r\n    if (!opacity) {\r\n      return;\r\n    }\r\n\r\n    this._updateAnimationTarget(options);\r\n\r\n    const tooltipSize = {\r\n      width: this.width,\r\n      height: this.height\r\n    };\r\n    const pt = {\r\n      x: this.x,\r\n      y: this.y\r\n    };\r\n\r\n    // IE11/Edge does not like very small opacities, so snap to 0\r\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\r\n\r\n    const padding = toPadding(options.padding);\r\n\r\n    // Truthy/falsey value for empty tooltip\r\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\r\n\r\n    if (options.enabled && hasTooltipContent) {\r\n      ctx.save();\r\n      ctx.globalAlpha = opacity;\r\n\r\n      // Draw Background\r\n      this.drawBackground(pt, ctx, tooltipSize, options);\r\n\r\n      overrideTextDirection(ctx, options.textDirection);\r\n\r\n      pt.y += padding.top;\r\n\r\n      // Titles\r\n      this.drawTitle(pt, ctx, options);\r\n\r\n      // Body\r\n      this.drawBody(pt, ctx, options);\r\n\r\n      // Footer\r\n      this.drawFooter(pt, ctx, options);\r\n\r\n      restoreTextDirection(ctx, options.textDirection);\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active elements in the tooltip\r\n\t * @returns {Array} Array of elements that are active in the tooltip\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active elements in the tooltip\r\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\r\n\t * @param {object} eventPosition Synthetic event position used in positioning\r\n\t */\r\n  setActiveElements(activeElements, eventPosition) {\r\n    const lastActive = this._active;\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.chart.getDatasetMeta(datasetIndex);\r\n\r\n      if (!meta) {\r\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(lastActive, active);\r\n    const positionChanged = this._positionChanged(active, eventPosition);\r\n\r\n    if (changed || positionChanged) {\r\n      this._active = active;\r\n      this._eventPosition = eventPosition;\r\n      this._ignoreReplayEvents = true;\r\n      this.update(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {boolean} true if the tooltip changed\r\n\t */\r\n  handleEvent(e, replay, inChartArea = true) {\r\n    if (replay && this._ignoreReplayEvents) {\r\n      return false;\r\n    }\r\n    this._ignoreReplayEvents = false;\r\n\r\n    const options = this.options;\r\n    const lastActive = this._active || [];\r\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\r\n\r\n    // When there are multiple items shown, but the tooltip position is nearest mode\r\n    // an update may need to be made because our position may have changed even though\r\n    // the items are the same as before.\r\n    const positionChanged = this._positionChanged(active, e);\r\n\r\n    // Remember Last Actives\r\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\r\n\r\n    // Only handle target event on tooltip change\r\n    if (changed) {\r\n      this._active = active;\r\n\r\n      if (options.enabled || options.external) {\r\n        this._eventPosition = {\r\n          x: e.x,\r\n          y: e.y\r\n        };\r\n\r\n        this.update(true, replay);\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n\t * Helper for determining the active elements for event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {InteractionItem[]} lastActive - Previously active elements\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {InteractionItem[]} - Active elements\r\n\t * @private\r\n\t */\r\n  _getActiveElements(e, lastActive, replay, inChartArea) {\r\n    const options = this.options;\r\n\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    // Find Active Elements for tooltips\r\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\r\n\r\n    if (options.reverse) {\r\n      active.reverse();\r\n    }\r\n\r\n    return active;\r\n  }\r\n\r\n  /**\r\n\t * Determine if the active elements + event combination changes the\r\n\t * tooltip position\r\n\t * @param {array} active - Active elements\r\n\t * @param {ChartEvent} e - Event that triggered the position change\r\n\t * @returns {boolean} True if the position has changed\r\n\t */\r\n  _positionChanged(active, e) {\r\n    const {caretX, caretY, options} = this;\r\n    const position = positioners[options.position].call(this, active, e);\r\n    return position !== false && (caretX !== position.x || caretY !== position.y);\r\n  }\r\n}\r\n\r\nexport default {\r\n  id: 'tooltip',\r\n  _element: Tooltip,\r\n  positioners,\r\n\r\n  afterInit(chart, _args, options) {\r\n    if (options) {\r\n      chart.tooltip = new Tooltip({chart, options});\r\n    }\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  reset(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  afterDraw(chart) {\r\n    const tooltip = chart.tooltip;\r\n\r\n    if (tooltip && tooltip._willRender()) {\r\n      const args = {\r\n        tooltip\r\n      };\r\n\r\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\r\n        return;\r\n      }\r\n\r\n      tooltip.draw(chart.ctx);\r\n\r\n      chart.notifyPlugins('afterTooltipDraw', args);\r\n    }\r\n  },\r\n\r\n  afterEvent(chart, args) {\r\n    if (chart.tooltip) {\r\n      // If the event is replayed from `update`, we should evaluate with the final positions.\r\n      const useFinalPosition = args.replay;\r\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\r\n        // notify chart about the change, so it will render\r\n        args.changed = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    enabled: true,\r\n    external: null,\r\n    position: 'average',\r\n    backgroundColor: 'rgba(0,0,0,0.8)',\r\n    titleColor: '#fff',\r\n    titleFont: {\r\n      weight: 'bold',\r\n    },\r\n    titleSpacing: 2,\r\n    titleMarginBottom: 6,\r\n    titleAlign: 'left',\r\n    bodyColor: '#fff',\r\n    bodySpacing: 2,\r\n    bodyFont: {\r\n    },\r\n    bodyAlign: 'left',\r\n    footerColor: '#fff',\r\n    footerSpacing: 2,\r\n    footerMarginTop: 6,\r\n    footerFont: {\r\n      weight: 'bold',\r\n    },\r\n    footerAlign: 'left',\r\n    padding: 6,\r\n    caretPadding: 2,\r\n    caretSize: 5,\r\n    cornerRadius: 6,\r\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\r\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\r\n    multiKeyBackground: '#fff',\r\n    displayColors: true,\r\n    boxPadding: 0,\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    animation: {\r\n      duration: 400,\r\n      easing: 'easeOutQuart',\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\r\n      },\r\n      opacity: {\r\n        easing: 'linear',\r\n        duration: 200\r\n      }\r\n    },\r\n    callbacks: defaultCallbacks\r\n  },\r\n\r\n  defaultRoutes: {\r\n    bodyFont: 'font',\r\n    footerFont: 'font',\r\n    titleFont: 'font'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\r\n    _indexable: false,\r\n    callbacks: {\r\n      _scriptable: false,\r\n      _indexable: false,\r\n    },\r\n    animation: {\r\n      _fallback: false\r\n    },\r\n    animations: {\r\n      _fallback: 'animation'\r\n    }\r\n  },\r\n\r\n  // Resolve additionally from `interaction` options and defaults.\r\n  additionalOptionScopes: ['interaction']\r\n};\r\n","import Scale from '../core/core.scale.js';\r\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\r\n\r\nconst addIfString = (labels, raw, index, addedLabels) => {\r\n  if (typeof raw === 'string') {\r\n    index = labels.push(raw) - 1;\r\n    addedLabels.unshift({index, label: raw});\r\n  } else if (isNaN(raw)) {\r\n    index = null;\r\n  }\r\n  return index;\r\n};\r\n\r\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\r\n  const first = labels.indexOf(raw);\r\n  if (first === -1) {\r\n    return addIfString(labels, raw, index, addedLabels);\r\n  }\r\n  const last = labels.lastIndexOf(raw);\r\n  return first !== last ? index : first;\r\n}\r\n\r\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\r\n\r\nfunction _getLabelForValue(value) {\r\n  const labels = this.getLabels();\r\n\r\n  if (value >= 0 && value < labels.length) {\r\n    return labels[value];\r\n  }\r\n  return value;\r\n}\r\n\r\nexport default class CategoryScale extends Scale {\r\n\r\n  static id = 'category';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: _getLabelForValue\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n    this._addedLabels = [];\r\n  }\r\n\r\n  init(scaleOptions) {\r\n    const added = this._addedLabels;\r\n    if (added.length) {\r\n      const labels = this.getLabels();\r\n      for (const {index, label} of added) {\r\n        if (labels[index] === label) {\r\n          labels.splice(index, 1);\r\n        }\r\n      }\r\n      this._addedLabels = [];\r\n    }\r\n    super.init(scaleOptions);\r\n  }\r\n\r\n  parse(raw, index) {\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    const labels = this.getLabels();\r\n    index = isFinite(index) && labels[index] === raw ? index\r\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\r\n    return validIndex(index, labels.length - 1);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this.getMinMax(true);\r\n\r\n    if (this.options.bounds === 'ticks') {\r\n      if (!minDefined) {\r\n        min = 0;\r\n      }\r\n      if (!maxDefined) {\r\n        max = this.getLabels().length - 1;\r\n      }\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const offset = this.options.offset;\r\n    const ticks = [];\r\n    let labels = this.getLabels();\r\n\r\n    // If we are viewing some subset of labels, slice the original array\r\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\r\n\r\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\r\n    this._startValue = this.min - (offset ? 0.5 : 0);\r\n\r\n    for (let value = min; value <= max; value++) {\r\n      ticks.push({value});\r\n    }\r\n    return ticks;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return _getLabelForValue.call(this, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    super.configure();\r\n\r\n    if (!this.isHorizontal()) {\r\n      // For backward compatibility, vertical category scale reverse is inverted.\r\n      this._reversePixels = !this._reversePixels;\r\n    }\r\n  }\r\n\r\n  // Used to get data value locations. Value can either be an index or a numerical value\r\n  getPixelForValue(value) {\r\n    if (typeof value !== 'number') {\r\n      value = this.parse(value);\r\n    }\r\n\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  // Must override base implementation because it calls getPixelForValue\r\n  // and category scale can have duplicate values\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\r\n  }\r\n\r\n  getBasePixel() {\r\n    return this.bottom;\r\n  }\r\n}\r\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\r\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\n\r\n/**\r\n * Generate a set of linear ticks for an axis\r\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\r\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\r\n *    Note that the generationOptions.maxCount setting is respected in this scenario\r\n *\r\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\r\n *    spacing = (max - min) / count\r\n *    Ticks are generated as [min, min + spacing, ..., max]\r\n *\r\n * 3. If generationOptions.count is defined\r\n *    spacing = (niceMax - niceMin) / count\r\n *\r\n * 4. Compute optimal spacing of ticks using niceNum algorithm\r\n *\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, dataRange) {\r\n  const ticks = [];\r\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\r\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\r\n  // for details.\r\n\r\n  const MIN_SPACING = 1e-14;\r\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\r\n  const unit = step || 1;\r\n  const maxSpaces = maxTicks - 1;\r\n  const {min: rmin, max: rmax} = dataRange;\r\n  const minDefined = !isNullOrUndef(min);\r\n  const maxDefined = !isNullOrUndef(max);\r\n  const countDefined = !isNullOrUndef(count);\r\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\r\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\r\n  let factor, niceMin, niceMax, numSpaces;\r\n\r\n  // Beyond MIN_SPACING floating point numbers being to lose precision\r\n  // such that we can't do the math necessary to generate ticks\r\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\r\n    return [{value: rmin}, {value: rmax}];\r\n  }\r\n\r\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\r\n  if (numSpaces > maxSpaces) {\r\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\r\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\r\n  }\r\n\r\n  if (!isNullOrUndef(precision)) {\r\n    // If the user specified a precision, round to that number of decimal places\r\n    factor = Math.pow(10, precision);\r\n    spacing = Math.ceil(spacing * factor) / factor;\r\n  }\r\n\r\n  if (bounds === 'ticks') {\r\n    niceMin = Math.floor(rmin / spacing) * spacing;\r\n    niceMax = Math.ceil(rmax / spacing) * spacing;\r\n  } else {\r\n    niceMin = rmin;\r\n    niceMax = rmax;\r\n  }\r\n\r\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\r\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\r\n    // spacing = step;\r\n    // numSpaces = (max - min) / spacing;\r\n    // Note that we round here to handle the case where almostWhole translated an FP error\r\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\r\n    spacing = (max - min) / numSpaces;\r\n    niceMin = min;\r\n    niceMax = max;\r\n  } else if (countDefined) {\r\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\r\n    // Sometimes these are no-ops, but it makes the code a lot clearer\r\n    // and when a user defined range is specified, we want the correct ticks\r\n    niceMin = minDefined ? min : niceMin;\r\n    niceMax = maxDefined ? max : niceMax;\r\n    numSpaces = count - 1;\r\n    spacing = (niceMax - niceMin) / numSpaces;\r\n  } else {\r\n    // Case 4\r\n    numSpaces = (niceMax - niceMin) / spacing;\r\n\r\n    // If very close to our rounded value, use it.\r\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\r\n      numSpaces = Math.round(numSpaces);\r\n    } else {\r\n      numSpaces = Math.ceil(numSpaces);\r\n    }\r\n  }\r\n\r\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\r\n  // until this point\r\n  const decimalPlaces = Math.max(\r\n    _decimalPlaces(spacing),\r\n    _decimalPlaces(niceMin)\r\n  );\r\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\r\n  niceMin = Math.round(niceMin * factor) / factor;\r\n  niceMax = Math.round(niceMax * factor) / factor;\r\n\r\n  let j = 0;\r\n  if (minDefined) {\r\n    if (includeBounds && niceMin !== min) {\r\n      ticks.push({value: min});\r\n\r\n      if (niceMin < min) {\r\n        j++; // Skip niceMin\r\n      }\r\n      // If the next nice tick is close to min, skip it\r\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\r\n        j++;\r\n      }\r\n    } else if (niceMin < min) {\r\n      j++;\r\n    }\r\n  }\r\n\r\n  for (; j < numSpaces; ++j) {\r\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\r\n  }\r\n\r\n  if (maxDefined && includeBounds && niceMax !== max) {\r\n    // If the previous tick is too close to max, replace it with max, else add max\r\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\r\n      ticks[ticks.length - 1].value = max;\r\n    } else {\r\n      ticks.push({value: max});\r\n    }\r\n  } else if (!maxDefined || niceMax === max) {\r\n    ticks.push({value: niceMax});\r\n  }\r\n\r\n  return ticks;\r\n}\r\n\r\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\r\n  const rad = toRadians(minRotation);\r\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\r\n  const length = 0.75 * minSpacing * ('' + value).length;\r\n  return Math.min(minSpacing / ratio, length);\r\n}\r\n\r\nexport default class LinearScaleBase extends Scale {\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    /** @type {number} */\r\n    this._endValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\r\n      return null;\r\n    }\r\n\r\n    return +raw;\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {beginAtZero} = this.options;\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (beginAtZero) {\r\n      const minSign = sign(min);\r\n      const maxSign = sign(max);\r\n\r\n      if (minSign < 0 && maxSign < 0) {\r\n        setMax(0);\r\n      } else if (minSign > 0 && maxSign > 0) {\r\n        setMin(0);\r\n      }\r\n    }\r\n\r\n    if (min === max) {\r\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\r\n\r\n      setMax(max + offset);\r\n\r\n      if (!beginAtZero) {\r\n        setMin(min - offset);\r\n      }\r\n    }\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  getTickLimit() {\r\n    const tickOpts = this.options.ticks;\r\n    // eslint-disable-next-line prefer-const\r\n    let {maxTicksLimit, stepSize} = tickOpts;\r\n    let maxTicks;\r\n\r\n    if (stepSize) {\r\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\r\n      if (maxTicks > 1000) {\r\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\r\n        maxTicks = 1000;\r\n      }\r\n    } else {\r\n      maxTicks = this.computeTickLimit();\r\n      maxTicksLimit = maxTicksLimit || 11;\r\n    }\r\n\r\n    if (maxTicksLimit) {\r\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\r\n    }\r\n\r\n    return maxTicks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    // Figure out what the max number of ticks we can support it is based on the size of\r\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\r\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\r\n    // the graph. Make sure we always have at least 2 ticks\r\n    let maxTicks = this.getTickLimit();\r\n    maxTicks = Math.max(2, maxTicks);\r\n\r\n    const numericGeneratorOptions = {\r\n      maxTicks,\r\n      bounds: opts.bounds,\r\n      min: opts.min,\r\n      max: opts.max,\r\n      precision: tickOpts.precision,\r\n      step: tickOpts.stepSize,\r\n      count: tickOpts.count,\r\n      maxDigits: this._maxDigits(),\r\n      horizontal: this.isHorizontal(),\r\n      minRotation: tickOpts.minRotation || 0,\r\n      includeBounds: tickOpts.includeBounds !== false\r\n    };\r\n    const dataRange = this._range || this;\r\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const ticks = this.ticks;\r\n    let start = this.min;\r\n    let end = this.max;\r\n\r\n    super.configure();\r\n\r\n    if (this.options.offset && ticks.length) {\r\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\r\n      start -= offset;\r\n      end += offset;\r\n    }\r\n    this._startValue = start;\r\n    this._endValue = end;\r\n    this._valueRange = end - start;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n}\r\n","import {isFinite} from '../helpers/helpers.core.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\nimport {toRadians} from '../helpers/index.js';\r\n\r\nexport default class LinearScale extends LinearScaleBase {\r\n\r\n  static id = 'linear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.numeric\r\n    }\r\n  };\r\n\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? min : 0;\r\n    this.max = isFinite(max) ? max : 1;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n \t */\r\n  computeTickLimit() {\r\n    const horizontal = this.isHorizontal();\r\n    const length = horizontal ? this.width : this.height;\r\n    const minRotation = toRadians(this.options.ticks.minRotation);\r\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\r\n    const tickFont = this._resolveTickFontOptions(0);\r\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\r\n  }\r\n\r\n  // Utils\r\n  getPixelForValue(value) {\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\r\n  }\r\n}\r\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\n\r\nconst log10Floor = v => Math.floor(log10(v));\r\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\r\n\r\nfunction isMajor(tickVal) {\r\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\r\n  return remain === 1;\r\n}\r\n\r\nfunction steps(min, max, rangeExp) {\r\n  const rangeStep = Math.pow(10, rangeExp);\r\n  const start = Math.floor(min / rangeStep);\r\n  const end = Math.ceil(max / rangeStep);\r\n  return end - start;\r\n}\r\n\r\nfunction startExp(min, max) {\r\n  const range = max - min;\r\n  let rangeExp = log10Floor(range);\r\n  while (steps(min, max, rangeExp) > 10) {\r\n    rangeExp++;\r\n  }\r\n  while (steps(min, max, rangeExp) < 10) {\r\n    rangeExp--;\r\n  }\r\n  return Math.min(rangeExp, log10Floor(min));\r\n}\r\n\r\n\r\n/**\r\n * Generate a set of logarithmic ticks\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, {min, max}) {\r\n  min = finiteOrDefault(generationOptions.min, min);\r\n  const ticks = [];\r\n  const minExp = log10Floor(min);\r\n  let exp = startExp(min, max);\r\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\r\n  const stepSize = Math.pow(10, exp);\r\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\r\n  const start = Math.round((min - base) * precision) / precision;\r\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\r\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\r\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\r\n  while (value < max) {\r\n    ticks.push({value, major: isMajor(value), significand});\r\n    if (significand >= 10) {\r\n      significand = significand < 15 ? 15 : 20;\r\n    } else {\r\n      significand++;\r\n    }\r\n    if (significand >= 20) {\r\n      exp++;\r\n      significand = 2;\r\n      precision = exp >= 0 ? 1 : precision;\r\n    }\r\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\r\n  }\r\n  const lastTick = finiteOrDefault(generationOptions.max, value);\r\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\r\n\r\n  return ticks;\r\n}\r\n\r\nexport default class LogarithmicScale extends Scale {\r\n\r\n  static id = 'logarithmic';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.logarithmic,\r\n      major: {\r\n        enabled: true\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) {\r\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\r\n    if (value === 0) {\r\n      this._zero = true;\r\n      return undefined;\r\n    }\r\n    return isFinite(value) && value > 0 ? value : null;\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? Math.max(0, min) : null;\r\n    this.max = isFinite(max) ? Math.max(0, max) : null;\r\n\r\n    if (this.options.beginAtZero) {\r\n      this._zero = true;\r\n    }\r\n\r\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\r\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\r\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\r\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\r\n    }\r\n\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let min = this.min;\r\n    let max = this.max;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (min === max) {\r\n      if (min <= 0) { // includes null\r\n        setMin(1);\r\n        setMax(10);\r\n      } else {\r\n        setMin(changeExponent(min, -1));\r\n        setMax(changeExponent(max, +1));\r\n      }\r\n    }\r\n    if (min <= 0) {\r\n      setMin(changeExponent(max, -1));\r\n    }\r\n    if (max <= 0) {\r\n\r\n      setMax(changeExponent(min, +1));\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n\r\n    const generationOptions = {\r\n      min: this._userMin,\r\n      max: this._userMax\r\n    };\r\n    const ticks = generateTicks(generationOptions, this);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value === undefined\r\n      ? '0'\r\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const start = this.min;\r\n\r\n    super.configure();\r\n\r\n    this._startValue = log10(start);\r\n    this._valueRange = log10(this.max) - log10(start);\r\n  }\r\n\r\n  getPixelForValue(value) {\r\n    if (value === undefined || value === 0) {\r\n      value = this.min;\r\n    }\r\n    if (value === null || isNaN(value)) {\r\n      return NaN;\r\n    }\r\n    return this.getPixelForDecimal(value === this.min\r\n      ? 0\r\n      : (log10(value) - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    const decimal = this.getDecimalForPixel(pixel);\r\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\r\n  }\r\n}\r\n","import defaults from '../core/core.defaults.js';\r\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\r\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\r\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\nfunction getTickBackdropHeight(opts) {\r\n  const tickOpts = opts.ticks;\r\n\r\n  if (tickOpts.display && opts.display) {\r\n    const padding = toPadding(tickOpts.backdropPadding);\r\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction measureLabelSize(ctx, font, label) {\r\n  label = isArray(label) ? label : [label];\r\n  return {\r\n    w: _longestText(ctx, font.string, label),\r\n    h: label.length * font.lineHeight\r\n  };\r\n}\r\n\r\nfunction determineLimits(angle, pos, size, min, max) {\r\n  if (angle === min || angle === max) {\r\n    return {\r\n      start: pos - (size / 2),\r\n      end: pos + (size / 2)\r\n    };\r\n  } else if (angle < min || angle > max) {\r\n    return {\r\n      start: pos - size,\r\n      end: pos\r\n    };\r\n  }\r\n\r\n  return {\r\n    start: pos,\r\n    end: pos + size\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to fit a radial linear scale with point labels\r\n */\r\nfunction fitWithPointLabels(scale) {\r\n\r\n  // Right, this is really confusing and there is a lot of maths going on here\r\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\r\n  //\r\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\r\n  //\r\n  // Solution:\r\n  //\r\n  // We assume the radius of the polygon is half the size of the canvas at first\r\n  // at each index we check if the text overlaps.\r\n  //\r\n  // Where it does, we store that angle and that index.\r\n  //\r\n  // After finding the largest index and angle we calculate how much we need to remove\r\n  // from the shape radius to move the point inwards by that x.\r\n  //\r\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\r\n  // along with labels.\r\n  //\r\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\r\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\r\n  //\r\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\r\n  // and position it in the most space efficient manner\r\n  //\r\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\r\n\r\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\r\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\r\n  const orig = {\r\n    l: scale.left + scale._padding.left,\r\n    r: scale.right - scale._padding.right,\r\n    t: scale.top + scale._padding.top,\r\n    b: scale.bottom - scale._padding.bottom\r\n  };\r\n  const limits = Object.assign({}, orig);\r\n  const labelSizes = [];\r\n  const padding = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const pointLabelOpts = scale.options.pointLabels;\r\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\r\n    padding[i] = opts.padding;\r\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\r\n    const plFont = toFont(opts.font);\r\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\r\n    labelSizes[i] = textSize;\r\n\r\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\r\n    const angle = Math.round(toDegrees(angleRadians));\r\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\r\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\r\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\r\n  }\r\n\r\n  scale.setCenterPoint(\r\n    orig.l - limits.l,\r\n    limits.r - orig.r,\r\n    orig.t - limits.t,\r\n    limits.b - orig.b\r\n  );\r\n\r\n  // Now that text size is determined, compute the full positions\r\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\r\n}\r\n\r\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\r\n  const sin = Math.abs(Math.sin(angle));\r\n  const cos = Math.abs(Math.cos(angle));\r\n  let x = 0;\r\n  let y = 0;\r\n  if (hLimits.start < orig.l) {\r\n    x = (orig.l - hLimits.start) / sin;\r\n    limits.l = Math.min(limits.l, orig.l - x);\r\n  } else if (hLimits.end > orig.r) {\r\n    x = (hLimits.end - orig.r) / sin;\r\n    limits.r = Math.max(limits.r, orig.r + x);\r\n  }\r\n  if (vLimits.start < orig.t) {\r\n    y = (orig.t - vLimits.start) / cos;\r\n    limits.t = Math.min(limits.t, orig.t - y);\r\n  } else if (vLimits.end > orig.b) {\r\n    y = (vLimits.end - orig.b) / cos;\r\n    limits.b = Math.max(limits.b, orig.b + y);\r\n  }\r\n}\r\n\r\nfunction buildPointLabelItems(scale, labelSizes, padding) {\r\n  const items = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const opts = scale.options;\r\n  const extra = getTickBackdropHeight(opts) / 2;\r\n  const outerDistance = scale.drawingArea;\r\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\r\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\r\n    const size = labelSizes[i];\r\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\r\n    const textAlign = getTextAlignForAngle(angle);\r\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\r\n\r\n    items.push({\r\n      // Text position\r\n      x: pointLabelPosition.x,\r\n      y,\r\n\r\n      // Text rendering data\r\n      textAlign,\r\n\r\n      // Bounding box\r\n      left,\r\n      top: y,\r\n      right: left + size.w,\r\n      bottom: y + size.h\r\n    });\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction getTextAlignForAngle(angle) {\r\n  if (angle === 0 || angle === 180) {\r\n    return 'center';\r\n  } else if (angle < 180) {\r\n    return 'left';\r\n  }\r\n\r\n  return 'right';\r\n}\r\n\r\nfunction leftForTextAlign(x, w, align) {\r\n  if (align === 'right') {\r\n    x -= w;\r\n  } else if (align === 'center') {\r\n    x -= (w / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction yForAngle(y, h, angle) {\r\n  if (angle === 90 || angle === 270) {\r\n    y -= (h / 2);\r\n  } else if (angle > 270 || angle < 90) {\r\n    y -= h;\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction drawPointLabels(scale, labelCount) {\r\n  const {ctx, options: {pointLabels}} = scale;\r\n\r\n  for (let i = labelCount - 1; i >= 0; i--) {\r\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\r\n    const plFont = toFont(optsAtIndex.font);\r\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\r\n    const {backdropColor} = optsAtIndex;\r\n\r\n    if (!isNullOrUndef(backdropColor)) {\r\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\r\n      const padding = toPadding(optsAtIndex.backdropPadding);\r\n      ctx.fillStyle = backdropColor;\r\n\r\n      const backdropLeft = left - padding.left;\r\n      const backdropTop = top - padding.top;\r\n      const backdropWidth = right - left + padding.width;\r\n      const backdropHeight = bottom - top + padding.height;\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: backdropLeft,\r\n          y: backdropTop,\r\n          w: backdropWidth,\r\n          h: backdropHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\r\n      }\r\n    }\r\n\r\n    renderText(\r\n      ctx,\r\n      scale._pointLabels[i],\r\n      x,\r\n      y + (plFont.lineHeight / 2),\r\n      plFont,\r\n      {\r\n        color: optsAtIndex.color,\r\n        textAlign: textAlign,\r\n        textBaseline: 'middle'\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\r\n  const {ctx} = scale;\r\n  if (circular) {\r\n    // Draw circular arcs between the points\r\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\r\n  } else {\r\n    // Draw straight lines connecting each index\r\n    let pointPosition = scale.getPointPosition(0, radius);\r\n    ctx.moveTo(pointPosition.x, pointPosition.y);\r\n\r\n    for (let i = 1; i < labelCount; i++) {\r\n      pointPosition = scale.getPointPosition(i, radius);\r\n      ctx.lineTo(pointPosition.x, pointPosition.y);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\r\n  const ctx = scale.ctx;\r\n  const circular = gridLineOpts.circular;\r\n\r\n  const {color, lineWidth} = gridLineOpts;\r\n\r\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.save();\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.setLineDash(borderOpts.dash);\r\n  ctx.lineDashOffset = borderOpts.dashOffset;\r\n\r\n  ctx.beginPath();\r\n  pathRadiusLine(scale, radius, circular, labelCount);\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction createPointLabelContext(parent, index, label) {\r\n  return createContext(parent, {\r\n    label,\r\n    index,\r\n    type: 'pointLabel'\r\n  });\r\n}\r\n\r\nexport default class RadialLinearScale extends LinearScaleBase {\r\n\r\n  static id = 'radialLinear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    display: true,\r\n\r\n    // Boolean - Whether to animate scaling the chart from the centre\r\n    animate: true,\r\n    position: 'chartArea',\r\n\r\n    angleLines: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      borderDash: [],\r\n      borderDashOffset: 0.0\r\n    },\r\n\r\n    grid: {\r\n      circular: false\r\n    },\r\n\r\n    startAngle: 0,\r\n\r\n    // label settings\r\n    ticks: {\r\n      // Boolean - Show a backdrop to the scale label\r\n      showLabelBackdrop: true,\r\n\r\n      callback: Ticks.formatters.numeric\r\n    },\r\n\r\n    pointLabels: {\r\n      backdropColor: undefined,\r\n\r\n      // Number - The backdrop padding above & below the label in pixels\r\n      backdropPadding: 2,\r\n\r\n      // Boolean - if true, show point labels\r\n      display: true,\r\n\r\n      // Number - Point label font size in pixels\r\n      font: {\r\n        size: 10\r\n      },\r\n\r\n      // Function - Used to convert point labels\r\n      callback(label) {\r\n        return label;\r\n      },\r\n\r\n      // Number - Additionl padding between scale and pointLabel\r\n      padding: 5,\r\n\r\n      // Boolean - if true, center point labels to slices in polar chart\r\n      centerPointLabels: false\r\n    }\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    'angleLines.color': 'borderColor',\r\n    'pointLabels.color': 'color',\r\n    'ticks.color': 'color'\r\n  };\r\n\r\n  static descriptors = {\r\n    angleLines: {\r\n      _fallback: 'grid'\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.xCenter = undefined;\r\n    /** @type {number} */\r\n    this.yCenter = undefined;\r\n    /** @type {number} */\r\n    this.drawingArea = undefined;\r\n    /** @type {string[]} */\r\n    this._pointLabels = [];\r\n    this._pointLabelItems = [];\r\n  }\r\n\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\r\n    const w = this.width = this.maxWidth - padding.width;\r\n    const h = this.height = this.maxHeight - padding.height;\r\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\r\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\r\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(false);\r\n\r\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\r\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\r\n  }\r\n\r\n  generateTickLabels(ticks) {\r\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\r\n\r\n    // Point labels\r\n    this._pointLabels = this.getLabels()\r\n      .map((value, index) => {\r\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\r\n        return label || label === 0 ? label : '';\r\n      })\r\n      .filter((v, i) => this.chart.getDataVisibility(i));\r\n  }\r\n\r\n  fit() {\r\n    const opts = this.options;\r\n\r\n    if (opts.display && opts.pointLabels.display) {\r\n      fitWithPointLabels(this);\r\n    } else {\r\n      this.setCenterPoint(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\r\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\r\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\r\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\r\n  }\r\n\r\n  getIndexAngle(index) {\r\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\r\n    const startAngle = this.options.startAngle || 0;\r\n\r\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\r\n  }\r\n\r\n  getDistanceFromCenterForValue(value) {\r\n    if (isNullOrUndef(value)) {\r\n      return NaN;\r\n    }\r\n\r\n    // Take into account half font size + the yPadding of the top value\r\n    const scalingFactor = this.drawingArea / (this.max - this.min);\r\n    if (this.options.reverse) {\r\n      return (this.max - value) * scalingFactor;\r\n    }\r\n    return (value - this.min) * scalingFactor;\r\n  }\r\n\r\n  getValueForDistanceFromCenter(distance) {\r\n    if (isNullOrUndef(distance)) {\r\n      return NaN;\r\n    }\r\n\r\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\r\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\r\n  }\r\n\r\n  getPointLabelContext(index) {\r\n    const pointLabels = this._pointLabels || [];\r\n\r\n    if (index >= 0 && index < pointLabels.length) {\r\n      const pointLabel = pointLabels[index];\r\n      return createPointLabelContext(this.getContext(), index, pointLabel);\r\n    }\r\n  }\r\n\r\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\r\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\r\n    return {\r\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\r\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\r\n      angle\r\n    };\r\n  }\r\n\r\n  getPointPositionForValue(index, value) {\r\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\r\n  }\r\n\r\n  getBasePosition(index) {\r\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\r\n  }\r\n\r\n  getPointLabelPosition(index) {\r\n    const {left, top, right, bottom} = this._pointLabelItems[index];\r\n    return {\r\n      left,\r\n      top,\r\n      right,\r\n      bottom,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBackground() {\r\n    const {backgroundColor, grid: {circular}} = this.options;\r\n    if (backgroundColor) {\r\n      const ctx = this.ctx;\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\r\n      ctx.closePath();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const {angleLines, grid, border} = opts;\r\n    const labelCount = this._pointLabels.length;\r\n\r\n    let i, offset, position;\r\n\r\n    if (opts.pointLabels.display) {\r\n      drawPointLabels(this, labelCount);\r\n    }\r\n\r\n    if (grid.display) {\r\n      this.ticks.forEach((tick, index) => {\r\n        if (index !== 0) {\r\n          offset = this.getDistanceFromCenterForValue(tick.value);\r\n          const context = this.getContext(index);\r\n          const optsAtIndex = grid.setContext(context);\r\n          const optsAtIndexBorder = border.setContext(context);\r\n\r\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (angleLines.display) {\r\n      ctx.save();\r\n\r\n      for (i = labelCount - 1; i >= 0; i--) {\r\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\r\n        const {color, lineWidth} = optsAtIndex;\r\n\r\n        if (!lineWidth || !color) {\r\n          continue;\r\n        }\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = color;\r\n\r\n        ctx.setLineDash(optsAtIndex.borderDash);\r\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\r\n\r\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\r\n        position = this.getPointPosition(i, offset);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.xCenter, this.yCenter);\r\n        ctx.lineTo(position.x, position.y);\r\n        ctx.stroke();\r\n      }\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {}\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    if (!tickOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const startAngle = this.getIndexAngle(0);\r\n    let offset, width;\r\n\r\n    ctx.save();\r\n    ctx.translate(this.xCenter, this.yCenter);\r\n    ctx.rotate(startAngle);\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    this.ticks.forEach((tick, index) => {\r\n      if (index === 0 && !opts.reverse) {\r\n        return;\r\n      }\r\n\r\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\r\n      const tickFont = toFont(optsAtIndex.font);\r\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        ctx.font = tickFont.string;\r\n        width = ctx.measureText(tick.label).width;\r\n        ctx.fillStyle = optsAtIndex.backdropColor;\r\n\r\n        const padding = toPadding(optsAtIndex.backdropPadding);\r\n        ctx.fillRect(\r\n          -width / 2 - padding.left,\r\n          -offset - tickFont.size / 2 - padding.top,\r\n          width + padding.width,\r\n          tickFont.size + padding.height\r\n        );\r\n      }\r\n\r\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\r\n        color: optsAtIndex.color,\r\n      });\r\n    });\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {}\r\n}\r\n","import adapters from '../core/core.adapters.js';\r\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\r\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\r\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\r\n */\r\n\r\n/**\r\n * @type {Object<Unit, Interval>}\r\n */\r\nconst INTERVALS = {\r\n  millisecond: {common: true, size: 1, steps: 1000},\r\n  second: {common: true, size: 1000, steps: 60},\r\n  minute: {common: true, size: 60000, steps: 60},\r\n  hour: {common: true, size: 3600000, steps: 24},\r\n  day: {common: true, size: 86400000, steps: 30},\r\n  week: {common: false, size: 604800000, steps: 4},\r\n  month: {common: true, size: 2.628e9, steps: 12},\r\n  quarter: {common: false, size: 7.884e9, steps: 4},\r\n  year: {common: true, size: 3.154e10}\r\n};\r\n\r\n/**\r\n * @type {Unit[]}\r\n */\r\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nfunction sorter(a, b) {\r\n  return a - b;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {*} input\r\n * @return {number}\r\n */\r\nfunction parse(scale, input) {\r\n  if (isNullOrUndef(input)) {\r\n    return null;\r\n  }\r\n\r\n  const adapter = scale._adapter;\r\n  const {parser, round, isoWeekday} = scale._parseOpts;\r\n  let value = input;\r\n\r\n  if (typeof parser === 'function') {\r\n    value = parser(value);\r\n  }\r\n\r\n  // Only parse if its not a timestamp already\r\n  if (!isFinite(value)) {\r\n    value = typeof parser === 'string'\r\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\r\n      : adapter.parse(value);\r\n  }\r\n\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n\r\n  if (round) {\r\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\r\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\r\n      : adapter.startOf(value, round);\r\n  }\r\n\r\n  return +value;\r\n}\r\n\r\n/**\r\n * Figures out what unit results in an appropriate number of auto-generated ticks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @param {number} capacity\r\n * @return {object}\r\n */\r\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\r\n  const ilen = UNITS.length;\r\n\r\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\r\n    const interval = INTERVALS[UNITS[i]];\r\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\r\n\r\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n\r\n  return UNITS[ilen - 1];\r\n}\r\n\r\n/**\r\n * Figures out what unit to format a set of ticks with\r\n * @param {TimeScale} scale\r\n * @param {number} numTicks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {Unit}\r\n */\r\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\r\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\r\n    const unit = UNITS[i];\r\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\r\n      return unit;\r\n    }\r\n  }\r\n\r\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\r\n}\r\n\r\n/**\r\n * @param {Unit} unit\r\n * @return {object}\r\n */\r\nfunction determineMajorUnit(unit) {\r\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\r\n    if (INTERVALS[UNITS[i]].common) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {object} ticks\r\n * @param {number} time\r\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\r\n */\r\nfunction addTick(ticks, time, timestamps) {\r\n  if (!timestamps) {\r\n    ticks[time] = true;\r\n  } else if (timestamps.length) {\r\n    const {lo, hi} = _lookup(timestamps, time);\r\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\r\n    ticks[timestamp] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {object[]} ticks\r\n * @param {object} map\r\n * @param {Unit} majorUnit\r\n * @return {object[]}\r\n */\r\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\r\n  const adapter = scale._adapter;\r\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\r\n  const last = ticks[ticks.length - 1].value;\r\n  let major, index;\r\n\r\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\r\n    index = map[major];\r\n    if (index >= 0) {\r\n      ticks[index].major = true;\r\n    }\r\n  }\r\n  return ticks;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {number[]} values\r\n * @param {Unit|undefined} [majorUnit]\r\n * @return {object[]}\r\n */\r\nfunction ticksFromTimestamps(scale, values, majorUnit) {\r\n  const ticks = [];\r\n  /** @type {Object<number,object>} */\r\n  const map = {};\r\n  const ilen = values.length;\r\n  let i, value;\r\n\r\n  for (i = 0; i < ilen; ++i) {\r\n    value = values[i];\r\n    map[value] = i;\r\n\r\n    ticks.push({\r\n      value,\r\n      major: false\r\n    });\r\n  }\r\n\r\n  // We set the major ticks separately from the above loop because calling startOf for every tick\r\n  // is expensive when there is a large number of ticks\r\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\r\n}\r\n\r\nexport default class TimeScale extends Scale {\r\n\r\n  static id = 'time';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 2.7.0\r\n     */\r\n    bounds: 'data',\r\n\r\n    adapters: {},\r\n    time: {\r\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\r\n      unit: false, // false == automatic or override with week, month, year, etc.\r\n      round: false, // none, or override with week, month, year, etc.\r\n      isoWeekday: false, // override week start day\r\n      minUnit: 'millisecond',\r\n      displayFormats: {}\r\n    },\r\n    ticks: {\r\n      /**\r\n       * Ticks generation input values:\r\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\r\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\r\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\r\n       * @see https://github.com/chartjs/Chart.js/pull/4507\r\n       * @since 2.7.0\r\n       */\r\n      source: 'auto',\r\n\r\n      callback: false,\r\n\r\n      major: {\r\n        enabled: false\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {{data: number[], labels: number[], all: number[]}} */\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n\r\n    /** @type {Unit} */\r\n    this._unit = 'day';\r\n    /** @type {Unit=} */\r\n    this._majorUnit = undefined;\r\n    this._offsets = {};\r\n    this._normalized = false;\r\n    this._parseOpts = undefined;\r\n  }\r\n\r\n  init(scaleOpts, opts = {}) {\r\n    const time = scaleOpts.time || (scaleOpts.time = {});\r\n    /** @type {DateAdapter} */\r\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\r\n\r\n    adapter.init(opts);\r\n\r\n    // Backward compatibility: before introducing adapter, `displayFormats` was\r\n    // supposed to contain *all* unit/string pairs but this can't be resolved\r\n    // when loading the scale (adapters are loaded afterward), so let's populate\r\n    // missing formats on update\r\n    mergeIf(time.displayFormats, adapter.formats());\r\n\r\n    this._parseOpts = {\r\n      parser: time.parser,\r\n      round: time.round,\r\n      isoWeekday: time.isoWeekday\r\n    };\r\n\r\n    super.init(scaleOpts);\r\n\r\n    this._normalized = opts.normalized;\r\n  }\r\n\r\n  /**\r\n\t * @param {*} raw\r\n\t * @param {number?} [index]\r\n\t * @return {number}\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (raw === undefined) {\r\n      return null;\r\n    }\r\n    return parse(this, raw);\r\n  }\r\n\r\n  beforeLayout() {\r\n    super.beforeLayout();\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const options = this.options;\r\n    const adapter = this._adapter;\r\n    const unit = options.time.unit || 'day';\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n\r\n    /**\r\n\t\t * @param {object} bounds\r\n\t\t */\r\n    function _applyBounds(bounds) {\r\n      if (!minDefined && !isNaN(bounds.min)) {\r\n        min = Math.min(min, bounds.min);\r\n      }\r\n      if (!maxDefined && !isNaN(bounds.max)) {\r\n        max = Math.max(max, bounds.max);\r\n      }\r\n    }\r\n\r\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\r\n    if (!minDefined || !maxDefined) {\r\n      // Labels are always considered, when user did not force bounds\r\n      _applyBounds(this._getLabelBounds());\r\n\r\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\r\n      // data bounds are ignored (and don't need to be determined)\r\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\r\n        _applyBounds(this.getMinMax(false));\r\n      }\r\n    }\r\n\r\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\r\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\r\n\r\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\r\n    this.min = Math.min(min, max - 1);\r\n    this.max = Math.max(min + 1, max);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLabelBounds() {\r\n    const arr = this.getLabelTimestamps();\r\n    let min = Number.POSITIVE_INFINITY;\r\n    let max = Number.NEGATIVE_INFINITY;\r\n\r\n    if (arr.length) {\r\n      min = arr[0];\r\n      max = arr[arr.length - 1];\r\n    }\r\n    return {min, max};\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t */\r\n  buildTicks() {\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    const tickOpts = options.ticks;\r\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\r\n\r\n    if (options.bounds === 'ticks' && timestamps.length) {\r\n      this.min = this._userMin || timestamps[0];\r\n      this.max = this._userMax || timestamps[timestamps.length - 1];\r\n    }\r\n\r\n    const min = this.min;\r\n    const max = this.max;\r\n\r\n    const ticks = _filterBetween(timestamps, min, max);\r\n\r\n    // PRIVATE\r\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\r\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\r\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\r\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\r\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\r\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\r\n      : determineMajorUnit(this._unit);\r\n    this.initOffsets(timestamps);\r\n\r\n    if (options.reverse) {\r\n      ticks.reverse();\r\n    }\r\n\r\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\r\n  }\r\n\r\n  afterAutoSkip() {\r\n    // Offsets for bar charts need to be handled with the auto skipped\r\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\r\n    if (this.options.offsetAfterAutoskip) {\r\n      this.initOffsets(this.ticks.map(tick => +tick.value));\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the start and end offsets from edges in the form of {start, end}\r\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\r\n\t * They add extra margins on the both sides by scaling down the original scale.\r\n\t * Offsets are added when the `offset` option is true.\r\n\t * @param {number[]} timestamps\r\n\t * @protected\r\n\t */\r\n  initOffsets(timestamps = []) {\r\n    let start = 0;\r\n    let end = 0;\r\n    let first, last;\r\n\r\n    if (this.options.offset && timestamps.length) {\r\n      first = this.getDecimalForValue(timestamps[0]);\r\n      if (timestamps.length === 1) {\r\n        start = 1 - first;\r\n      } else {\r\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\r\n      }\r\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\r\n      if (timestamps.length === 1) {\r\n        end = last;\r\n      } else {\r\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\r\n      }\r\n    }\r\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\r\n    start = _limitValue(start, 0, limit);\r\n    end = _limitValue(end, 0, limit);\r\n\r\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\r\n  }\r\n\r\n  /**\r\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\r\n\t * `minor` unit using the given scale time `options`.\r\n\t * Important: this method can return ticks outside the min and max range, it's the\r\n\t * responsibility of the calling code to clamp values if needed.\r\n\t * @private\r\n\t */\r\n  _generate() {\r\n    const adapter = this._adapter;\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    // @ts-ignore\r\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\r\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\r\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\r\n    const hasWeekday = isNumber(weekday) || weekday === true;\r\n    const ticks = {};\r\n    let first = min;\r\n    let time, count;\r\n\r\n    // For 'week' unit, handle the first day of week option\r\n    if (hasWeekday) {\r\n      first = +adapter.startOf(first, 'isoWeek', weekday);\r\n    }\r\n\r\n    // Align first ticks on unit\r\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\r\n\r\n    // Prevent browser from freezing in case user options request millions of milliseconds\r\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\r\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\r\n    }\r\n\r\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\r\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    if (time === max || options.bounds === 'ticks' || count === 1) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    // @ts-ignore\r\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    const adapter = this._adapter;\r\n    const timeOpts = this.options.time;\r\n\r\n    if (timeOpts.tooltipFormat) {\r\n      return adapter.format(value, timeOpts.tooltipFormat);\r\n    }\r\n    return adapter.format(value, timeOpts.displayFormats.datetime);\r\n  }\r\n\r\n  /**\r\n\t * Function to format an individual tick mark\r\n\t * @param {number} time\r\n\t * @param {number} index\r\n\t * @param {object[]} ticks\r\n\t * @param {string|undefined} [format]\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n  _tickFormatFunction(time, index, ticks, format) {\r\n    const options = this.options;\r\n    const formatter = options.ticks.callback;\r\n\r\n    if (formatter) {\r\n      return call(formatter, [time, index, ticks], this);\r\n    }\r\n\r\n    const formats = options.time.displayFormats;\r\n    const unit = this._unit;\r\n    const majorUnit = this._majorUnit;\r\n    const minorFormat = unit && formats[unit];\r\n    const majorFormat = majorUnit && formats[majorUnit];\r\n    const tick = ticks[index];\r\n    const major = majorUnit && majorFormat && tick && tick.major;\r\n\r\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\r\n  }\r\n\r\n  /**\r\n\t * @param {object[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    let i, ilen, tick;\r\n\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForValue(value);\r\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return this.min + pos * (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} label\r\n\t * @return {{w:number, h:number}}\r\n\t * @private\r\n\t */\r\n  _getLabelSize(label) {\r\n    const ticksOpts = this.options.ticks;\r\n    const tickLabelWidth = this.ctx.measureText(label).width;\r\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\r\n    const cosRotation = Math.cos(angle);\r\n    const sinRotation = Math.sin(angle);\r\n    const tickFontSize = this._resolveTickFontOptions(0).size;\r\n\r\n    return {\r\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\r\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {number} exampleTime\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _getLabelCapacity(exampleTime) {\r\n    const timeOpts = this.options.time;\r\n    const displayFormats = timeOpts.displayFormats;\r\n\r\n    // pick the longest format (milliseconds) for guestimation\r\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\r\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\r\n    const size = this._getLabelSize(exampleLabel);\r\n    // subtract 1 - if offset then there's one less label than tick\r\n    // if not offset then one half label padding is added to each end leaving room for one less label\r\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\r\n    return capacity > 0 ? capacity : 1;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataTimestamps() {\r\n    let timestamps = this._cache.data || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n\r\n    if (this._normalized && metas.length) {\r\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    return (this._cache.data = this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelTimestamps() {\r\n    const timestamps = this._cache.labels || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const labels = this.getLabels();\r\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\r\n      timestamps.push(parse(this, labels[i]));\r\n    }\r\n\r\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @param {number[]} values\r\n\t * @protected\r\n\t */\r\n  normalize(values) {\r\n    // It seems to be somewhat faster to do sorting first\r\n    return _arrayUnique(values.sort(sorter));\r\n  }\r\n}\r\n","import TimeScale from './scale.time.js';\r\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\r\n\r\n/**\r\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\r\n * at edges are used for the interpolation.\r\n * @param {object} table\r\n * @param {number} val\r\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\r\n * @return {object}\r\n */\r\nfunction interpolate(table, val, reverse) {\r\n  let lo = 0;\r\n  let hi = table.length - 1;\r\n  let prevSource, nextSource, prevTarget, nextTarget;\r\n  if (reverse) {\r\n    if (val >= table[lo].pos && val <= table[hi].pos) {\r\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\r\n    }\r\n    ({pos: prevSource, time: prevTarget} = table[lo]);\r\n    ({pos: nextSource, time: nextTarget} = table[hi]);\r\n  } else {\r\n    if (val >= table[lo].time && val <= table[hi].time) {\r\n      ({lo, hi} = _lookupByKey(table, 'time', val));\r\n    }\r\n    ({time: prevSource, pos: prevTarget} = table[lo]);\r\n    ({time: nextSource, pos: nextTarget} = table[hi]);\r\n  }\r\n\r\n  const span = nextSource - prevSource;\r\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\r\n}\r\n\r\nclass TimeSeriesScale extends TimeScale {\r\n\r\n  static id = 'timeseries';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = TimeScale.defaults;\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {object[]} */\r\n    this._table = [];\r\n    /** @type {number} */\r\n    this._minPos = undefined;\r\n    /** @type {number} */\r\n    this._tableRange = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  initOffsets() {\r\n    const timestamps = this._getTimestampsForTable();\r\n    const table = this._table = this.buildLookupTable(timestamps);\r\n    this._minPos = interpolate(table, this.min);\r\n    this._tableRange = interpolate(table, this.max) - this._minPos;\r\n    super.initOffsets(timestamps);\r\n  }\r\n\r\n  /**\r\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\r\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\r\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\r\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\r\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\r\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\r\n\t * @param {number[]} timestamps\r\n\t * @return {object[]}\r\n\t * @protected\r\n\t */\r\n  buildLookupTable(timestamps) {\r\n    const {min, max} = this;\r\n    const items = [];\r\n    const table = [];\r\n    let i, ilen, prev, curr, next;\r\n\r\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\r\n      curr = timestamps[i];\r\n      if (curr >= min && curr <= max) {\r\n        items.push(curr);\r\n      }\r\n    }\r\n\r\n    if (items.length < 2) {\r\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\r\n      return [\r\n        {time: min, pos: 0},\r\n        {time: max, pos: 1}\r\n      ];\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      next = items[i + 1];\r\n      prev = items[i - 1];\r\n      curr = items[i];\r\n\r\n      // only add points that breaks the scale linearity\r\n      if (Math.round((next + prev) / 2) !== curr) {\r\n        table.push({time: curr, pos: i / (ilen - 1)});\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  /**\r\n\t * Returns all timestamps\r\n\t * @return {number[]}\r\n\t * @private\r\n\t */\r\n  _getTimestampsForTable() {\r\n    let timestamps = this._cache.all || [];\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const data = this.getDataTimestamps();\r\n    const label = this.getLabelTimestamps();\r\n    if (data.length && label.length) {\r\n      // If combining labels and data (data might not contain all labels),\r\n      // we need to recheck uniqueness and sort\r\n      timestamps = this.normalize(data.concat(label));\r\n    } else {\r\n      timestamps = data.length ? data : label;\r\n    }\r\n    timestamps = this._cache.all = timestamps;\r\n\r\n    return timestamps;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\r\n  }\r\n}\r\n\r\nexport default TimeSeriesScale;\r\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\n\r\n/**\r\n * @namespace Chart\r\n */\r\nimport Chart from './core/core.controller.js';\r\n\r\nimport * as helpers from './helpers/index.js';\r\nimport _adapters from './core/core.adapters.js';\r\nimport Animation from './core/core.animation.js';\r\nimport animator from './core/core.animator.js';\r\nimport Animations from './core/core.animations.js';\r\nimport * as controllers from './controllers/index.js';\r\nimport DatasetController from './core/core.datasetController.js';\r\nimport Element from './core/core.element.js';\r\nimport * as elements from './elements/index.js';\r\nimport Interaction from './core/core.interaction.js';\r\nimport layouts from './core/core.layouts.js';\r\nimport * as platforms from './platform/index.js';\r\nimport * as plugins from './plugins/index.js';\r\nimport registry from './core/core.registry.js';\r\nimport Scale from './core/core.scale.js';\r\nimport * as scales from './scales/index.js';\r\nimport Ticks from './core/core.ticks.js';\r\n\r\n// Register built-ins\r\nChart.register(controllers, scales, elements, plugins);\r\n\r\nChart.helpers = {...helpers};\r\nChart._adapters = _adapters;\r\nChart.Animation = Animation;\r\nChart.Animations = Animations;\r\nChart.animator = animator;\r\nChart.controllers = registry.controllers.items;\r\nChart.DatasetController = DatasetController;\r\nChart.Element = Element;\r\nChart.elements = elements;\r\nChart.Interaction = Interaction;\r\nChart.layouts = layouts;\r\nChart.platforms = platforms;\r\nChart.Scale = Scale;\r\nChart.Ticks = Ticks;\r\n\r\n// Compatibility with ESM extensions\r\nObject.assign(Chart, controllers, scales, elements, plugins, platforms);\r\nChart.Chart = Chart;\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.Chart = Chart;\r\n}\r\n\r\nexport default Chart;\r\n\r\n"],"names":["id","uid","isNullOrUndef","value","Array","isArray","isNumberFinite","defaultValue","type","slice","isObject","Object","prototype","toString","call","i","len","Number","isFinite","fn","finiteOrDefault","valueOrDefault","v1","dimension","endsWith","parseFloat","callback","args","thisArg","apply","each","loopable","reverse","source","length","keys","k","target","isValidKey","_elementsEqual","a0","a1","tval","sval","merge","options","v0","datasetIndex","index","clone","merger","ilen","current","sources","create","klen","mergeIf","indexOf","key","_merger","v","o","y","parts","split","tmp","part","_mergerIf","resolveObjectKey","obj","_capitalize","str","hasOwnProperty","keyResolvers","x","e","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","abs","epsilon","Math","almostEquals","roundedRange","round","range","niceFraction","niceRange","pow","floor","result","sqrt","_factorize","b","a","push","almostWhole","sort","isNaN","array","degrees","property","toDegrees","radians","min","max","toRadians","p","angle","distance","radialDistanceFromCenter","distanceBetweenPoints","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","_normalizeAngle","TAU","angleToStart","endToAngle","angleToEnd","_angleDiff","_limitValue","_lookup","table","cmp","mid","hi","lo","end","last","values","start","_rlookupByKey","defineProperty","enumerable","listener","arrayEvents","_chartjs","base","listeners","stub","method","splice","this","forEach","object","res","unlistenArrayEvents","Set","set","items","requestAnimFrame","window","requestAnimationFrame","ticking","debounce","timeout","delay","align","clearTimeout","setTimeout","meta","_alignStartEnd","_textX","left","right","rtl","count","_getStartAndCountOfVisiblePoints","points","animationsDisabled","pointCount","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","xScale","xmin","xmax","_lookupByKey","getPixelForValue","ymax","newRanges","assign","changed","Animator","constructor","_request","anims","numSteps","callbacks","chart","initial","_notify","date","duration","currentStep","_running","_charts","item","_active","remaining","draw","_total","tick","charts","get","running","complete","progress","event","Date","cur","_getAnims","has","now","reduce","acc","_duration","_refresh","lim","l","h","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","c","d","f","hex","h1","h2","eq","hexString","r","g","isShort","alpha","undefined","HUE_RE","hsl2rgbn","s","n","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","hueValue","calln","map","hsl2rgb","hue","hueParse","m","exec","p1","p2","hwb2rgb","hsv2rgb","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","nameParse","unpacked","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","RGB_RE","to","from","modHSL","ratio","proto","fromObject","input","functionParse","charAt","rgbParse","Color","ret","_rgb","_valid","valid","rgbString","hslString","mix","color","weight","c1","c2","w2","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","isPatternOrGradient","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","Intl","NumberFormat","getNumberFormat","format","formatters","notation","delta","numeric","tickValue","numDecimal","maximumFractionDigits","maxTick","ticks","calculateDelta","logDelta","minimumFractionDigits","remain","logarithmic","significand","overrides","descriptors","node","root","scope","getScope","Defaults","_descriptors","_appliers","events","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","font","family","size","style","lineHeight","hover","intersect","includeInvisible","ctx","hoverBorderColor","maintainAspectRatio","onHover","onClick","mode","scales","showLine","drawActiveElementsOnTop","describe","responsive","scale","defineProperties","route","name","targetScope","targetName","scopeObject","_scriptable","privateName","applyAnimationsDefaults","applyLayoutsDefaults","applyScaleDefaults","targetScopeObject","defaults","easing","loop","_fallback","_indexable","properties","active","animation","resize","show","animations","visible","hide","autoPadding","padding","top","bottom","display","offset","beginAtZero","drawOnChartArea","tickColor","grid","dash","dashOffset","width","tickWidth","_ctx","lineWidth","text","title","minRotation","mirror","labelOffset","maxRotation","Ticks","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","startsWith","parent","document","valueInPixels","domNode","getComputedStyle","element","ownerDocument","getStyle","getPropertyValue","styleValue","parentNode","parentProperty","defaultView","pos","el","styles","touches","suffix","offsetX","offsetY","box","useOffsetPos","height","rect","maxWidth","maxHeight","canvas","currentDevicePixelRatio","clientHeight","paddings","getPositionedStyle","borders","container","clientY","shadowRoot","borderBox","boxSizing","xOffset","yOffset","containerBorder","containerStyle","containerPadding","maintainHeight","aspectRatio","parseMaxStyle","containerSize","_getParentNode","margins","bbHeight","getContainerSize","bbWidth","pixelRatio","round1","forceStyle","retinaScale","forceRatio","passiveSupported","deviceHeight","deviceWidth","textWidth","longest","_longestText","arrayOfThings","cache","_measureText","data","gc","string","thing","garbageCollect","jlen","nestedThing","restore","gcLen","halfWidth","save","resetTransform","drawPointLegend","pixel","translate","clearCanvas","radius","clearRect","ellipse","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","sin","rad","lineTo","closePath","drawImage","arc","moveTo","cos","SQRT1_2","borderWidth","stroke","margin","area","point","clipArea","_steppedLineTo","midpoint","fill","lines","line","setRenderOpts","opts","strokeStyle","previous","flip","strokeWidth","fillText","cp1x","cp2x","cp1y","cp2y","renderText","strokeColor","decorateText","translation","bottomLeft","fillStyle","textAlign","textBaseline","metrics","yDecoration","strikethrough","beginPath","fillRect","oldColor","scopes","fallback","getTarget","override","Symbol","_cacheable","_scopes","_rootScopes","rootScopes","_createResolver","prefixes","Proxy","deleteProperty","prop","Reflect","getPrototypeOf","_cached","parsed","_resolveWithPrefixes","getOwnPropertyDescriptor","_stack","descriptorDefaults","ownKeys","getKeysFromAllScopes","storage","_storage","_resolveWithContext","_keys","configurable","_attachContext","proxy","subProxy","_proxy","_context","setContext","_allKeys","isIndexable","isFunction","_subProxy","isScriptable","receiver","Error","join","createSubResolver","resolveFallback","needsSubResolver","add","allScopes","defined","filter","arr","resolver","addScopesFromKey","_resolveArray","allKeys","resolve","_resolveScriptable","delete","scriptable","indexable","readKey","subGetTarget","parentScopes","parentFallback","resolveKeysFromAllScopes","addScopes","EPSILON","getPoint","skip","getValueAxis","indexAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","pointAfter","valueAxis","pointsLen","pointCurrent","pointBefore","deltaK","monotoneAdjust","monotoneCompute","slopeDelta","mK","tauK","alphaK","betaK","squaredMagnitude","inAreaPrev","iPixel","vPixel","_isPointInArea","inArea","inAreaNext","prev","capBezierPoints","controlPoints","capControlPoint","atEdge","elasticIn","elasticOut","effects","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeOutBounce","easeInOutBounce","_steppedInterpolation","_bezierInterpolation","_pointInLine","cp2","cp1","LINE_HEIGHT","FONT_STYLE","toLineHeight","match","matches","_readValueToProps","props","objProps","read","warn","toTRBLCorners","toPadding","inputs","cacheable","info","console","grace","keepZero","change","toFontString","getRtlAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","between","_angleBetween","compare","_isBetween","normalize","bounds","shouldStop","endIsBefore","startBound","endBound","propertyFn","segment","getSegment","prevValue","inside","subStart","shouldStart","_boundSegment","normalizeSegment","segments","sub","_computeSegments","segmentOptions","spanGaps","dir","splitByStyles","stop","findStartAndEnd","completeLoop","doSplitByStyles","solidSegments","_fullLoop","chartContext","_chart","getContext","addStyle","prevStyle","readStyle","st","borderCapStyle","borderDashOffset","p0DataIndex","p1DataIndex","pixelSize","fontStyle","fontFamily","binarySearch","metaset","controller","lookupMethod","_sorted","_reversePixels","_sharedOptions","getRange","metasets","handler","deltaX","getSortedVisibleDatasetMetas","position","isPointInArea","useFinalPosition","evaluateInteractionItems","chartArea","inRange","minDistance","useX","pt1","pt2","deltaY","useY","intersectsItem","center","getCenterPoint","distanceMetric","getRelativePosition","getNearestCartesianItems","getNearestRadialItems","getAxisItems","Interaction","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","layouts","stacks","wrap","includes","stack","stackWeight","vBoxMaxWidth","fullSize","hBoxMaxHeight","params","layout","factor","availableHeight","sortByWeight","boxPadding","maxPadding","updateDims","horizontal","updateMaxPadding","getPadding","newWidth","newHeight","widthChanged","heightChanged","other","handleMaxPadding","marginForPositions","positions","fitBoxes","boxes","refit","same","getMargins","refitBoxes","placeBoxes","userPadding","setBoxDims","placed","height1","width1","addBox","_layers","verticalBoxes","horizontalBoxes","layoutItem","minPadding","visibleVerticalBoxCount","availableWidth","layoutBoxes","buildStacks","centerHorizontal","centerVertical","concat","vertical","rightAndBottom","getCombinedMax","total","freeze","outerWidth","updatePos","BasePlatform","acquireContext","releaseContext","BasicPlatform","config","touchend","EVENT_TYPES","pointerout","touchmove","pointerenter","pointerdown","pointermove","pointerup","pointerleave","renderHeight","renderWidth","isNullOrEmpty","nodeListContains","nodeList","eventListenerOptions","childList","subtree","observer","trigger","entry","addedNodes","entries","removedNodes","observe","drpListeningCharts","oldDevicePixelRatio","addEventListener","dpr","removeEventListener","onWindowResize","throttled","contentRect","releaseObserver","disconnect","addListener","clientWidth","createProxyAndListen","native","fromNativeEvent","EXPANDO_KEY","getAttribute","displayWidth","displayHeight","readUsedSize","initCanvas","proxies","createAttachObserver","createResizeObserver","getMaximumSize","attach","detach","_detectPlatform","_isDomSupported","OffscreenCanvas","DomPlatform","interpolators","boolean","number","c0","helpersColor","Animation","cfg","currentValue","_loop","_target","_prop","_from","_to","_promises","update","_start","elapsed","promises","Promise","_fn","rej","resolved","Animations","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$animations","resolveTargetOptions","_createAnimations","$shared","anim","wait","all","awaitAll","then","allowedOverflow","yScale","filterVisible","otherValue","singleMode","dsIndex","convertObjectDataToArray","isStacked","stacked","indexScale","getOrCreateStack","stackKey","indexValue","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","iAxis","vAxis","_stacks","valueScale","getStackKey","itemStacks","_top","getFirstScaleId","createContext","shift","clearStacks","cloneIfNotShared","getSortedDatasetIndices","cached","shared","DatasetController","static","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","getMeta","datasetElementType","dataElementType","_parsing","_data","_objectData","linkScales","_stacked","addElements","updateIndex","_cachedMeta","isPluginEnabled","dataset","yid","rid","vAxisID","getScaleForId","chooseId","xid","xAxisID","yAxisID","rAxisID","iid","iAxisID","vid","rScale","getDataset","_update","_destroy","adata","oldStacked","listenArrayEvents","stackChanged","_dataCheck","resetNewElements","_resyncElements","parsePrimitiveData","scopeKeys","datasetScopeKeys","_type","getOptionScopes","_cachedDataOpts","sorted","labels","parse","singleScale","parseArrayData","parsedValue","parseObjectData","xAxisKey","otherScale","updateRangeFromParsed","yAxisKey","getParsed","getDataElement","applyStack","NaN","label","toClip","_getOtherScale","canStack","hidden","createStack","NEGATIVE_INFINITY","otherMax","otherMin","_skip","dataIndex","getMaxOverflow","getLabelAndValue","getLabelForValue","elementType","disabled","_drawStart","raw","resolveDataElementOptions","getSharedOptions","firstOpts","updateSharedOptions","sharedOptions","includeOptions","_resolveElementOptions","sharing","removeHoverStyle","setHoverStyle","resolveNamedOptions","arg2","numData","transition","_insertElements","_removeElements","datasetAnimationScopeKeys","move","isDirectUpdateMode","_animationsDisabled","removed","previouslySharedOptions","_setStyle","_resolveAnimations","_removeDatasetHoverStyle","_setDatasetHoverStyle","Element","tooltipPosition","getProps","hasValue","isNumber","final","autoSkip","tickLength","_tickSize","maxScale","_length","_maxLength","maxChart","majorIndices","newTicks","tickOpts","enabled","getMajorIndices","spacing","numMajorIndices","majorStart","ceil","ticksLimit","evenMajorSpacing","getEvenSpacing","factors","determineMaxTicks","avgMajorSpacing","first","majorEnd","diff","offsetFromEdge","edge","sample","numItems","increment","validIndex","_startPixel","getPixelForGridLine","offsetGridLines","_endPixel","lineValue","getPixelForTick","getTickMarkLength","drawTicks","titleY","positionAxisID","reverseAlign","Scale","super","paddingTop","paddingLeft","labelRotation","_margins","paddingBottom","_borderValue","_cache","_dataLimitsCached","_gridLineItems","_labelItems","init","_userMin","_suggestedMax","_userMax","_suggestedMin","_ticksLength","metas","getMinMax","sampleSize","paddingRight","getLabels","isHorizontal","xLabels","yLabels","afterBuildTicks","beforeUpdate","beforeFit","fit","afterFit","endPixel","_labelSizes","beforeSetDimensions","setDimensions","afterSetDimensions","reversePixels","afterDataLimits","_range","_addGrace","beforeBuildTicks","buildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterUpdate","startPixel","_callHooks","_alignToPixels","alignToPixels","notifyPlugins","labelSizes","maxLabelDiagonal","beforeTickToLabelConversion","generateTickLabels","minSize","tickPadding","angleRadians","numTicks","labelHeight","_getLabelSizes","widest","labelWidth","_calculatePadding","maxLabelWidth","getTitleHeight","maxLabelHeight","asin","highest","offsetLeft","titleOpts","gridOpts","titleHeight","_handleMargins","isRotated","labelsBelowTicks","offsetRight","tickFont","_resolveTickFontOptions","widths","heights","afterTickToLabelConversion","_computeLabelSizes","decimal","_longestTextCache","caches","nestedLabel","widestLabelSize","highestLabelSize","fontString","optionTicks","autoSkipPadding","toFont","valueAt","idx","ticksLength","alignBorderValue","ty2","tl","getPixelForDecimal","_alignPixel","x2","maxTicksLimit","lineColor","optsAtIndex","tickBorderDashOffset","alignedLineValue","tx2","titleX","y2","titleArgs","y1","borderDash","tickBorderDash","borderValue","tickAndPadding","hTickAndPadding","borderOpts","border","axisWidth","axisHalfWidth","x1","_getYAxisLabelAlignment","tx1","ty1","lineCount","positionAxisID1","value1","limit","step","optsAtIndexBorder","textOffset","backdrop","_computeLabelItems","_getXAxisLabelAlignment","tickTextAlign","halfCount","textStrokeColor","textStrokeWidth","labelPadding","getLineWidthForValue","lineDashOffset","drawLine","lastLineWidth","_computeLabelArea","_isVisible","titleAlign","drawGrid","_computeGridLineItems","tz","gz","bz","drawBorder","axisID","isForType","isPrototypeOf","parentScope","register","registerDefaults","propertyParts","sourceName","sourceScope","routes","isIChartComponent","pop","routeDefaults","defaultRoutes","TypedRegistry","plugins","_typedRegistries","controllers","_each","remove","addControllers","addPlugins","getController","_get","getElement","getPlugin","reg","removeElements","removePlugins","component","camelMethod","removeScales","typedRegistry","arg","_getRegistryForType","PluginService","_init","descriptor","_createDescriptors","callCallback","plugin","hook","_oldCache","invalidate","previousDescriptors","localIds","registry","getOpts","local","i1","pluginOpts","allPlugins","createDescriptors","_notifyStateChanges","some","createResolver","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","datasetElementScopeKeys","additionalOptionScopes","mainScope","keyLists","resetCache","_cachedScopes","needContext","subResolver","chartOptionScopes","subPrefixes","getResolver","hasFunction","KNOWN_POSITIONS","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","getChart","instances","intKey","inChartArea","invalidatePlugins","userConfig","existingChart","initialCanvas","updateConfig","_aspectRatio","_lastEvent","_plugins","$proxies","_hiddenIndices","attached","_doResize","_dataChanges","_listeners","_responsiveListeners","animator","listen","_initialize","_options","_resize","_resizeBeforeDraw","newSize","newRatio","axisOptions","onResize","scaleOpts","updated","render","dposition","buildOrUpdateScales","scaleClass","scaleType","dtype","hasUpdated","positionIsHorizontal","getScale","numMeta","_updateMetasets","_metasets","newControllers","getDatasetMeta","_sortedMetasets","order","isDatasetVisible","_dataset","_removeUnreferencedMetasets","ControllerClass","cancelable","reset","_resetElements","_minPadding","animsDisabled","_updateScales","_checkEventBindings","buildOrUpdateControllers","_updateHoverStyles","buildOrUpdateElements","removeBox","setsEqual","newEvents","_updateDatasets","_getUniformDataChanges","moveNumericKeys","_eventHandler","makeSet","ensureScalesHaveIDs","existingEvents","noArea","changes","datasetCount","changeSet","_updateLayout","ilen1","layers","_drawDataset","useClip","getDatasetArea","z","clip","getElementsAtEventForMode","_clip","toggleDataVisibility","unclipArea","getDataVisibility","modes","_updateVisibility","destroy","getVisibleDatasetCount","setDatasetVisibility","_remove","_destroyDatasetMeta","_stop","_add","detached","unbindEvents","toBase64Image","toDataURL","bindEvents","updateHoverStyle","deactivated","replay","activated","eventFilter","prefix","activeElements","lastActive","notify","lastEvent","isClick","abstract","formats","DateAdapterBase","members","endOf","updateMinAndPrev","$bar","visibleMetas","getAllParsedValues","_arrayUnique","curr","thickness","parseValue","barEnd","barStart","startValue","endValue","_custom","parseArrayOrPrimitive","isFloatBar","borderProps","custom","setBorderSkipped","borderSkipped","parseEdge","swap","startEnd","v2","orig","inflateAmount","setInflateAmount","grouped","DoughnutController","animateRotate","animateScale","circumference","generateLabels","legend","fontColor","legendItem","innerRadius","outerRadius","getter","_getRotation","_getRotationExtents","getMaxBorderWidth","cutout","toPercentage","radiusLength","arcs","getMaxOffset","maxSize","chartWeight","startX","startY","startAngle","endX","endAngle","endY","calcMax","calcMin","maxX","maxY","minX","minY","ratioX","ratioY","getRatioAndOffset","maxRadius","toDimension","updateElements","_getVisibleDatasetWeightTotal","_getRingWeightOffset","animationOpts","centerX","_circumference","centerY","_getSharedOptions","updateElement","metaData","calculateCircumference","calculateTotal","ringWeightOffset","borderAlign","hoverBorderWidth","hoverOffset","categoryPercentage","barPercentage","_value_","vAxisKey","iAxisKey","vpixels","enableBorderRadius","ipixels","skipNull","head","_calculateBarValuePixels","_calculateBarIndexPixels","ruler","_bottom","bars","pixels","_getStackCount","barSign","barThickness","computeMinSampleSize","halfGrid","baseValue","minBarLength","maxBarThickness","stackCount","floating","rects","actualBase","percent","chunk","initialize","getBasePixel","_scaleRangesChanged","_datasetIndex","_decimated","resolveDatasetElementOptions","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","lastPoint","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","cutoutPercentage","datasetStartAngle","xCenter","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","pointPosition","getPointPositionForValue","parseBorderRadius","angleDelta","innerLimit","halfThickness","computeOuterLimit","outerArcLimit","innerStart","outerStart","innerEnd","outerEnd","rThetaToXY","theta","pathArc","spacingOffset","innerR","outerEndAdjustedRadius","outerStartAdjustedAngle","innerStartAdjustedAngle","avNogSpacingRadius","innerStartAdjustedRadius","innerEndAdjustedRadius","outerMidAdjustedAngle","outerEndAdjustedAngle","angleOffset","outerStartAdjustedRadius","innerEndAdjustedAngle","innerMidAdjustedAngle","pCenter","p8","outerEndY","drawArc","pCenter3","outerStartX","outerStartY","outerEndX","fullCircles","borderJoinStyle","inner","clipArc","lineJoin","ArcElement","pixelMargin","angleMargin","getLineMethod","pathVars","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","lastY","prevX","avgX","countX","pointIndex","useFastPath","truncX","strokePathWithCache","drawX","path","strokePathDirect","fastPathSegment","usePath2D","_path","Path2D","segmentMethod","_getSegmentMethod","LineElement","_updateBezierControlPoints","_points","_pointsUpdated","interpolated","_segments","_boundSegments","hitRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","toTRBL","maxH","maxW","enableBorder","topLeft","topRight","maxR","bottomRight","outer","skipX","hasRadius","skipY","amount","refRect","borderRadius","chartX","chartY","betweenAngles","halfAngle","halfRadius","hoverRadius","mouseX","mouseY","inXRange","drawPoint","addRectPath","inflateRect","addRoundedRectPath","addNormalRectPath","inYRange","BORDER_COLORS","BACKGROUND_COLORS","getBorderColor","getBackgroundColor","getColorizer","chartType","colorizeDoughnutDataset","colorizePolarAreaDataset","colorizeDefaultDataset","containsColorsDefinitions","plugin_colors","beforeLayout","_args","colorizer","cleanDecimatedDataset","cleanDecimatedData","algorithm","xAxis","parsing","getStartAndCountOfVisiblePointsSimplified","threshold","decimated","samples","sampledIndex","bucketWidth","endIndex","avgRangeStart","nextA","avgRangeEnd","avgY","avgRangeLength","pointAx","rangeOffs","maxArea","rangeTo","maxAreaPoint","minMaxDecimation","lttbDecimation","minIndex","maxIndex","startIndex","xMax","xMin","lastIndex","intermediateIndex1","intermediateIndex2","_getBounds","_findSegmentEnd","_getEdge","boundary","linePoints","_resolveTarget","propagate","visited","_decodeFill","parseFillOption","firstCh","decodeTargetIndex","sourcePoint","linesBelow","postponed","pointValue","findPoint","simpleArc","_getTarget","getLineByIndex","below","unshift","addPointsBelow","sourcePoints","_buildStackLine","computeLinearBoundary","getBaseValue","_getTargetPixel","computeCircularBoundary","_drawfill","lineOpts","fillOption","above","clipVertical","doFill","clipY","lineLoop","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","drawTime","updateControlPoints","beforeDatasetsDraw","$filler","_shouldApplyFill","beforeDatasetDraw","labelOpts","fontSize","boxHeight","boxWidth","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","_hoveredItem","lineWidths","buildLabels","legendItems","labelFont","_fitRows","getBoxSize","_fitCols","legendHitBoxes","row","measureText","hitboxes","totalHeight","_itemHeight","columnSizes","heightLimit","totalWidth","currentColHeight","currentColWidth","legendItemText","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","col","rtlHelper","adjustHitBoxes","hitbox","hitbox1","defaultColor","_draw","drawLegendBox","cursor","drawTitle","lineCap","textDirection","realX","SQRT2","setLineDash","lineDash","halfFontSize","drawOptions","yBoxTop","xBoxLeft","titleFont","topPaddingPlusHalfFontSize","titlePadding","_computeTitleHeight","_toLeftRightCenter","_getLegendItemAt","lh","isListened","hoveredItem","hitBox","onLeave","sameItem","calculateItemSize","calculateItemWidth","_element","ci","handleEvent","usePointStyle","useBorderRadius","_getSortedDatasetMetas","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","plugin_subtitle","positioners","average","nearest","nearestElement","eventPosition","tp","toPush","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","tooltip","getTooltipSize","body","footer","footerMarginTop","maxLineWidth","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","footerSpacing","widthPadding","determineYAlign","displayColors","doesNotFitWithAlign","caretSize","determineXAlign","yAlign","xAlign","chartWidth","caret","caretPadding","determineAlignment","alignment","pushOrConcat","paddingAndSize","beforeTitle","tooltipItems","noop","getAlignedX","getBeforeAfterBodyLines","splitNewlines","tooltipItem","defaultCallbacks","formattedValue","labelCount","labelTextColor","labelPointStyle","beforeFooter","bodyColor","afterLabel","invokeCallbackWithFallback","opacity","_eventPosition","_cachedAnimations","labelPointStyles","labelTextColors","scoped","bodyItems","afterFooter","afterTitle","getBeforeBody","overrideCallbacks","labelColors","_createItems","getBody","itemSort","caretX","caretY","external","drawCaret","getCaretPosition","getTitle","ptX","ptY","tooltipPoint","y3","getFooter","_size","caretPosition","_tooltipItems","x3","pt","colorY","innerX","rtlColorX","multiKeyBackground","bodySpacing","bodyAlign","bodyLineHeight","fillLineOfText","xLinePadding","bodyAlignForCalculation","textColor","outerX","drawFooter","tooltipSize","quadraticCurveTo","animX","footerAlign","footerColor","animY","positionAndSize","getBackgroundPoint","drawBackground","drawBody","_updateAnimationTarget","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","Tooltip","afterInit","_ignoreReplayEvents","afterDraw","_getActiveElements","_willRender","afterEvent","findOrAddLabel","addedLabels","addIfString","lastIndexOf","_getLabelForValue","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","_valueRange","minSign","setMax","handleTickRangeOptions","setMin","maxSign","maxTicks","stepSize","getTickLimit","precision","dataRange","_setMinAndMaxByKey","MIN_SPACING","rmax","unit","maxSpaces","rmin","countDefined","numSpaces","niceMax","niceNum","niceMin","decimalPlaces","includeBounds","_startValue","generateTicks","LinearScale","determineDataLimits","computeTickLimit","getValueForPixel","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","generationOptions","exp","minExp","lastTick","LogarithmicScale","_zero","getDecimalForPixel","getTickBackdropHeight","determineLimits","fitWithPointLabels","valueCount","pointLabelOpts","additionalAngle","centerPointLabels","getPointPosition","plFont","hLimits","vLimits","setCenterPoint","limits","_pointLabelItems","updateLimits","extra","outerDistance","pointLabelPosition","getTextAlignForAngle","leftForTextAlign","buildPointLabelItems","pathRadiusLine","yCenter","drawRadiusLine","RadialLinearScale","angleLines","drawingArea","_pointLabels","rightMovement","bottomMovement","angleMultiplier","topMovement","leftMovement","scalingFactor","getPointLabelContext","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","gridLineOpts","drawLabels","second","INTERVALS","common","year","adapter","_adapter","parser","isoWeekday","startOf","minUnit","capacity","UNITS","interval","MAX_SAFE_INTEGER","addTick","majorUnit","timestamps","time","adapters","_normalized","setMajorTicks","_applyBounds","_majorUnit","_offsets","_date","displayFormats","_parseOpts","timeOpts","normalized","initOffsets","getDecimalForValue","_getLabelBounds","getLabelTimestamps","_unit","determineUnitForAutoTicks","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","ticksFromTimestamps","afterAutoSkip","offsets","cosRotation","sinRotation","exampleLabel","_tickFormatFunction","exampleTime","hasWeekday","getDataTimestamps","tooltipFormat","datetime","prevSource","nextSource","prevTarget","nextTarget","TimeScale","span","added","_addedLabels","_table","_minPos","_tableRange","Chart","helpers","platforms"],"mappings":"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"}